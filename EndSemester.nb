(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 11.2' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[    623638,      12058]
NotebookOptionsPosition[    614671,      11901]
NotebookOutlinePosition[    615043,      11917]
CellTagsIndexPosition[    615000,      11914]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["\<\
End-Semester Project:
1. Sabhatina Selvam (9079922689)
2. Deepan Das (9080158406)\
\>", "Title",
 CellChangeTimes->{{3.753023919602779*^9, 3.7530239243100753`*^9}, {
  3.7531145352341495`*^9, 3.75311454431489*^9}, {3.7536497538682537`*^9, 
  3.753649770520873*^9}},ExpressionUUID->"587c9bcf-da78-43b4-9f7c-\
c94f0df8230f"],

Cell[CellGroupData[{

Cell["Loading all Image Files.", "Subsection",
 CellChangeTimes->{{3.753114548850771*^9, 
  3.7531145676125755`*^9}},ExpressionUUID->"924a6c0c-67ba-442b-aee8-\
ea6d255cf991"],

Cell[BoxData[
 RowBox[{"Correct", " ", "the", " ", "Folder", " ", "Path", " ", "and", " ", 
  "Evaluate", " ", "the", " ", "following", " ", "cell", " ", "before", " ", 
  "Test", " ", "Bench", " ", 
  RowBox[{"evaluation", "."}]}]], "Code",
 CellChangeTimes->{{3.7536407006558714`*^9, 3.753640736413288*^9}},
 EmphasizeSyntaxErrors->True,
 CellLabel->"In[36]:=",ExpressionUUID->"5cf28fa1-6099-4f50-a018-588573a3b833"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"traFiles", " ", "=", " ", 
   RowBox[{"FileNames", "[", 
    RowBox[{"\"\<texture*\>\"", ",", 
     RowBox[{
      RowBox[{"NotebookDirectory", "[", "]"}], "<>", 
      "\"\<textures/texturesTraining/\>\""}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"traTextures", " ", "=", " ", 
   RowBox[{
    RowBox[{
     RowBox[{"Import", "[", "#", "]"}], "&"}], "/@", "traFiles"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"testFiles", " ", "=", " ", 
   RowBox[{"FileNames", "[", 
    RowBox[{"\"\<texture*\>\"", ",", 
     RowBox[{
      RowBox[{"NotebookDirectory", "[", "]"}], "<>", 
      "\"\<textures/texturesTest/\>\""}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"testTextures", " ", "=", " ", 
   RowBox[{
    RowBox[{
     RowBox[{"Import", "[", "#", "]"}], "&"}], "/@", "testFiles"}]}], 
  ";"}]}], "Input",
 CellChangeTimes->{{3.7530234112046423`*^9, 3.753023500685019*^9}, {
  3.753024015054571*^9, 3.7530240205719533`*^9}, {3.753045082328227*^9, 
  3.7530452142951145`*^9}, {3.753046040529209*^9, 3.753046041129318*^9}, {
  3.7530478493521733`*^9, 3.7530478526281595`*^9}, {3.753073613987006*^9, 
  3.7530736144238553`*^9}},
 CellLabel->"In[39]:=",ExpressionUUID->"ebdef021-d26c-4c0d-a609-1731120655af"]
}, Open  ]],

Cell[CellGroupData[{

Cell["\<\
Generating accurate label vectors for the various training and test Images. \
It has to be noted that there are not 36 images for each label in the \
training set. There are a total of 195 Training Images and 21 Testing Images.\
\>", "Subsection",
 CellChangeTimes->{{3.7531145735896378`*^9, 
  3.7531146548095303`*^9}},ExpressionUUID->"fef77e47-b759-42da-be9f-\
671efb9d1e59"],

Cell[BoxData[
 RowBox[{"Evaluate", " ", "this", " ", "cell", " ", "before", " ", "Test", 
  " ", "Bench", " ", 
  RowBox[{"Evaluation", "."}]}]], "Code",
 CellChangeTimes->{{3.7536407409152246`*^9, 3.753640764029687*^9}},
 EmphasizeSyntaxErrors->True,
 CellLabel->"In[36]:=",ExpressionUUID->"86880dde-e8cb-4c66-a185-9245c9bde3d5"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"c1", " ", "=", " ", 
   RowBox[{"ConstantArray", "[", 
    RowBox[{"1", ",", "33"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"c2", " ", "=", " ", 
   RowBox[{"ConstantArray", "[", 
    RowBox[{"2", ",", "32"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"c3", " ", "=", " ", 
   RowBox[{"ConstantArray", "[", 
    RowBox[{"3", ",", "33"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"c4", " ", "=", " ", 
   RowBox[{"ConstantArray", "[", 
    RowBox[{"4", ",", "32"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"c5", " ", "=", " ", 
   RowBox[{"ConstantArray", "[", 
    RowBox[{"5", ",", "32"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"c6", " ", "=", " ", 
   RowBox[{"ConstantArray", "[", 
    RowBox[{"6", ",", " ", "33"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"classes", " ", "=", " ", 
   RowBox[{"Join", "[", 
    RowBox[{"c1", ",", "c2", ",", "c3", ",", "c4", ",", "c5", ",", "c6"}], 
    "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"classTest", " ", "=", " ", 
   RowBox[{"{", 
    RowBox[{
    "1", ",", "1", ",", "1", ",", "2", ",", "2", ",", "2", ",", "2", ",", "3",
      ",", "3", ",", "3", ",", "4", ",", "4", ",", "4", ",", "4", ",", "5", 
     ",", "5", ",", "5", ",", "5", ",", "6", ",", "6", ",", "6"}], "}"}]}], 
  ";"}], "\[IndentingNewLine]"}], "Input",
 CellChangeTimes->CompressedData["
1:eJxTTMoPSmViYGAQB2IQXf59HlPwt9eO67o82UD0NdUXXCDaLFxPEkQzlEj/
jwDSUWfOMUQC6f+rV7GAaKkZERwgekLqOV4QXcDAJAeiZYza1UB0R9kXbRC9
IkbCCERvencFTH9TqrAE0fs+nLQG0Qu+/bcH0X92WTqA6FU1+11A9LzHa4JB
dPCZnFSw+UWr00D0Bdur2SDaf3djAYhedMboWwyQnra36zuI9meVFo4F0n//
/QLTU8RzJEC0A6uNDIjm+LZME0TbJy7RBdGls+ONQLRPXb0xiJ6h32YOok0k
ba1AtMFWRXsQXbf6nCuIvsA9xwtE63FF+4Do2g+7g0G00JWTYHpainxBHJD+
d9GxEESviloenQ2kEz9sAtMAYN7HqQ==
  "],
 CellLabel->"In[43]:=",ExpressionUUID->"e74f7cb0-9501-48a3-9fce-6214a41dafc8"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Segmentation Based Measures", "Section",
 CellChangeTimes->{{3.7530745524155073`*^9, 3.7530745570401845`*^9}, {
  3.753640260115443*^9, 
  3.753640263575199*^9}},ExpressionUUID->"ec88e78d-b66b-4b5f-b200-\
7847f7cb17ed"],

Cell["\<\
We realised that the texture images needed some preprocessing for getting rid \
of the high frequency noise and less prominent features. As we were trying to \
extract the watershed components, we decided to implement ridge filter but it \
turned out to be increasing the noise in these images. The failed method \
using ridge filters followed by watershed segmentation eliminated high pass \
filtering to begin with. Eliminating this possibility led us to believe that \
the images needed low pass filtering followed up by gradient filters for \
implementing efficient watershed segmentation. 
The training feature vectors and testing feature vectors based on watershed \
segmentation have been found in this section.

We chose watershed for the following reasons:
1. Textures have basins that watershed promises to catch.
2. It performs uniformly well for all textures compared to other segmentation \
techniques.

The following training feature set has information about the most plausible \
and prominent features of the different sets of textures. The structural \
properties of the various segments have been captured using the in-built \
functions of ComponentMeasurements. We tried a lot of combinations but we got \
maximum accuracy from the following combination of features. 
\
\>", "Text",
 CellChangeTimes->{
  3.7536410193575296`*^9, {3.753641933094629*^9, 
   3.7536420943104305`*^9}},ExpressionUUID->"69679935-a8e9-4adf-a4f0-\
3d611e0001b0"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Evaluate", " ", "the", " ", "Following", " ", "cell", " ", "before",
   " ", "Test", " ", "Bench", " ", "Evaluation"}]], "Code",
 CellChangeTimes->{{3.753640268293585*^9, 3.753640287531165*^9}, {
  3.753640777972163*^9, 3.7536407791670094`*^9}},
 CellLabel->"In[36]:=",ExpressionUUID->"f7d42e1e-01fe-4106-bdde-42e00ba43410"],

Cell[BoxData[
 RowBox[{"before", " ", "Bench", " ", "cell", " ", "Evaluate", " ", 
  "Evaluation", " ", "Following", " ", "Test", " ", "the"}]], "Output",
 CellChangeTimes->{3.753643326560501*^9},
 CellLabel->"Out[36]=",ExpressionUUID->"694f7004-8c9b-4cdf-abff-ff8896df42f9"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"featureVecSeg", "[", "img1_", "]"}], " ", ":=", " ", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"markers1", "=", 
       RowBox[{"MaxDetect", "[", 
        RowBox[{
         RowBox[{"GaussianFilter", "[", 
          RowBox[{"img1", ",", "50"}], "]"}], ",", 
         RowBox[{"Padding", "\[Rule]", "1"}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"ws", " ", "=", " ", 
       RowBox[{"WatershedComponents", "[", 
        RowBox[{
         RowBox[{"GradientFilter", "[", 
          RowBox[{"img1", ",", "3"}], "]"}], ",", "markers1"}], "]"}]}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"wsd", " ", "=", " ", 
       RowBox[{"DeleteSmallComponents", "[", "ws", "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"featCounts", " ", "=", " ", 
       RowBox[{"Length", "[", 
        RowBox[{"ComponentMeasurements", "[", 
         RowBox[{"wsd", ",", 
          RowBox[{"{", "\"\<Count\>\"", "}"}]}], "]"}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{"wsd", "//", "Colorize"}], "*)"}], "\[IndentingNewLine]", 
      RowBox[{"FeatList", " ", "=", " ", 
       RowBox[{"List", " ", "@@@", " ", 
        RowBox[{"ComponentMeasurements", "[", 
         RowBox[{"wsd", ",", " ", 
          RowBox[{"{", 
           RowBox[{
           "\"\<Elongation\>\"", ",", "\"\<Orientation\>\"", ",", 
            "\"\<Length\>\"", ",", "\"\<Width\>\"", ",", "\"\<Area\>\"", ",", 
            "\"\<PerimeterLength\>\"", ",", "\"\<FilledCount\>\"", 
            RowBox[{"(*", 
             RowBox[{",", "\"\<EquivalentDiskRadius\>\""}], "*)"}], ",", 
            "\"\<NeighborCount\>\"", ",", "\"\<Circularity\>\"", ",", 
            "\"\<Rectangularity\>\""}], 
           RowBox[{"(*", 
            RowBox[{",", "\"\<FilledCircularity\>\""}], "*)"}], "}"}]}], 
         "]"}]}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"EllipseAxesList", " ", "=", " ", 
       RowBox[{"List", " ", "@@@", " ", 
        RowBox[{"ComponentMeasurements", "[", 
         RowBox[{"wsd", ",", " ", 
          RowBox[{"{", "\"\<SemiAxes\>\"", "}"}]}], "]"}]}]}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"featMean1", " ", "=", " ", 
       RowBox[{"N", "[", 
        RowBox[{"Mean", "[", 
         RowBox[{"FeatList", "[", 
          RowBox[{"[", 
           RowBox[{";;", ",", "2"}], "]"}], "]"}], "]"}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"featCounts", ">", "1"}], ",", 
        RowBox[{"featSD1", " ", "=", 
         RowBox[{"N", "[", 
          RowBox[{"StandardDeviation", "[", 
           RowBox[{"FeatList", "[", 
            RowBox[{"[", 
             RowBox[{";;", ",", "2"}], "]"}], "]"}], "]"}], "]"}]}], ",", 
        RowBox[{"featSD1", " ", "=", " ", 
         RowBox[{"ConstantArray", "[", 
          RowBox[{"0", ",", "10"}], "]"}]}]}], "]"}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"featMeanAxes", " ", "=", " ", 
       RowBox[{"N", "[", 
        RowBox[{
         RowBox[{"Mean", "[", 
          RowBox[{"EllipseAxesList", "[", 
           RowBox[{"[", 
            RowBox[{";;", ",", "2"}], "]"}], "]"}], "]"}], "[", 
         RowBox[{"[", "1", "]"}], "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"featCounts", ">", "1"}], ",", " ", 
        RowBox[{"featStdDevAxes", " ", "=", " ", 
         RowBox[{
          RowBox[{"N", "[", 
           RowBox[{"StandardDeviation", "[", 
            RowBox[{"EllipseAxesList", "[", 
             RowBox[{"[", 
              RowBox[{";;", ",", "2"}], "]"}], "]"}], "]"}], "]"}], "[", 
          RowBox[{"[", "1", "]"}], "]"}]}], ",", 
        RowBox[{"featStdDevAxes", "=", 
         RowBox[{"{", 
          RowBox[{"0", ",", "0"}], "}"}]}]}], "]"}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"{", 
       RowBox[{"feat", " ", "=", " ", 
        RowBox[{"Join", "[", 
         RowBox[{
         "featMean1", ",", "featMeanAxes", ",", "featSD1", ",", " ", 
          "featStdDevAxes"}], "]"}]}], "}"}]}]}], "]"}]}], 
  "\[IndentingNewLine]", "\[IndentingNewLine]"}]], "Input",
 CellChangeTimes->{{3.7530453227053795`*^9, 3.753045341369872*^9}, {
   3.7530453828148556`*^9, 3.7530453900353985`*^9}, {3.7530454867060213`*^9, 
   3.7530454962475944`*^9}, {3.753045619109524*^9, 3.7530457001272745`*^9}, {
   3.7530459515174446`*^9, 3.7530459552328873`*^9}, 3.75304625466259*^9, {
   3.753046332813068*^9, 3.753046337705803*^9}, {3.7530476428504953`*^9, 
   3.7530476568256946`*^9}, {3.753048070390061*^9, 3.753048093378384*^9}, {
   3.7530481746204357`*^9, 3.7530481821231565`*^9}, {3.7530482330721436`*^9, 
   3.753048323044832*^9}, {3.7530484357049856`*^9, 3.753048467274211*^9}, {
   3.7530488176349354`*^9, 3.753048876531885*^9}, {3.753048954563833*^9, 
   3.75304899469512*^9}, {3.753049029496402*^9, 3.753049072376998*^9}, 
   3.7530491323921103`*^9, {3.7530499678600082`*^9, 3.7530500174248543`*^9}, {
   3.7530503942313375`*^9, 3.753050403606188*^9}, {3.7530509802431293`*^9, 
   3.753051024456908*^9}, {3.75305107631433*^9, 3.753051098453853*^9}, {
   3.7530515289734993`*^9, 3.753051556832344*^9}, {3.753051631948928*^9, 
   3.7530516680698895`*^9}, {3.75305180143922*^9, 3.7530518040896215`*^9}, {
   3.753051884435606*^9, 3.7530518874248466`*^9}, {3.753051997403865*^9, 
   3.7530519989296155`*^9}, {3.753052048780349*^9, 3.7530521046273813`*^9}, {
   3.7530525336936398`*^9, 3.7530528640999904`*^9}, {3.7530532472539196`*^9, 
   3.753053247554121*^9}, {3.753053357960015*^9, 3.7530534441006136`*^9}, {
   3.753053498877184*^9, 3.753053501980151*^9}, {3.753054061655675*^9, 
   3.7530541288460054`*^9}, {3.753054233559667*^9, 3.753054248877722*^9}, {
   3.7530546847231455`*^9, 3.753054760356934*^9}, {3.7530547969121847`*^9, 
   3.7530548117704463`*^9}, {3.753055009657483*^9, 3.753055040796259*^9}, {
   3.7530550748930826`*^9, 3.753055112277114*^9}, {3.753055207453602*^9, 
   3.7530552228783627`*^9}, 3.7530553912470922`*^9, {3.753055660983801*^9, 
   3.753055725560156*^9}, {3.7530557567617183`*^9, 3.7530558021852207`*^9}, {
   3.7530561582281003`*^9, 3.753056161620013*^9}, {3.753056230583604*^9, 
   3.753056382236076*^9}, {3.7530666686472397`*^9, 3.7530666688856525`*^9}, {
   3.7530671790833073`*^9, 3.7530671821351786`*^9}, {3.7530676786285267`*^9, 
   3.7530676789696245`*^9}, {3.75306824629749*^9, 3.7530682478942227`*^9}, {
   3.7530737045019364`*^9, 3.7530738642148876`*^9}, {3.753074111174506*^9, 
   3.753074143028289*^9}, 3.7530753805299077`*^9, {3.7531146882132044`*^9, 
   3.75311472665749*^9}, {3.7531153169416013`*^9, 3.7531153172009497`*^9}, {
   3.753116302292601*^9, 3.7531163026416626`*^9}, {3.7531167094721966`*^9, 
   3.753116709908986*^9}, {3.753117886170137*^9, 3.7531178949417243`*^9}, {
   3.7531298008646054`*^9, 3.7531298021072845`*^9}, {3.7531320306538963`*^9, 
   3.753132046969242*^9}, {3.753132442183822*^9, 3.753132446111325*^9}, {
   3.7531954629112477`*^9, 3.753195472806842*^9}, {3.753453055883423*^9, 
   3.753453056095855*^9}, {3.7534821003790474`*^9, 3.7534821289207573`*^9}, {
   3.7536275380047226`*^9, 3.753627556726678*^9}, {3.7536307605941277`*^9, 
   3.753630764328247*^9}, {3.7536309208068676`*^9, 3.7536309211947985`*^9}, 
   3.7536402566566916`*^9, {3.753640290172104*^9, 3.7536402908004303`*^9}},
 CellLabel->"In[51]:=",ExpressionUUID->"f970447c-4d8a-4558-9ab0-c721866c84f3"],

Cell[CellGroupData[{

Cell["Segmentation Based Feature Matrix Extraction", "Subsubsection",
 CellChangeTimes->{{3.7536403039592485`*^9, 
  3.7536403166223993`*^9}},ExpressionUUID->"f35e8499-ad17-470c-b57f-\
a0313acba485"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"featMatrixTrainingSeg", "=", " ", 
   RowBox[{"ConstantArray", "[", 
    RowBox[{"0", ",", 
     RowBox[{"Length", "[", "traFiles", "]"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"For", "[", 
  RowBox[{
   RowBox[{"i", "=", "1"}], ",", 
   RowBox[{"i", "\[LessEqual]", 
    RowBox[{"Length", "[", "traFiles", "]"}]}], ",", 
   RowBox[{"i", "++"}], ",", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"featMatrixTrainingSeg", "[", 
      RowBox[{"[", "i", "]"}], "]"}], " ", "=", " ", 
     RowBox[{
      RowBox[{"featureVecSeg", "[", 
       RowBox[{"traTextures", "[", 
        RowBox[{"[", "i", "]"}], "]"}], "]"}], "[", 
      RowBox[{"[", "1", "]"}], "]"}]}], ";"}]}], "]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"featMatrixTestingSeg", " ", "=", " ", 
   RowBox[{"ConstantArray", "[", 
    RowBox[{"0", ",", 
     RowBox[{"Length", "[", "testFiles", "]"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"For", "[", 
  RowBox[{
   RowBox[{"i", "=", "1"}], ",", 
   RowBox[{"i", "\[LessEqual]", 
    RowBox[{"Length", "[", "testFiles", "]"}]}], ",", 
   RowBox[{"i", "++"}], ",", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"featMatrixTestingSeg", "[", 
      RowBox[{"[", "i", "]"}], "]"}], " ", "=", " ", 
     RowBox[{
      RowBox[{"featureVecSeg", "[", 
       RowBox[{"testTextures", "[", 
        RowBox[{"[", "i", "]"}], "]"}], "]"}], "[", 
      RowBox[{"[", "1", "]"}], "]"}]}], ";"}]}], "]"}]}], "Input",
 CellChangeTimes->{{3.7530457218678055`*^9, 3.753045779926655*^9}, {
   3.7530467069373116`*^9, 3.7530467508578653`*^9}, {3.7530738541767006`*^9, 
   3.753073879236682*^9}, {3.753075391845193*^9, 3.753075422806102*^9}, {
   3.7531163152629285`*^9, 3.7531163193470187`*^9}, {3.753482054189501*^9, 
   3.7534820810736427`*^9}, {3.7536291675776887`*^9, 
   3.7536291718811865`*^9}, {3.7536307811132774`*^9, 3.7536307920590305`*^9}, 
   3.753630832700344*^9, {3.7536308852977934`*^9, 3.753630890794092*^9}, {
   3.753630982848029*^9, 3.7536309831003246`*^9}},
 CellLabel->"In[52]:=",ExpressionUUID->"96c18bd1-b88f-40f8-a843-6707bfcc7236"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Segmentation Based Feature Classifier", "Subsubsection",
 CellChangeTimes->{{3.753640324529267*^9, 
  3.753640331886603*^9}},ExpressionUUID->"b2917aee-d8e7-4515-b105-\
73aa020487b3"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"trainingSetSeg", " ", "=", " ", 
   RowBox[{"Thread", "[", 
    RowBox[{"featMatrixTrainingSeg", "\[Rule]", "classes"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"cSeg", " ", "=", " ", 
  RowBox[{"Classify", "[", 
   RowBox[{"trainingSetSeg", ",", 
    RowBox[{"Method", "\[Rule]", "\"\<LogisticRegression\>\""}]}], 
   "]"}]}]}], "Input",
 CellChangeTimes->{{3.75362919601073*^9, 3.7536292137353487`*^9}},
 CellLabel->"In[56]:=",ExpressionUUID->"888c579b-ebf9-4a18-b2c9-a24856318080"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["ClassifierFunction",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    TemplateBox[{PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquarePlusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              Evaluator -> Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{{
               PointSize[0.13], 
               GrayLevel[0.45], 
               
               PointBox[{{0.9821769431797024, -0.440194219686987}, {
                1.1339776261519132`, 0.8056918676854272}, {0.5279892326667741,
                 0.6574306661126254}, {0.022147046479890797`, 
                1.4937877187998898`}}], 
               GrayLevel[0.7], 
               
               PointBox[{{-0.9815166384819979, 
                0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
               GrayLevel[0.55], 
               AbsoluteThickness[1.5], 
               LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
             Axes -> {False, False}, AxesLabel -> {None, None}, 
              AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
              Frame -> {{True, True}, {True, True}}, 
              FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
              Directive[
                Thickness[Tiny], 
                GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, 
              GridLines -> {None, None}, 
              LabelStyle -> {FontFamily -> "Arial"}, 
              Method -> {"ScalingFunctions" -> None}, 
              PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> True,
               PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
              Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
             ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], Frame -> True, FrameTicks -> None, 
             FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
             GrayLevel[0.94]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TagBox[
                   TooltipBox[
                    TemplateBox[{"\"Mixed\"", 
                    StyleBox[
                    
                    TemplateBox[{"\" (number: \"", "24", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    TagBox[
                    RowBox[{"{", 
                    
                    RowBox[{
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\""}], "}"}], 
                    Short[#, 10]& ]], Annotation[#, 
                    
                    Short[{"Numerical", "Numerical", "Numerical", "Numerical",
                     "Numerical", "Numerical", "Numerical", "Numerical", 
                    "Numerical", "Numerical", "Numerical", "Numerical", 
                    "Numerical", "Numerical", "Numerical", "Numerical", 
                    "Numerical", "Numerical", "Numerical", "Numerical", 
                    "Numerical", "Numerical", "Numerical", "Numerical"}, 10], 
                    "Tooltip"]& ], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Number of classes: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TagBox[
                   TooltipBox["6", 
                    TagBox[
                    RowBox[{"{", 
                    
                    RowBox[{
                    "1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6"}], 
                    "}"}], Short[#, 1]& ]], Annotation[#, 
                    Short[{1, 2, 3, 4, 5, 6}, 1], "Tooltip"]& ], 
                  "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquareMinusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              Evaluator -> Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{{
               PointSize[0.13], 
               GrayLevel[0.45], 
               
               PointBox[{{0.9821769431797024, -0.440194219686987}, {
                1.1339776261519132`, 0.8056918676854272}, {0.5279892326667741,
                 0.6574306661126254}, {0.022147046479890797`, 
                1.4937877187998898`}}], 
               GrayLevel[0.7], 
               
               PointBox[{{-0.9815166384819979, 
                
                0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
               GrayLevel[0.55], 
               AbsoluteThickness[1.5], 
               LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
             Axes -> {False, False}, AxesLabel -> {None, None}, 
              AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
              Frame -> {{True, True}, {True, True}}, 
              FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
              Directive[
                Thickness[Tiny], 
                GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, 
              GridLines -> {None, None}, 
              LabelStyle -> {FontFamily -> "Arial"}, 
              Method -> {"ScalingFunctions" -> None}, 
              PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> True,
               PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
              Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
             ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], Frame -> True, FrameTicks -> None, 
             FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
             GrayLevel[0.94]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TagBox[
                   TooltipBox[
                    TemplateBox[{"\"Mixed\"", 
                    StyleBox[
                    
                    TemplateBox[{"\" (number: \"", "24", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    TagBox[
                    RowBox[{"{", 
                    
                    RowBox[{
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\""}], "}"}], 
                    Short[#, 10]& ]], Annotation[#, 
                    
                    Short[{"Numerical", "Numerical", "Numerical", "Numerical",
                     "Numerical", "Numerical", "Numerical", "Numerical", 
                    "Numerical", "Numerical", "Numerical", "Numerical", 
                    "Numerical", "Numerical", "Numerical", "Numerical", 
                    "Numerical", "Numerical", "Numerical", "Numerical", 
                    "Numerical", "Numerical", "Numerical", "Numerical"}, 10], 
                    "Tooltip"]& ], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Number of classes: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TagBox[
                   TooltipBox["6", 
                    TagBox[
                    RowBox[{"{", 
                    
                    RowBox[{
                    "1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6"}], 
                    "}"}], Short[#, 1]& ]], Annotation[#, 
                    Short[{1, 2, 3, 4, 5, 6}, 1], "Tooltip"]& ], 
                  "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Method: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"LogisticRegression\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox[
                 "\"Number of training examples: \"", 
                  "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                 TagBox["195", "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  ClassifierFunction[
   Association[
   "ExampleNumber" -> 195, "ClassNumber" -> 6, "Input" -> 
    Association["Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
        Association[
        "Input" -> Association[
          "f1" -> Association["Type" -> "Numerical"], "f2" -> 
           Association["Type" -> "Numerical"], "f3" -> 
           Association["Type" -> "Numerical"], "f4" -> 
           Association["Type" -> "Numerical"], "f5" -> 
           Association["Type" -> "Numerical"], "f6" -> 
           Association["Type" -> "Numerical"], "f7" -> 
           Association["Type" -> "Numerical"], "f8" -> 
           Association["Type" -> "Numerical"], "f9" -> 
           Association["Type" -> "Numerical"], "f10" -> 
           Association["Type" -> "Numerical"], "f11" -> 
           Association["Type" -> "Numerical"], "f12" -> 
           Association["Type" -> "Numerical"], "f13" -> 
           Association["Type" -> "Numerical"], "f14" -> 
           Association["Type" -> "Numerical"], "f15" -> 
           Association["Type" -> "Numerical"], "f16" -> 
           Association["Type" -> "Numerical"], "f17" -> 
           Association["Type" -> "Numerical"], "f18" -> 
           Association["Type" -> "Numerical"], "f19" -> 
           Association["Type" -> "Numerical"], "f20" -> 
           Association["Type" -> "Numerical"], "f21" -> 
           Association["Type" -> "Numerical"], "f22" -> 
           Association["Type" -> "Numerical"], "f23" -> 
           Association["Type" -> "Numerical"], "f24" -> 
           Association["Type" -> "Numerical"]], "Output" -> 
         Association[
          "f1" -> Association["Type" -> "Numerical", "Weight" -> 1], "f2" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f3" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f4" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f5" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f6" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f7" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f8" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f9" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f10" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f11" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f12" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f13" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f14" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f15" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f16" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f17" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f18" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f19" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f20" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f21" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f22" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f23" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f24" -> 
           Association["Type" -> "Numerical", "Weight" -> 1]], "Preprocessor" -> 
         MachineLearning`MLProcessor["Sequence", 
           Association["Processors" -> {
              MachineLearning`MLProcessor["Transpose", 
               Association["FeatureNumber" -> 24]], 
              MachineLearning`MLProcessor["WrapMLDataset", 
               Association[
               "FeatureTypes" -> {
                 "Numerical", "Numerical", "Numerical", "Numerical", 
                  "Numerical", "Numerical", "Numerical", "Numerical", 
                  "Numerical", "Numerical", "Numerical", "Numerical", 
                  "Numerical", "Numerical", "Numerical", "Numerical", 
                  "Numerical", "Numerical", "Numerical", "Numerical", 
                  "Numerical", "Numerical", "Numerical", "Numerical"}, 
                "FeatureKeys" -> {
                 "f1", "f2", "f3", "f4", "f5", "f6", "f7", "f8", "f9", "f10", 
                  "f11", "f12", "f13", "f14", "f15", "f16", "f17", "f18", 
                  "f19", "f20", "f21", "f22", "f23", "f24"}, "FeatureWeights" -> 
                Automatic, "ExampleWeights" -> Automatic, "RawExample" -> 
                Missing["KeyAbsent", "RawExample"]]]}]], "ScalarFeature" -> 
         False, "Invertibility" -> "Perfect", "Missing" -> "Allowed"]], 
      "Processor" -> MachineLearning`MLProcessor["Sequence", 
        Association[
        "Input" -> Association[
          "f1" -> Association["Type" -> "Numerical", "Weight" -> 1], "f2" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f3" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f4" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f5" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f6" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f7" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f8" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f9" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f10" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f11" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f12" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f13" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f14" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f15" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f16" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f17" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f18" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f19" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f20" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f21" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f22" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f23" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f24" -> 
           Association["Type" -> "Numerical", "Weight" -> 1]], "Output" -> 
         Association[
          "(f1f2f3f4f5f6f7f8f9f10f11f12f13f14f15f16f17f18f19f20f21f22f23f24)" -> 
           Association["Type" -> "NumericalVector", "Weight" -> 24]], 
         "Processors" -> {
           MachineLearning`MLProcessor["ToVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
             Association[
              "f1" -> Association["Type" -> "Numerical", "Weight" -> 1], "f2" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f3" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f4" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f5" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f6" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f7" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f8" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f9" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f10" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f11" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f12" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f13" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f14" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f15" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f16" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f17" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f18" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f19" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f20" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f21" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f22" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f23" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f24" -> 
               Association["Type" -> "Numerical", "Weight" -> 1]], "Output" -> 
             Association[
              "(f1f2f3f4f5f6f7f8f9f10f11f12f13f14f15f16f17f18f19f20f21f22f23f2\
4)" -> Association["Type" -> "NumericalVector", "Weight" -> 24]], 
             "Version" -> {11.3, 0}, "ID" -> 2484951432533127702]], 
           MachineLearning`MLProcessor["ImputeMissing", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Imputed", "Input" -> 
             Association[
              "(f1f2f3f4f5f6f7f8f9f10f11f12f13f14f15f16f17f18f19f20f21f22f23f2\
4)" -> Association["Type" -> "NumericalVector", "Weight" -> 24]], 
             "Imputer" -> (DimensionReducerFunction[
               Association[
               "ExampleNumber" -> 195, "Imputer" -> 
                MachineLearning`MLProcessor["ImputeMissing", 
                  Association[
                  "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                   "Input" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                   "Fill" -> {0.6005034564894642, -1.0289952106540994`, 
                    553.6328238672897, 213.91950569982757`, 81195.38595816356,
                     2203.790905195023, 81661.71872864607, 0., 
                    0.5083586185290612, 0.6414498322094291, 276.8164119336449,
                     106.95975284991378`, 0.1065130063688495, 
                    0.5247830768944663, 80.31028921307265, 41.38058456178675, 
                    16411.52217618273, 409.1379652358299, 16660.566005308712`,
                     0., 0.0786635152383648, 0.07354687522592859, 
                    40.155144606536325`, 20.690292280893374`}, "Method" -> 
                   "Naive", "VectorLength" -> 24, "Output" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Type" -> 
                   "NumericalVector"]], "RandomImputer" -> 
                MachineLearning`MLProcessor["ImputeMissing", 
                  Association[
                  "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                   "Input" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                   "Mean" -> {0.6005034564894642, -1.0289952106540994`, 
                    553.6328238672897, 213.91950569982757`, 81195.38595816356,
                     2203.790905195023, 81661.71872864607, 0., 
                    0.5083586185290612, 0.6414498322094291, 276.8164119336449,
                     106.95975284991378`, 0.1065130063688495, 
                    0.5247830768944663, 80.31028921307265, 41.38058456178675, 
                    16411.52217618273, 409.1379652358299, 16660.566005308712`,
                     0., 0.0786635152383648, 0.07354687522592859, 
                    40.155144606536325`, 20.690292280893374`}, 
                   "StandardDeviation" -> {0.17909504674600157`, 
                    1.7394119521941984`, 100.10152442847547`, 
                    116.34056005105496`, 57862.368820519005`, 732.24915951163,
                     58370.94814282587, 1., 0.11356345537365015`, 
                    0.11378065021694322`, 50.050762214237736`, 
                    58.17028002552748, 0.08442411233940529, 
                    0.9909154765613413, 67.58388179713928, 35.26838656130087, 
                    14253.383647324345`, 320.64575578095804`, 
                    14536.692973103574`, 1., 0.05403586317436101, 
                    0.051107116689023444`, 33.79194089856964, 
                    17.634193280650436`}, "Method" -> "NaiveSampler", 
                   "VectorLength" -> 24, "Output" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Type" -> 
                   "NumericalVector"]], "Preprocessor" -> 
                MachineLearning`MLProcessor["ToMLDataset", 
                  Association[
                  "Input" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Length" -> 24]], "Output" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                   "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
                    Association["Processors" -> {
                    MachineLearning`MLProcessor["List"], 
                    MachineLearning`MLProcessor["WrapMLDataset", 
                    Association[
                    "FeatureTypes" -> {"NumericalVector"}, 
                    "FeatureKeys" -> {"f1"}, "FeatureWeights" -> Automatic, 
                    "ExampleWeights" -> Automatic, "RawExample" -> 
                    Missing["KeyAbsent", "RawExample"]]]}]], "ScalarFeature" -> 
                   True, "Invertibility" -> "Perfect", "Missing" -> 
                   "Allowed"]], "Processor" -> 
                MachineLearning`MLProcessor["Identity"], "Padder" -> 
                MachineLearning`MLProcessor["Identity"], "PostProcessor" -> 
                MachineLearning`MLProcessor["FromMLDataset", 
                  Association[
                  "DatasetFormat" -> Automatic, "Input" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Output" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Length" -> 10]], 
                   "InversePreprocessor" -> 
                   MachineLearning`MLProcessor["Sequence", 
                    Association["Processors" -> {
                    MachineLearning`MLProcessor["List"], 
                    MachineLearning`MLProcessor["WrapMLDataset", 
                    Association[
                    "FeatureTypes" -> {"NumericalVector"}, 
                    "FeatureKeys" -> {"f1"}, "FeatureWeights" -> {1}, 
                    "ExampleWeights" -> 1]]}]], "ScalarFeature" -> True, 
                   "Invertibility" -> "Perfect", "Missing" -> "Allowed"]], 
                "Model" -> Association["Matrix" -> CompressedData["
1:eJyd03lQE/YSB/AU0QqaJ0VaRCtoQaGKgjQoauhqihWrFTxILVA5pBCtBWoF
FZWj2Iq8Kjw55AgGNIhoKAHCHWYTTIwgIQQSjAgUAkU5AlSOx1HldcbfP33T
98/bmZ3v7M7++dnV/iEHv9ajUCjL/mzDP3v2ilPVyy0N2LCf3cVhyqGyIy2N
/lwOXx9ISMj0VAPlauTG4FP7wbHqeERi3AOc/O5b3pYTiPN1K3eluxRDttmZ
GNzKBaFB3hOdMBm7rR+2V+Vx4OjQxfXy8WI0Hhm0sAhRAG23JEPMF+Lq6qis
y9d70Gf7shfuKS2oH/5ZTU9vCjzzCPiG19eBXuWDI93X1fiLKoyj/1SJaZJ4
U9c1MhjmHBmYF1yBproGtyXfdQLLUBdn9KUa3LVBo5Nd1yBaYaK2FMfCa4vZ
e56VIoz7PJUaejgX2AcOKIIbc8C3//t0j7RC6Dc+0Wda3wwedKdHCT824K+V
A3fGrhXgvqZZ3mZjKSbznadHa24A19W1YMpeCIqd+VY1TiVw89E8vqbsLqok
cW26PZm4Ssk1dYQMqEthtmcuUkFPYf42E7EMo+5wK/ymbkPFiG12wWQKblae
qXezzMRJg4jyBI4YFs+2WBbR08A+1eVGkjgORwe2RX2aFwu+jr9mmnqmg0lH
4CZ5Rx04CC4HscceY8DNtHtj95sh38jui8csJR5uHmQWnlFCSobXHxKKCBWG
nXF2FmXA8B06/GPhL2ibe97EzpaN3RTK0D9OVYLXIRf9t99WwXTSDLuuV4Yy
Zo/2zvpciGctd1g6k4pOs9bhau80nObF8x7tFAO3Q8Wa88sEWvfEndq4aMx2
2KMyf/EzuD991u6VmwGU/6uaqv9+n0jPGeR8yA4TwevOolsZxbfx29/DeIIy
FZY6rwz6SaKCwBiDlfzzbWhV33gXbZ5ApE1HZ1kvD0+7bhoJOOaHo3PlQWtt
r6FD2VeUc6X1KCujFtp214PD4N5TuSfZGOHqCSWLxWjCXCQ+wtCAXt6I8zvm
D/HowgXBfc9lsIJm8/6xkgq4pBjOCJDE4M11hxMYEXKgd/rREiLlkE78TRB/
7/2XPyPir4v401v1V39c4o9F/A38D397ib9E4i+R+Gsl/gTEH5f4e9H0xp/w
bI0u7Bs5LipfHbP8eBMm2a/4fEsAD7Vmfu6nkoW447JZkLo0ED/rWTpHrZAB
q3O8dKWvEhXm59eM81swOksTle5RD+tnLvqazZUCpIi3B8YK0Dk0eGJQJcLh
C+9RE19wwXzhJQ9jehPmXLfYENjQjbSAjbW+R5uw2d9yYt+ZXBxu3vBUtqQN
FkuDGVLHFpAHa91eGXVBhE909+tkBfq/fyI346UAA8JjPrH7txy8LV6teCaR
4dnej4zWm5VgVlD5rU2idrhqvVyb51aPB6vLQhn2CAzWQi6rtwx1PrH7l7fx
8WTUjeH+Y1LMUhZXrt31BEukP2TSqmuQu/WtzoFDYpiyGhtmGlRCH82e6XNJ
it7LThrWTD7GOX+78Q/YjThkm2D21tnHQPGSnRaymThPu+NZ0loRBjOp8ZHX
NShacIEedlOI7i0BLrUPpTCarBe+QD8LmqrDtRuO16BN7W3b3fT7EF6qeZfa
ogI/vmOV/vMn2HyvqM2qnY8+iwI/tNlWh41mdv2cyTpcFTETM2YhA6sYl/sf
TOejKKleq5h/GjXhnp1cQTZsDNkRP+bXBcmJNZoCRg1EXrzQuvN3NVj7fzpV
tbkFd1ENvH/iIi5Ys7sPyzUo8ZheM/yvaoz4o9XAsUQK7j8cNTecyQb7wSOV
ygTEjBBuo2CwCPZQnT5Rpaph2SUNZ59bK24d0xet9S/Fv//DbDpJ4ZsMJXMs
maNJ8oV/vT9JN02xWCLRyFG/3XLiAkeAjL5aadQtEVBTZUPFBmLoc7b5ft25
ItTTSea7FNTC1CpnhqeRFgq/CB9in5Ng//51ksKXjyDrYN8Vnwd3kT/vbGtg
uRx3FLwq1De+il3H4zf2RMfDg+28fG8WgvpK3lXrK7fgnzQaa+m4FJo+zpk+
FqiEj1N/rt10QoUhOUEleV5t6Gq+N4iz5DcIJf5cib8jxN8B4s+P+LtG/CUS
f1bE32bir4f4iyD+ioi/e8TffeKvm/gTEH+7iT8d8ack/kIPvfH3H1zRulw=

                   "], "Processor" -> 
                  MachineLearning`MLProcessor["Standardize", 
                    Association[
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Mean" -> {0.6005034564894642, -1.0289952106540994`, 
                    553.6328238672897, 213.91950569982757`, 81195.38595816356,
                     2203.790905195023, 81661.71872864607, 0., 
                    0.5083586185290612, 0.6414498322094291, 276.8164119336449,
                     106.95975284991378`, 0.1065130063688495, 
                    0.5247830768944663, 80.31028921307265, 41.38058456178675, 
                    16411.52217618273, 409.1379652358299, 16660.566005308712`,
                     0., 0.0786635152383648, 0.07354687522592859, 
                    40.155144606536325`, 20.690292280893374`}, 
                    "StandardDeviation" -> {0.17909504674600157`, 
                    1.7394119521941984`, 100.10152442847547`, 
                    116.34056005105496`, 57862.368820519005`, 732.24915951163,
                     58370.94814282587, 1., 0.11356345537365015`, 
                    0.11378065021694322`, 50.050762214237736`, 
                    58.17028002552748, 0.08442411233940529, 
                    0.9909154765613413, 67.58388179713928, 35.26838656130087, 
                    14253.383647324345`, 320.64575578095804`, 
                    14536.692973103574`, 1., 0.05403586317436101, 
                    0.051107116689023444`, 33.79194089856964, 
                    17.634193280650436`}, "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]]]], 
                  "FinalDimension" -> 10, "Method" -> "Linear"], 
                "PerformanceGoal" -> Automatic, "Invertibility" -> 
                "Approximate", "Log" -> 
                Association[
                 "TrainingTime" -> 0.02090305215507625, "MaxTrainingMemory" -> 
                  176272, "DataMemory" -> 41080, "FunctionMemory" -> 26112, 
                  "LanguageVersion" -> {11.3, 0}, "Date" -> 
                  DateObject[{
                    2018, 12, 12, 16, 47, 6.0920298`8.537336991875048}, 
                    "Instant", "Gregorian", -6.], "ProcessorCount" -> 4, 
                  "ProcessorType" -> "x86-64", "OperatingSystem" -> "Windows",
                   "SystemWordLength" -> 64, "Evaluations" -> {}]]][#, 
               "ImputedVectors", PerformanceGoal -> "Quality"]& ), "Method" -> 
             "DimensionReduction", "VectorLength" -> 24, "Output" -> 
             Association[
              "(f1f2f3f4f5f6f7f8f9f10f11f12f13f14f15f16f17f18f19f20f21f22f23f2\
4)" -> Association["Type" -> "NumericalVector", "Weight" -> 24]], "Type" -> 
             "NumericalVector", "Version" -> {11.3, 0}, "ID" -> 
             4373461642116227297]], 
           MachineLearning`MLProcessor["Standardize", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
             Association[
              "(f1f2f3f4f5f6f7f8f9f10f11f12f13f14f15f16f17f18f19f20f21f22f23f2\
4)" -> Association["Type" -> "NumericalVector", "Weight" -> 24]], 
             "Mean" -> {0.6005034564894642, -1.0289952106540994`, 
              553.6328238672897, 213.91950569982757`, 81195.38595816356, 
              2203.790905195023, 81661.71872864607, 0., 0.5083586185290612, 
              0.6414498322094291, 276.8164119336449, 106.95975284991378`, 
              0.1065130063688495, 0.5247830768944663, 80.31028921307265, 
              41.38058456178675, 16411.52217618273, 409.1379652358299, 
              16660.566005308712`, 0., 0.0786635152383648, 
              0.07354687522592859, 40.155144606536325`, 20.690292280893374`}, 
             "StandardDeviation" -> {0.17909504674600157`, 
              1.7394119521941984`, 100.10152442847547`, 116.34056005105496`, 
              57862.368820519005`, 732.24915951163, 58370.94814282587, 1., 
              0.11356345537365015`, 0.11378065021694322`, 50.050762214237736`,
               58.17028002552748, 0.08442411233940529, 0.9909154765613413, 
              67.58388179713928, 35.26838656130087, 14253.383647324345`, 
              320.64575578095804`, 14536.692973103574`, 1., 
              0.05403586317436101, 0.051107116689023444`, 33.79194089856964, 
              17.634193280650436`}, "Output" -> 
             Association[
              "(f1f2f3f4f5f6f7f8f9f10f11f12f13f14f15f16f17f18f19f20f21f22f23f2\
4)" -> Association["Type" -> "NumericalVector", "Weight" -> 24]], 
             "Version" -> {11.3, 0}, "ID" -> 5179881809679212207]]}, 
         "Invertibility" -> "Perfect", "Missing" -> "Imputed"]]], "Output" -> 
    Association["Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
        Association[
        "Input" -> Association["f1" -> Association["Type" -> "Nominal"]], 
         "Output" -> 
         Association["f1" -> Association["Type" -> "Nominal", "Weight" -> 1]],
          "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
           Association["Processors" -> {
              MachineLearning`MLProcessor["List"], 
              MachineLearning`MLProcessor["WrapMLDataset", 
               Association[
               "FeatureTypes" -> {"Nominal"}, "FeatureKeys" -> {"f1"}, 
                "FeatureWeights" -> Automatic, "ExampleWeights" -> Automatic, 
                "RawExample" -> Missing["KeyAbsent", "RawExample"]]]}]], 
         "ScalarFeature" -> True, "Invertibility" -> "Perfect", "Missing" -> 
         "Allowed"]], "Processor" -> MachineLearning`MLProcessor["Sequence", 
        Association[
        "Input" -> Association[
          "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], "Output" -> 
         Association["f1" -> Association["Type" -> "Nominal", "Weight" -> 1]],
          "Processors" -> {
           MachineLearning`MLProcessor["ToVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
             Association[
              "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
             "Output" -> 
             Association[
              "f1" -> Association["Type" -> "NominalVector", "Weight" -> 1]], 
             "Version" -> {11.3, 0}, "ID" -> 6767158584607444865]], 
           MachineLearning`MLProcessor["IntegerEncodeNominalVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
             Association[
              "f1" -> Association["Type" -> "NominalVector", "Weight" -> 1]], 
             "Index" -> {
               Association[1 -> 1, 2 -> 2, 3 -> 3, 4 -> 4, 5 -> 5, 6 -> 6]}, 
             "MissingCode" -> 0, "Version" -> {11.3, 0}, "ID" -> 
             7928481863144082874, "Output" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NominalVector", "Weight" -> 1]]]], 
           MachineLearning`MLProcessor["FromVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
             Association[
              "f1" -> Association["Type" -> "NominalVector", "Weight" -> 1]], 
             "Output" -> 
             Association[
              "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
             "Version" -> {11.3, 0}, "ID" -> 3705929706759423433]], 
           MachineLearning`MLProcessor["FirstValues", 
            Association[
            "Info" -> Association[
              "Type" -> "Nominal", "Weight" -> 1, "SetSize" -> 6], "Key" -> 
             "f1", "Invertibility" -> "Perfect", "Missing" -> "Allowed"]]}, 
         "Invertibility" -> "Perfect", "Missing" -> "Allowed"]], 
      "ProbabilityPostprocessor" -> Identity, "Name" -> "class", "Marginal" -> 
      Association[
       1 -> 0.1691542288557214, 2 -> 0.16417910447761194`, 3 -> 
        0.1691542288557214, 4 -> 0.16417910447761194`, 5 -> 
        0.16417910447761194`, 6 -> 0.1691542288557214]], "Prior" -> Automatic,
     "Utility" -> 
    SparseArray[
     Automatic, {6, 7}, 0., {
      1, {{0, 1, 2, 3, 4, 5, 6}, {{2}, {3}, {4}, {5}, {6}, {7}}}, {1., 1., 1.,
        1., 1., 1.}}], "Threshold" -> 0, "TieBreaker" -> RandomChoice, 
    "PerformanceGoal" -> Automatic, "BatchProcessing" -> Automatic, "Model" -> 
    Association["LogProbabilitiesFunction" -> LinearLayer[
        Association[
        "Type" -> "Linear", "Arrays" -> 
         Association["Weights" -> CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBbCBOamKOsVEOSJIViCWA+GPSKztl
+eJ9f2Vv233US94n6L/HNqRGdJ/32gm2QGkG/q32thvmLrKDyR/NsrN9c9Ny
37qUiXa+R+Rsv6xr3/e+OHHfN+YN+0Dq7x2baLfX5/4emPwNlt59Knb/bNTL
/ttaFCXa3a1daDd1tZTdOv21diD1y8w8bVqXT7WDyW/0EdrzdXKlXauWqF2h
vLHdzHcOdn6R0Xua/zqC1TNtZbA7xBpgC5P/oDfPRnK/476WbxV2n7JrbOPn
X7B9Lu+yr+7vTLD7m7+626uonLCDyU9/dcj24b2pNiYZj20021bZxdc+2Mt3
fNM+qZ2eYPen+523m+deZweT55gqZGfzlGX/rBlH7BKneNiu2VVqZxawbd/c
mjCwezgNS+2n2262g8kf3sa695q+7z7jlRNstzLPtNUWkLE7/7ll75xCW7B7
Jv5bbqc90d8OJr+LsW/vzBui++tmse3b9nO77bXQTrukLWtt5ycWgc3Xbbtm
G3nAZB9Mnnl7gd3B1Dm2Ejcf2c47b2a3ukFob4Gww779AZxg9685FGB3ocFv
H0weABeh1b4=
            "], "Biases" -> 
           RawArray["Real32",{-0.3857329487800598, -0.3195812702178955, 
             0.04582393541932106, -0.1649743616580963, \
-0.12498795241117477`}]], "Parameters" -> 
         Association[
          "OutputDimensions" -> {5}, "$OutputSize" -> 5, "$InputSize" -> 24, 
           "$InputDimensions" -> {24}], "Inputs" -> 
         Association[
          "Input" -> NeuralNetworks`TensorT[{24}, NeuralNetworks`RealT]], 
         "Outputs" -> 
         Association[
          "Output" -> NeuralNetworks`TensorT[{5}, NeuralNetworks`RealT]]], 
        Association["Version" -> "11.3.5"]], "Processor" -> 
      MachineLearning`MLProcessor["FirstValues", 
        Association[
        "Info" -> Association["Weight" -> 24, "Type" -> "NumericalVector"], 
         "Key" -> 
         "(f1f2f3f4f5f6f7f8f9f10f11f12f13f14f15f16f17f18f19f20f21f22f23f24)", 
         "Invertibility" -> "Perfect", "Missing" -> "Allowed"]], "Method" -> 
      "LogisticRegression", "Options" -> 
      Association[
       "L1Regularization" -> 
        Association["Value" -> 0, "Options" -> Association[]], 
        "L2Regularization" -> 
        Association["Value" -> 10., "Options" -> Association[]], 
        "OptimizationMethod" -> 
        Association["Value" -> "LBFGS", "Options" -> Association[]], 
        MaxIterations -> 
        Association["Value" -> 30, "Options" -> Association[]]]], 
    "TrainingInformation" -> 
    Association[
     "LossName" -> "MeanCrossEntropy", "BestModelInformation" -> Dataset[
        Association[
        "MeanCrossEntropy" -> 
         PlusMinus[1.3957728537575962`, 0.15864500989911212`], "Accuracy" -> 
         PlusMinus[0.4291671308071718, 0.11228368937215859`], 
         "EvaluationTime" -> 0.000011493761088942124`, "TestSize" -> 39, 
         "TrainingSize" -> 156, "TrainingTime" -> 0.05196076314672079, 
         "TrainingMemory" -> 198000, "ModelMemory" -> 9984, "ExperimentCount" -> 
         1, "ModelUtility" -> 0.3025844956086005, "MeanCrossEntropyHistory" -> {
           PlusMinus[1.3957728537575962`, 0.11217896230106914`]}, 
         "AccuracyHistory" -> {
           PlusMinus[0.4291671308071718, 0.0793965581716972]}, 
         "Configuration" -> {
          "LogisticRegression", "L1Regularization" -> 0, "L2Regularization" -> 
           10., "OptimizationMethod" -> Automatic, MaxIterations -> 30}, 
         "FinalTrainingSize" -> 195], 
        TypeSystem`Struct[{
         "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
          "TrainingSize", "TrainingTime", "TrainingMemory", "ModelMemory", 
          "ExperimentCount", "ModelUtility", "MeanCrossEntropyHistory", 
          "AccuracyHistory", "Configuration", "FinalTrainingSize"}, {
         TypeSystem`AnyType, TypeSystem`AnyType, 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Real], 
          TypeSystem`Vector[TypeSystem`AnyType, 1], 
          TypeSystem`Vector[TypeSystem`AnyType, 1], 
          TypeSystem`Tuple[{
            TypeSystem`Atom[String], TypeSystem`AnyType, TypeSystem`AnyType, 
            TypeSystem`AnyType, TypeSystem`AnyType}], 
          TypeSystem`Atom[Integer]}], 
        Association["ID" -> 198831372099854]], "Configurations" -> Dataset[
        Association[
        Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 1.], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[2.1510241202155447`, 0.14543256421818104`], 
              "Accuracy" -> 
              PlusMinus[0.23006045480801587`, 0.04350999863487501], 
              "EvaluationTime" -> 9.485159158483313*^-6, "TestSize" -> 186, 
              "TrainingSize" -> 9, "TrainingTime" -> 0.052316489780056076`, 
              "TrainingMemory" -> 127200, "ModelMemory" -> 9984, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.19812752771180944`, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[2.1510241202155447`, 0.10283635236402386`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.23006045480801587`, 0.03076621508413754]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[1.8206655276785007`, 0.177227849155399], "Accuracy" -> 
              PlusMinus[0.3372445586186535, 0.053470980193192415`], 
              "EvaluationTime" -> 8.423882609282383*^-6, "TestSize" -> 155, 
              "TrainingSize" -> 40, "TrainingTime" -> 0.047673537536870654`, 
              "TrainingMemory" -> 140744, "ModelMemory" -> 9984, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.23271232573535192`, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[1.8206655276785007`, 0.12531901395288916`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.3372445586186535, 0.03780969269129792]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[1.4855372240179041`, 0.24116250796746205`], 
              "Accuracy" -> 
              PlusMinus[0.4291671308071718, 0.11228368937215859`], 
              "EvaluationTime" -> 0.000013642250833778782`, "TestSize" -> 39, 
              "TrainingSize" -> 156, "TrainingTime" -> 0.04990248360932991, 
              "TrainingMemory" -> 197984, "ModelMemory" -> 9984, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.2816198030629716, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[1.4855372240179041`, 0.1705276447517472]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.4291671308071718, 0.0793965581716972]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.000013642250833778782`, "MeanCrossEntropy" -> 
             PlusMinus[1.4855372240179041`, 0.24116250796746205`], 
             "ModelMemory" -> 9984, "TrainingMemory" -> 197984, 
             "TrainingTime" -> 0.11469459429171847`], "Index" -> 1], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 0.0001], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[7.110255574755362, 0.7317864552893206], "Accuracy" -> 
              PlusMinus[0.26190174096759844`, 0.04547710695478582], 
              "EvaluationTime" -> 6.442280302571271*^-6, "TestSize" -> 186, 
              "TrainingSize" -> 9, "TrainingTime" -> 0.03888832342747752, 
              "TrainingMemory" -> 126760, "ModelMemory" -> 9984, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.059523628884145814`,
               "MeanCrossEntropyHistory" -> {
                PlusMinus[7.110255574755362, 0.5174511649155449]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.26190174096759844`, 0.032157170716474955`]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[19.041290110199522`, 2.7146445610436176`], "Accuracy" -> 
              PlusMinus[0.35781607183153663`, 0.0543494710920695], 
              "EvaluationTime" -> 0.000018108031120740872`, "TestSize" -> 155,
               "TrainingSize" -> 40, "TrainingTime" -> 0.04423193376493461, 
              "TrainingMemory" -> 140504, "ModelMemory" -> 9984, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.022055509369429304`,
               "MeanCrossEntropyHistory" -> {
                PlusMinus[19.041290110199522`, 1.9195435776251204`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.35781607183153663`, 0.03843087956310458]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[1.695684781386357, 0.36996396318861635`], "Accuracy" -> 
              PlusMinus[0.35416713080717177`, 0.10817291888489088`], 
              "EvaluationTime" -> 0.000014564915141377345`, "TestSize" -> 39, 
              "TrainingSize" -> 156, "TrainingTime" -> 0.05377229588642245, 
              "TrainingMemory" -> 197984, "ModelMemory" -> 9984, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.2440783191312659, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[1.695684781386357, 0.26160402716532083`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.35416713080717177`, 0.07648980448424868]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.000014564915141377345`, "MeanCrossEntropy" -> 
             PlusMinus[1.695684781386357, 0.36996396318861635`], 
             "ModelMemory" -> 9984, "TrainingMemory" -> 197984, 
             "TrainingTime" -> 0.10610369328550559`], "Index" -> 2], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 1000.], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[1.7895214729121385`, 0.013699016038670858`], 
              "Accuracy" -> 
              PlusMinus[0.21382520433437455`, 0.04216592667971837], 
              "EvaluationTime" -> 9.634401173214694*^-6, "TestSize" -> 186, 
              "TrainingSize" -> 9, "TrainingTime" -> 0.017296436462185538`, 
              "TrainingMemory" -> 87336, "ModelMemory" -> 9984, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.24100276871288612`, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[1.7895214729121385`, 0.009686667136527438]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.21382520433437455`, 0.029815812690243623`]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[1.7766200966543801`, 0.015831569491861208`], 
              "Accuracy" -> 
              PlusMinus[0.33156601254177104`, 0.05327857466004598], 
              "EvaluationTime" -> 8.248108680820978*^-6, "TestSize" -> 155, 
              "TrainingSize" -> 40, "TrainingTime" -> 0.016650268285736906`, 
              "TrainingMemory" -> 106576, "ModelMemory" -> 9984, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.24269200384917325`, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[1.7766200966543801`, 0.011194610144521123`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.33156601254177104`, 0.037673641434072265`]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[1.7313612107364897`, 0.04686907554727639], "Accuracy" -> 
              PlusMinus[0.45416713080717175`, 0.11306948780287931`], 
              "EvaluationTime" -> 0.000013286366029419335`, "TestSize" -> 39, 
              "TrainingSize" -> 156, "TrainingTime" -> 0.02617520873236917, 
              "TrainingMemory" -> 175328, "ModelMemory" -> 9984, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.24813651808634138`, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[1.7313612107364897`, 0.03314144114742373]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.45416713080717175`, 0.07995220157070558]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.000013286366029419335`, "MeanCrossEntropy" -> 
             PlusMinus[1.7313612107364897`, 0.04686907554727639], 
             "ModelMemory" -> 9984, "TrainingMemory" -> 175328, 
             "TrainingTime" -> 0.050015447377647], "Index" -> 3], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 1.*^6], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[1.7917551911828256`, 0.006857900767800288], 
              "Accuracy" -> 
              PlusMinus[0.23159604358193256`, 0.02884485650460692], 
              "EvaluationTime" -> 8.134611049864769*^-6, "TestSize" -> 372, 
              "TrainingSize" -> 9, "TrainingTime" -> 0.03266927601405223, 
              "TrainingMemory" -> 102394.66666666666`, "ModelMemory" -> 9984.,
               "ExperimentCount" -> 2, "ModelUtility" -> 0.24088644336489484`,
               "MeanCrossEntropyHistory" -> {
                PlusMinus[1.7917560200805036`, 0.009698544810156794], 
                PlusMinus[1.79175436228809, 0.009698527598645095]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.21382520433437455`, 0.029815812690243623`], 
                PlusMinus[0.2517510331305111, 0.031752942057746265`]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[1.7917423586493975`, 0.01582311299785614], "Accuracy" -> 
              PlusMinus[0.32563169011797216`, 0.05306382374769227], 
              "EvaluationTime" -> 7.800382636626836*^-6, "TestSize" -> 155, 
              "TrainingSize" -> 40, "TrainingTime" -> 0.011796039097030094`, 
              "TrainingMemory" -> 92632, "ModelMemory" -> 9984, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.24064752942985623`, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[1.7917423586493975`, 0.011188630500265076`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.32563169011797216`, 0.03752178960768096]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[1.7916846616788074`, 0.045404624280128765`], 
              "Accuracy" -> 
              PlusMinus[0.45416713080717175`, 0.11306948780287931`], 
              "EvaluationTime" -> 0.000014143125743618004`, "TestSize" -> 39, 
              "TrainingSize" -> 156, "TrainingTime" -> 0.016507360765408565`, 
              "TrainingMemory" -> 150064, "ModelMemory" -> 9984, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.2398646059676498, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[1.7916846616788074`, 0.03210591772570641]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.45416713080717175`, 0.07995220157070558]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.000014143125743618004`, "MeanCrossEntropy" -> 
             PlusMinus[1.7916846616788074`, 0.045404624280128765`], 
             "ModelMemory" -> 9984, "TrainingMemory" -> 150064, 
             "TrainingTime" -> 0.05330347697081293], "Index" -> 4], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 0.001], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[5.690779315059238, 0.5764581404299387], "Accuracy" -> 
              PlusMinus[0.2623776506222561, 0.04552558804998169], 
              "EvaluationTime" -> 7.315622462851203*^-6, "TestSize" -> 186, 
              "TrainingSize" -> 9, "TrainingTime" -> 0.04388751635982674, 
              "TrainingMemory" -> 126992, "ModelMemory" -> 9984, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.07439453203948715, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[5.690779315059238, 0.4076174601681967]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.2623776506222561, 0.0321914520276473]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[11.864252355955438`, 1.703102969643298], "Accuracy" -> 
              PlusMinus[0.3301963930042503, 0.05313504752485854], 
              "EvaluationTime" -> 8.20499432100969*^-6, "TestSize" -> 155, 
              "TrainingSize" -> 40, "TrainingTime" -> 0.04365670529282162, 
              "TrainingMemory" -> 140784, "ModelMemory" -> 9984, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.03539077647041786, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[11.864252355955438`, 1.2042756588937227`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.3301963930042503, 0.03757215242349695]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[1.6938774417356142`, 0.36899905567160346`], 
              "Accuracy" -> 
              PlusMinus[0.35416713080717177`, 0.10817291888489088`], 
              "EvaluationTime" -> 0.000026071857148999447`, "TestSize" -> 39, 
              "TrainingSize" -> 156, "TrainingTime" -> 0.053280344458529576`, 
              "TrainingMemory" -> 198288, "ModelMemory" -> 9984, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.24435451777212422`, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[1.6938774417356142`, 0.26092173451682316`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.35416713080717177`, 0.07648980448424868]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.000026071857148999447`, "MeanCrossEntropy" -> 
             PlusMinus[1.6938774417356142`, 0.36899905567160346`], 
             "ModelMemory" -> 9984, "TrainingMemory" -> 198288, 
             "TrainingTime" -> 0.11048794693298872`], "Index" -> 5], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 10000.], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[1.7915315649448402`, 0.013712675086729008`], 
              "Accuracy" -> 
              PlusMinus[0.21382520433437455`, 0.04216592667971837], 
              "EvaluationTime" -> 7.1000506637947645`*^-6, "TestSize" -> 186, 
              "TrainingSize" -> 9, "TrainingTime" -> 0.012916166747373432`, 
              "TrainingMemory" -> 81848, "ModelMemory" -> 9984, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.2407324114557358, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[1.7915315649448402`, 0.00969632554203391]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.21382520433437455`, 0.029815812690243623`]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[1.7901851139892397`, 0.01579949704379081], "Accuracy" -> 
              PlusMinus[0.32563169011797216`, 0.05306382374769227], 
              "EvaluationTime" -> 9.067281517235447*^-6, "TestSize" -> 155, 
              "TrainingSize" -> 40, "TrainingTime" -> 0.012948038208741621`, 
              "TrainingMemory" -> 97952, "ModelMemory" -> 9984, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.24085712833823836`, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[1.7901851139892397`, 0.011171931499001291`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.32563169011797216`, 0.03752178960768096]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[1.784690252791736, 0.04512037343525258], "Accuracy" -> 
              PlusMinus[0.45416713080717175`, 0.11306948780287931`], 
              "EvaluationTime" -> 0.00001687157591037376, "TestSize" -> 39, 
              "TrainingSize" -> 156, "TrainingTime" -> 0.018819069826259412`, 
              "TrainingMemory" -> 161328, "ModelMemory" -> 9984, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.24080753554713605`, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[1.784690252791736, 0.03190492202573646]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.45416713080717175`, 0.07995220157070558]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.00001687157591037376, "MeanCrossEntropy" -> 
             PlusMinus[1.784690252791736, 0.04512037343525258], "ModelMemory" -> 
             9984, "TrainingMemory" -> 161328, "TrainingTime" -> 
             0.0364400040301977], "Index" -> 6], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 0.1], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[3.133163148135868, 0.28194523842743424`], "Accuracy" -> 
              PlusMinus[0.2517510331305111, 0.044905441303311824`], 
              "EvaluationTime" -> 7.937464190898624*^-6, "TestSize" -> 186, 
              "TrainingSize" -> 9, "TrainingTime" -> 0.06300628073411285, 
              "TrainingMemory" -> 175224, "ModelMemory" -> 9984, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.13542337733197807`, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[3.133163148135868, 0.19936539001529668`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.2517510331305111, 0.031752942057746265`]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[3.328219937647792, 0.44880935027898883`], "Accuracy" -> 
              PlusMinus[0.34823384710422284`, 0.053711105294794184`], 
              "EvaluationTime" -> 8.927988970152825*^-6, "TestSize" -> 155, 
              "TrainingSize" -> 40, "TrainingTime" -> 0.04407617484889329, 
              "TrainingMemory" -> 140568, "ModelMemory" -> 9984, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.12637279962502526`, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[3.328219937647792, 0.3173561350422015]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.34823384710422284`, 0.03797948677897364]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[1.6041666218507864`, 0.3212542166507609], "Accuracy" -> 
              PlusMinus[0.37916713080717174`, 0.1098451753745209], 
              "EvaluationTime" -> 0.000016186168139014824`, "TestSize" -> 39, 
              "TrainingSize" -> 156, "TrainingTime" -> 0.12397638633146114`, 
              "TrainingMemory" -> 249960, "ModelMemory" -> 9984, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.2588919955503861, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[1.6041666218507864`, 0.2271610350785253]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.37916713080717174`, 0.07767226838794929]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.000016186168139014824`, "MeanCrossEntropy" -> 
             PlusMinus[1.6041666218507864`, 0.3212542166507609], 
             "ModelMemory" -> 9984, "TrainingMemory" -> 249960, 
             "TrainingTime" -> 0.21797676364843926`], "Index" -> 7], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 0.00001], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[8.594414554767324, 0.8925367634084652], "Accuracy" -> 
              PlusMinus[0.26190174096759844`, 0.04547710695478582], 
              "EvaluationTime" -> 8.078414982589371*^-6, "TestSize" -> 186, 
              "TrainingSize" -> 9, "TrainingTime" -> 0.04506059176050756, 
              "TrainingMemory" -> 126888, "ModelMemory" -> 9984, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.04923558365510078, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[8.594414554767324, 0.6311187978644189]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.26190174096759844`, 0.032157170716474955`]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[26.682964649861596`, 3.879120030581823], "Accuracy" -> 
              PlusMinus[0.36936417585705406`, 0.05460168333620772], 
              "EvaluationTime" -> 7.140401282592507*^-6, "TestSize" -> 155, 
              "TrainingSize" -> 40, "TrainingTime" -> 0.11641513914977222`, 
              "TrainingMemory" -> 221312, "ModelMemory" -> 9984, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.015730480185803884`,
               "MeanCrossEntropyHistory" -> {
                PlusMinus[26.682964649861596`, 2.7429520786609745`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.36936417585705406`, 0.03860922055123299]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[1.69586683771947, 0.37006103514725985`], "Accuracy" -> 
              PlusMinus[0.35416713080717177`, 0.10817291888489088`], 
              "EvaluationTime" -> 0.000016792490398293884`, "TestSize" -> 39, 
              "TrainingSize" -> 156, "TrainingTime" -> 0.05638986816524222, 
              "TrainingMemory" -> 198224, "ModelMemory" -> 9984, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.24405053440880245`, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[1.69586683771947, 0.26167266740554074`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.35416713080717177`, 0.07648980448424868]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.000016792490398293884`, "MeanCrossEntropy" -> 
             PlusMinus[1.69586683771947, 0.37006103514725985`], "ModelMemory" -> 
             9984, "TrainingMemory" -> 198224, "TrainingTime" -> 
             0.11554792696706033`], "Index" -> 8], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 0.01], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[7.005199308268773, 0.9928358369439824], "Accuracy" -> 
              PlusMinus[0.3372445586186535, 0.053470980193192415`], 
              "EvaluationTime" -> 9.564754899673383*^-6, "TestSize" -> 155, 
              "TrainingSize" -> 40, "TrainingTime" -> 0.045648157572505, 
              "TrainingMemory" -> 140680, "ModelMemory" -> 9984, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.05996029039689749, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[7.005199308268773, 0.7020409529081113]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.3372445586186535, 0.03780969269129792]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[4.348294872089583, 0.42591745564386424`], "Accuracy" -> 
              PlusMinus[0.2516102697466578, 0.04488984458423026], 
              "EvaluationTime" -> 7.06964951264578*^-6, "TestSize" -> 186, 
              "TrainingSize" -> 9, "TrainingTime" -> 0.04809300709294232, 
              "TrainingMemory" -> 127016, "ModelMemory" -> 9984, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.09742687242890793, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[4.348294872089583, 0.30116912111149696`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.2516102697466578, 0.03174191351191943]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[1.6772811488200103`, 0.35987409959442285`], 
              "Accuracy" -> 
              PlusMinus[0.3291671308071718, 0.10618049824282755`], 
              "EvaluationTime" -> 0.000019573664239769556`, "TestSize" -> 39, 
              "TrainingSize" -> 156, "TrainingTime" -> 0.05662993223716069, 
              "TrainingMemory" -> 203880, "ModelMemory" -> 9984, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.24692779857713856`, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[1.6772811488200103`, 0.25446941619661934`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.3291671308071718, 0.07508095033726965]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.000019573664239769556`, "MeanCrossEntropy" -> 
             PlusMinus[1.6772811488200103`, 0.35987409959442285`], 
             "ModelMemory" -> 9984, "TrainingMemory" -> 203880, 
             "TrainingTime" -> 0.11643557286895587`], "Index" -> 9], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 1.*^-6], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[10.108696024089651`, 1.0587675711167688`], "Accuracy" -> 
              PlusMinus[0.2623776506222561, 0.04552558804998169], 
              "EvaluationTime" -> 7.578177859137891*^-6, "TestSize" -> 186, 
              "TrainingSize" -> 9, "TrainingTime" -> 0.05114804088183193, 
              "TrainingMemory" -> 127104, "ModelMemory" -> 9984, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.04185282134139965, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[10.108696024089651`, 0.7486617292370773]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.2623776506222561, 0.0321914520276473]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[36.73026632154669, 5.3483481806961715`], "Accuracy" -> 
              PlusMinus[0.3498080634570328, 0.05391961482144186], 
              "EvaluationTime" -> 0.00001253964572665224, "TestSize" -> 155, 
              "TrainingSize" -> 40, "TrainingTime" -> 0.04155524506583513, 
              "TrainingMemory" -> 140672, "ModelMemory" -> 9984, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.011427001596786081`,
               "MeanCrossEntropyHistory" -> {
                PlusMinus[36.73026632154669, 3.781853266716997]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.3498080634570328, 0.03812692527920821]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.00001253964572665224, "MeanCrossEntropy" -> 
             PlusMinus[36.73026632154669, 5.3483481806961715`], "ModelMemory" -> 
             9984, "TrainingMemory" -> 140672, "TrainingTime" -> 
             0.13218076876021043`], "Index" -> 10], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 100000.], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[1.791600236765211, 0.01582072770240971], "Accuracy" -> P\
lusMinus[0.32563169011797216`, 0.05306382374769227], "EvaluationTime" -> 
              9.518324050645842*^-6, "TestSize" -> 155, "TrainingSize" -> 40, 
              "TrainingTime" -> 0.014519506876524818`, "TrainingMemory" -> 
              95120, "ModelMemory" -> 9984, "ExperimentCount" -> 1, 
              "ModelUtility" -> 0.24066664912138197`, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[1.791600236765211, 0.011186943841679772`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.32563169011797216`, 0.03752178960768096]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[1.791037713025919, 0.04537333154185529], "Accuracy" -> 
              PlusMinus[0.45416713080717175`, 0.11306948780287931`], 
              "EvaluationTime" -> 0.00001236370172182077, "TestSize" -> 39, 
              "TrainingSize" -> 156, "TrainingTime" -> 0.015445321423687899`, 
              "TrainingMemory" -> 155736, "ModelMemory" -> 9984, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.23995164612035172`, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[1.791037713025919, 0.03208379041827134]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.45416713080717175`, 0.07995220157070558]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.00001236370172182077, "MeanCrossEntropy" -> 
             PlusMinus[1.791037713025919, 0.04537333154185529], "ModelMemory" -> 
             9984, "TrainingMemory" -> 155736, "TrainingTime" -> 
             0.03382615865613469], "Index" -> 11], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 100.], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[1.6825585308799091`, 0.025307118778655678`], 
              "Accuracy" -> 
              PlusMinus[0.3266225232683773, 0.05318277644213755], 
              "EvaluationTime" -> 7.253161915945106*^-6, "TestSize" -> 155, 
              "TrainingSize" -> 40, "TrainingTime" -> 0.02805305467394981, 
              "TrainingMemory" -> 134776, "ModelMemory" -> 9984, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.25594620971614934`, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[1.6825585308799091`, 0.017894835300680846`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.3266225232683773, 0.037605901864563626`]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[1.5312670688626262`, 0.08914861367389931], "Accuracy" -> 
              PlusMinus[0.4791671308071717, 0.11357504675318231`], 
              "EvaluationTime" -> 0.000012983204899779809`, "TestSize" -> 39, 
              "TrainingSize" -> 156, "TrainingTime" -> 0.05253033700472006, 
              "TrainingMemory" -> 198216, "ModelMemory" -> 9984, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.2788334019528163, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[1.5312670688626262`, 0.06303758926219398]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.4791671308071717, 0.08030968573275438]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.000012983204899779809`, "MeanCrossEntropy" -> 
             PlusMinus[1.5312670688626262`, 0.08914861367389931], 
             "ModelMemory" -> 9984, "TrainingMemory" -> 198216, 
             "TrainingTime" -> 0.09371597592984988], "Index" -> 12], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 10.], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[1.5236098080934002`, 0.07083824386375985], "Accuracy" -> 
              PlusMinus[0.3353657993699107, 0.05323758291068194], 
              "EvaluationTime" -> 8.904773545639054*^-6, "TestSize" -> 155, 
              "TrainingSize" -> 40, "TrainingTime" -> 0.11645677767188228`, 
              "TrainingMemory" -> 209488, "ModelMemory" -> 9984, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.2808858513228491, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[1.5236098080934002`, 0.050090202603410926`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.3353657993699107, 0.03764465589012425]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[1.3957728537575962`, 0.15864500989911212`], 
              "Accuracy" -> 
              PlusMinus[0.4291671308071718, 0.11228368937215859`], 
              "EvaluationTime" -> 0.000011493761088942124`, "TestSize" -> 39, 
              "TrainingSize" -> 156, "TrainingTime" -> 0.05196076314672079, 
              "TrainingMemory" -> 198000, "ModelMemory" -> 9984, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.3025844956086005, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[1.3957728537575962`, 0.11217896230106914`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.4291671308071718, 0.0793965581716972]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.000011493761088942124`, "MeanCrossEntropy" -> 
             PlusMinus[1.3957728537575962`, 0.15864500989911212`], 
             "ModelMemory" -> 9984, "TrainingMemory" -> 198000, 
             "TrainingTime" -> 0.18140773160528328`], "Index" -> 13]], 
        TypeSystem`Assoc[
         TypeSystem`Struct[{"Value", "Options"}, {
           TypeSystem`Atom[
            TypeSystem`Enumeration["LogisticRegression"]], 
           TypeSystem`Assoc[TypeSystem`AnyType, 
            TypeSystem`Struct[{"Value"}, {TypeSystem`AnyType}], 4]}], 
         TypeSystem`Struct[{"Experiments", "PredictedPerformances", "Index"}, {
           TypeSystem`Vector[
            
            TypeSystem`Struct[{
             "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
              "TrainingSize", "TrainingTime", "TrainingMemory", "ModelMemory",
               "ExperimentCount", "ModelUtility", "MeanCrossEntropyHistory", 
              "AccuracyHistory"}, {TypeSystem`AnyType, TypeSystem`AnyType, 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Vector[TypeSystem`AnyType, TypeSystem`AnyLength], 
              TypeSystem`Vector[TypeSystem`AnyType, TypeSystem`AnyLength]}], 
            TypeSystem`AnyLength], 
           
           TypeSystem`Struct[{
            "EvaluationTime", "MeanCrossEntropy", "ModelMemory", 
             "TrainingMemory", "TrainingTime"}, {
             TypeSystem`Atom[Real], TypeSystem`AnyType, 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Real]}], 
           TypeSystem`Atom[Integer]}], 13], 
        Association["ID" -> 198827077132558]], "MaxTrainingSize" -> 195, 
      "LastReportingTime" -> 3.7536220294843176`17.32702552841663*^9, 
      "PreprocessorEvaluationTime" -> 7.2487393905303`2.*^-6, 
      "PreprocessorMemory" -> 74296, "RoundPartitioning" -> Dataset[{
         Association[
         "TrainingSizes" -> 9, "TimeBudgets" -> 0.6400000000000001, 
          "ElapsedTimes" -> 0.6899344000000001, "ExperimentCounts" -> 11], 
         Association[
         "TrainingSizes" -> 40, "TimeBudgets" -> 0.8000000000000002, 
          "ElapsedTimes" -> 1.1847641, "ExperimentCounts" -> 13], 
         Association[
         "TrainingSizes" -> 156, "TimeBudgets" -> 1., "ElapsedTimes" -> 
          1.0534691, "ExperimentCounts" -> 12]}, 
        TypeSystem`Vector[
         TypeSystem`Struct[{
          "TrainingSizes", "TimeBudgets", "ElapsedTimes", 
           "ExperimentCounts"}, {
           TypeSystem`Atom[Integer], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Integer]}], 3], 
        Association[
        "Origin" -> HoldComplete[GeneralUtilities`AssociationTranspose, 
           Dataset`DatasetHandle[198835667067150]], "ID" -> 
         198839962034446]]], "Log" -> 
    Association["Example" -> MachineLearning`MLDataset[
        Association[
        "f1" -> Association[
          "Type" -> "Numerical", "Weight" -> 1, 
           "Values" -> {0.6208730258260121}, "ID" -> 4906853121616522550], 
         "f2" -> Association[
          "Type" -> "Numerical", "Weight" -> 1, 
           "Values" -> {-1.488499703998056}, "ID" -> 1505955963859671825], 
         "f3" -> Association[
          "Type" -> "Numerical", "Weight" -> 1, 
           "Values" -> {381.603929318958}, "ID" -> 2000532641156357650], "f4" -> 
         Association[
          "Type" -> "Numerical", "Weight" -> 1, 
           "Values" -> {138.13276957637694`}, "ID" -> 33992757022668759], 
         "f5" -> Association[
          "Type" -> "Numerical", "Weight" -> 1, "Values" -> {30887.5}, "ID" -> 
           6302089335145445899], "f6" -> 
         Association[
          "Type" -> "Numerical", "Weight" -> 1, 
           "Values" -> {1477.142857142857}, "ID" -> 6938766503936481262], 
         "f7" -> Association[
          "Type" -> "Numerical", "Weight" -> 1, 
           "Values" -> {30887.571428571428`}, "ID" -> 1305542923468062008], 
         "f8" -> Association[
          "Type" -> "Numerical", "Weight" -> 1, "Values" -> {0.}, "ID" -> 
           3803083320859837706], "f9" -> 
         Association[
          "Type" -> "Numerical", "Weight" -> 1, 
           "Values" -> {0.4742817283995346}, "ID" -> 1312416095308884042], 
         "f10" -> Association[
          "Type" -> "Numerical", "Weight" -> 1, 
           "Values" -> {0.5506399336506692}, "ID" -> 4544903508755472361], 
         "f11" -> Association[
          "Type" -> "Numerical", "Weight" -> 1, 
           "Values" -> {190.801964659479}, "ID" -> 878077783492811101], "f12" -> 
         Association[
          "Type" -> "Numerical", "Weight" -> 1, 
           "Values" -> {69.06638478818847}, "ID" -> 7360672343732899654], 
         "f13" -> Association[
          "Type" -> "Numerical", "Weight" -> 1, 
           "Values" -> {0.14748808062354532`}, "ID" -> 216836570317038849], 
         "f14" -> Association[
          "Type" -> "Numerical", "Weight" -> 1, 
           "Values" -> {0.25014628062697}, "ID" -> 9007254654834696839], 
         "f15" -> Association[
          "Type" -> "Numerical", "Weight" -> 1, 
           "Values" -> {103.1022070580539}, "ID" -> 1683652851488472226], 
         "f16" -> Association[
          "Type" -> "Numerical", "Weight" -> 1, 
           "Values" -> {42.30840393038903}, "ID" -> 1007290415499947489], 
         "f17" -> Association[
          "Type" -> "Numerical", "Weight" -> 1, 
           "Values" -> {9553.780038332123}, "ID" -> 3203665518612036469], 
         "f18" -> Association[
          "Type" -> "Numerical", "Weight" -> 1, 
           "Values" -> {368.7182431846068}, "ID" -> 7563431320350652426], 
         "f19" -> Association[
          "Type" -> "Numerical", "Weight" -> 1, 
           "Values" -> {9552.900900723696}, "ID" -> 6122630064182041474], 
         "f20" -> Association[
          "Type" -> "Numerical", "Weight" -> 1, "Values" -> {0.}, "ID" -> 
           8907160555107778816], "f21" -> 
         Association[
          "Type" -> "Numerical", "Weight" -> 1, 
           "Values" -> {0.05446485778923188}, "ID" -> 944679981265418559], 
         "f22" -> Association[
          "Type" -> "Numerical", "Weight" -> 1, 
           "Values" -> {0.11509275260334788`}, "ID" -> 6967615652117865474], 
         "f23" -> Association[
          "Type" -> "Numerical", "Weight" -> 1, 
           "Values" -> {51.55110352902695}, "ID" -> 2439262272950290399], 
         "f24" -> Association[
          "Type" -> "Numerical", "Weight" -> 1, 
           "Values" -> {21.154201965194513`}, "ID" -> 4535222039256346540]], 
        Association[
        "ExampleNumber" -> 1, "ExampleWeights" -> 1, "RawExample" -> False]], 
      "TrainingTime" -> 3.6945238660699506`, "MaxTrainingMemory" -> 896944, 
      "DataMemory" -> 83928, "FunctionMemory" -> 328120, 
      "LanguageVersion" -> {11.3, 0}, "Date" -> 
      DateObject[{2018, 12, 12, 16, 47, 9.7166549`8.740091743066303}, 
        "Instant", "Gregorian", -6.], "ProcessorCount" -> 4, "ProcessorType" -> 
      "x86-64", "OperatingSystem" -> "Windows", "SystemWordLength" -> 64, 
      "Evaluations" -> {}]]],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{{3.7536291942673492`*^9, 3.753629217355632*^9}, 
   3.75363126103927*^9, 3.753643629820376*^9},
 CellLabel->"Out[57]=",ExpressionUUID->"bb73dc85-e966-4566-aa59-264a780f897c"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Segmentation Based Feature Classification Accuracy: 61.90%", \
"Subsubsection",
 CellChangeTimes->{{3.7536403442854548`*^9, 
  3.753640364182234*^9}},ExpressionUUID->"9a720563-e5c0-42ae-9a23-\
85272c375207"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"labelTestSeg", " ", "=", " ", 
   RowBox[{"ConstantArray", "[", 
    RowBox[{"0", ",", 
     RowBox[{"Length", "[", "testFiles", "]"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"correctLabelsSeg", " ", "=", " ", "0"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"For", "[", 
  RowBox[{
   RowBox[{"i", "=", "1"}], ",", 
   RowBox[{"i", "\[LessEqual]", 
    RowBox[{"Length", "[", "testFiles", "]"}]}], ",", 
   RowBox[{"i", "++"}], ",", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"labelTestSeg", "[", 
      RowBox[{"[", "i", "]"}], "]"}], " ", "=", " ", 
     RowBox[{"cSeg", "[", 
      RowBox[{"featMatrixTestingSeg", "[", 
       RowBox[{"[", "i", "]"}], "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
    " ", 
    RowBox[{"If", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"labelTestSeg", "[", 
        RowBox[{"[", "i", "]"}], "]"}], " ", "\[Equal]", " ", 
       RowBox[{"classTest", "[", 
        RowBox[{"[", "i", "]"}], "]"}]}], ",", 
      RowBox[{"correctLabelsSeg", " ", "=", " ", 
       RowBox[{"correctLabelsSeg", "+", "1"}]}], ",", 
      RowBox[{"correctLabelsSeg", " ", "=", " ", "correctLabelsSeg"}]}], 
     "]"}], ";"}]}], "]"}], "\[IndentingNewLine]", 
 RowBox[{"N", "[", 
  RowBox[{"correctLabelsSeg", "/", 
   RowBox[{"Length", "[", "classTest", "]"}]}], "]"}]}], "Input",
 CellChangeTimes->{{3.753046763482067*^9, 3.7530468308170385`*^9}, 
   3.7530469863816957`*^9, {3.753074062666206*^9, 3.753074077406763*^9}, {
   3.7531163219649696`*^9, 3.7531163290041947`*^9}, {3.7531185584760475`*^9, 
   3.7531185608766174`*^9}, {3.753118647010393*^9, 3.7531186493112297`*^9}, 
   3.7536433684032044`*^9},
 CellLabel->"In[62]:=",ExpressionUUID->"ecde42d1-3045-471c-a151-4767dd683acc"],

Cell[BoxData["0.6190476190476191`"], "Output",
 CellChangeTimes->{{3.7531166147742834`*^9, 3.753116679309779*^9}, {
   3.7531170151282816`*^9, 3.753117066450099*^9}, {3.7531185753609023`*^9, 
   3.7531186601572385`*^9}, {3.75312977030439*^9, 3.7531297932359962`*^9}, {
   3.7531312022546573`*^9, 3.753131224588956*^9}, {3.7531324291141624`*^9, 
   3.7531324376745577`*^9}, {3.7531330943537216`*^9, 3.7531331151959047`*^9}, 
   3.753137026334787*^9, {3.753629219846974*^9, 3.7536292236855593`*^9}, 
   3.753631263943055*^9, {3.753643629991926*^9, 3.7536436301634655`*^9}},
 CellLabel->"Out[65]=",ExpressionUUID->"0060bcc9-881b-4d8e-8a81-8cb2ea743f22"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ClassifierInformation", "[", "cSeg", "]"}]], "Input",
 CellChangeTimes->{{3.7536292313298645`*^9, 3.753629248228651*^9}},
 CellLabel->"In[66]:=",ExpressionUUID->"6533057f-7d66-4a78-8604-840ae2b62c90"],

Cell[BoxData[
 TagBox[
  StyleBox[
   FrameBox[GridBox[{
      {
       ItemBox[
        FrameBox[
         StyleBox["\<\"Classifier information\"\>", "SuggestionsBarText",
          StripOnInput->False,
          FontSize->12,
          FontWeight->Bold],
         FrameMargins->{{10, 5}, {-5, 5}},
         FrameStyle->None,
         StripOnInput->False],
        Alignment->{Left, Bottom},
        Background->RGBColor[0.93119, 0.93119, 0.93119],
        Frame->{{False, False}, {True, False}},
        FrameStyle->Opacity[0.1],
        ItemSize->{Automatic, 1},
        StripOnInput->False]},
      {
       ItemBox[
        TagBox[
         FrameBox[
          TagBox[GridBox[{
             {
              
              TemplateBox[{
               TemplateBox[{5}, "Spacer1"],StyleBox["\"Input type\"", 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], 
              TagBox[
               TooltipBox[
                TemplateBox[{"\"Mixed\"",StyleBox[
                   
                   TemplateBox[{"\" (number: \"", "24", "\")\""}, 
                    "RowDefault"], 
                   GrayLevel[0.5], StripOnInput -> False]},
                 "RowDefault"],
                TagBox[
                 RowBox[{"{", 
                   
                   RowBox[{
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\""}], "}"}], 
                 Short[#, 10]& ]],
               Annotation[#, 
                
                Short[{"Numerical", "Numerical", "Numerical", "Numerical", 
                  "Numerical", "Numerical", "Numerical", "Numerical", 
                  "Numerical", "Numerical", "Numerical", "Numerical", 
                  "Numerical", "Numerical", "Numerical", "Numerical", 
                  "Numerical", "Numerical", "Numerical", "Numerical", 
                  "Numerical", "Numerical", "Numerical", "Numerical"}, 10], 
                "Tooltip"]& ]},
             {
              
              TemplateBox[{
               TemplateBox[{5}, "Spacer1"],StyleBox["\"Number of classes\"", 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], 
              TagBox[
               TooltipBox["6",
                TagBox[
                 RowBox[{"{", 
                   
                   RowBox[{
                    "1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6"}], 
                   "}"}], Short[#, 1]& ]],
               Annotation[#, 
                Short[{1, 2, 3, 4, 5, 6}, 1], "Tooltip"]& ]},
             {
              TemplateBox[{TemplateBox[{5}, "Spacer1"],StyleBox["\"Method\"", 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], 
              TagBox[
               TooltipBox["\<\"LogisticRegression\"\>",
                TemplateBox[{
                  TagBox[
                   
                   DynamicModuleBox[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$ = 
                    Data`UnorderedAssociation[
                    "RowCount" -> 20, "Length" -> 3, "InitialType" -> 
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], 
                    TypeSystem`Atom[String]}], "Shape" -> 
                    TypeSystem`PackageScope`DocumentShape[
                    
                    Association[{"L1Regularization"} -> 
                    TypeSystem`PackageScope`AtomShape[34], {
                    "L2Regularization"} -> 
                    TypeSystem`PackageScope`AtomShape[60], {
                    "OptimizationMethod"} -> 
                    TypeSystem`PackageScope`AtomShape[48.00000000000001]], 1],
                     "InitialData" -> 
                    TypeSystem`PackageScope`CacheHandle[1119589258], "Type" -> 
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], 
                    TypeSystem`Atom[String]}], "HandleQ" -> True, "RowTarget" -> 
                    20, "Data" -> 
                    TypeSystem`PackageScope`CacheHandle[1119589258]], 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$ = 1, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
                    DynamicModule[{
                    TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
                    Style[
                    Grid[{{
                    Item[
                    Annotation[
                    EventHandler[
                    MouseAppearance[
                    Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"L1Regularization\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"L1Regularization\"", FontColor -> 
                    RGBColor[0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 859967475][{
                    Key["L1Regularization"]}]], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    859967475][
                    GeneralUtilities`Slice[
                    Key["L1Regularization"]]], "Mouse"], Background -> 
                    GrayLevel[0.95], Alignment -> {Left, Baseline}], 
                    Pane[
                    Annotation[
                    RawBoxes["0"], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    859967475][
                    GeneralUtilities`Slice[
                    Key["L1Regularization"]]], "Mouse"], 
                    ImageSize -> {{34, Full}, Automatic}, 
                    Alignment -> {Left, Baseline}]}, {
                    Item[
                    Annotation[
                    EventHandler[
                    MouseAppearance[
                    Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"L2Regularization\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"L2Regularization\"", FontColor -> 
                    RGBColor[0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 859967475][{
                    Key["L2Regularization"]}]], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    859967475][
                    GeneralUtilities`Slice[
                    Key["L2Regularization"]]], "Mouse"], Background -> 
                    GrayLevel[0.95], Alignment -> {Left, Baseline}], 
                    Pane[
                    Annotation[
                    RawBoxes["10."], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    859967475][
                    GeneralUtilities`Slice[
                    Key["L2Regularization"]]], "Mouse"], 
                    ImageSize -> {{60, Full}, Automatic}, 
                    Alignment -> {Left, Baseline}]}, {
                    Item[
                    Annotation[
                    EventHandler[
                    MouseAppearance[
                    Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"OptimizationMethod\"", FontColor -> 
                    GrayLevel[0.4]]], {{20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"OptimizationMethod\"", FontColor -> 
                    RGBColor[0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 859967475][{
                    Key["OptimizationMethod"]}]], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    859967475][
                    GeneralUtilities`Slice[
                    Key["OptimizationMethod"]]], "Mouse"], Background -> 
                    GrayLevel[0.95], Alignment -> {Left, Baseline}], 
                    Pane[
                    Annotation["LBFGS", 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    859967475][
                    GeneralUtilities`Slice[
                    Key["OptimizationMethod"]]], "Mouse"], 
                    ImageSize -> {{48.00000000000001, Full}, Automatic}, 
                    Alignment -> {Left, Baseline}]}}, 
                    BaseStyle -> {ContextMenu -> {
                    MenuItem["Copy position to clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], 
                    MenuItem["Copy data to clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], Delimiter, 
                    MenuItem["Paste position in new cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], 
                    MenuItem["Paste data in new cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic]}, FontFamily -> "Verdana", 
                    FontSize -> 12}, Alignment -> Left, RowMinHeight -> 1.5, 
                    Dividers -> All, FrameStyle -> GrayLevel[0.85], 
                    BaseStyle -> {FontFamily -> "Verdana", FontSize -> 12}], 
                    LineBreakWithin -> False, ContextMenu -> {}, NumberMarks -> 
                    False, ShowAutoStyles -> False]], 
                    TypeSystem`NestedGrid`PackagePrivate`initialQ = True, 
                    TypeSystem`NestedGrid`PackagePrivate`self = $Failed}, 
                    Dynamic[
                    TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
                    Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
                    
                    Module[{
                    TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
                    TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
                    TypeSystem`NestedGrid`PackagePrivate`LookupCacheValue[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$["Data"]]}, 
                    TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = 
                    If[TypeSystem`NestedGrid`PackagePrivate`tmpData$ === 
                    TypeSystem`NestedGrid`PackagePrivate`$NotCached, 
                    TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
                    TypeSystem`NestedGrid`PackagePrivate`renderGrid[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 859967475][
                    TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
                    Not[
                    FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
                    TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
                    TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
                    TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$; If[
                    FailureQ[
                    TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
                    TypeSystem`SparseGrid[
                    TypeSystem`H["(data no longer present)"]], 
                    If[GeneralUtilities`$DebugMode, 
                    
                    Row[{TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
                    "  ", 
                    TypeSystem`NestedGrid`PackagePrivate`formatState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$]}], 
                    TypeSystem`NestedGrid`PackagePrivate`renderedGrid]]], 
                    TrackedSymbols :> {
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$}], 
                    DynamicModuleValues :> {}], 
                    TypeSystem`NestedGrid`PackagePrivate`$posCell$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
                    TypeSystem`NestedGrid`PackagePrivate`alignBar[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$][
                    TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
                    TypeSystem`PackageScope`Pathbar[
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    859967475]]]], 
                    TrackedSymbols :> {
                    TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
                    TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Framed[
                    Dynamic[
                    Replace[
                    MouseAnnotation[Null], {
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    859967475][Null] -> "", 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    859967475][
                    Pattern[TypeSystem`NestedGrid`PackagePrivate`path, 
                    Blank[]]] :> (
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
                    TypeSystem`NestedGrid`PackagePrivate`path; 
                    TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
                    TypeSystem`NestedGrid`PackagePrivate`path, 
                    TypeSystem`NestedGrid`PackagePrivate`makePathElements]), 
                    Null :> Spacer[10], Blank[] :> Spacer[10]}], 
                    TrackedSymbols :> {}], FrameStyle -> None, ImageMargins -> 
                    0, FrameMargins -> 0, Alignment -> Top, 
                    ImageSize -> {Automatic, 14}]}, 
                    DynamicBox[
                    ToBoxes[
                    Column[
                    If[TypeSystem`NestedGrid`PackagePrivate`$path$$ == {}, {
                    TypeSystem`NestedGrid`PackagePrivate`displayScrollBar[
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$], 
                    TypeSystem`NestedGrid`PackagePrivate`onDesktopShow[
                    TypeSystem`NestedGrid`PackagePrivate`alignBar[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$][
                    TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$]]}, {
                    TypeSystem`NestedGrid`PackagePrivate`$topBar$$, 
                    TypeSystem`NestedGrid`PackagePrivate`displayScrollBar[
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$], 
                    TypeSystem`NestedGrid`PackagePrivate`onDesktopShow[
                    TypeSystem`NestedGrid`PackagePrivate`alignBar[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$][
                    TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$]]}], 
                    Spacings -> 
                    If[TypeSystem`NestedGrid`PackagePrivate`$path$$ == {}, 
                    0, {{}, {0, 0.05, 0}}]], StandardForm], 
                    TrackedSymbols :> {
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
                    Initialization :> Block[{$ContextPath = $ContextPath}, 
                    Needs["TypeSystem`"]], DynamicModuleValues :> {}, 
                    BaseStyle -> {LineBreakWithin -> False}, Deinitialization :> 
                    TypeSystem`NestedGrid`PackagePrivate`deleteState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]], Deploy, 
                   DefaultBaseStyle -> "Deploy"]}, "CopyTag", 
                 DisplayFunction -> (#& ), 
                 InterpretationFunction -> ("Dataset[<>]"& )]],
               Annotation[#, 
                Dataset[
                 Association[
                 "L1Regularization" -> 0, "L2Regularization" -> 10., 
                  "OptimizationMethod" -> "LBFGS"], 
                 
                 TypeSystem`Struct[{
                  "L1Regularization", "L2Regularization", 
                   "OptimizationMethod"}, {
                   TypeSystem`Atom[Integer], 
                   TypeSystem`Atom[Real], 
                   TypeSystem`Atom[String]}], 
                 Association["ID" -> 263625248727408]], "Tooltip"]& ]},
             {
              
              TemplateBox[{
               TemplateBox[{5}, "Spacer1"],StyleBox["\"Accuracy\"", 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], 
              TagBox[
               TooltipBox[
                
                TemplateBox[{
                 TemplateBox[{
                   "42.9167130807171801621`3.", "\"%\"", "percent", 
                    "\"Percent\""}, "QuantityPostfix", SyntaxForm -> Mod],
                  StyleBox[
                   TemplateBox[{"\" \[PlusMinus] \"", 
                    
                    TemplateBox[{
                    "11.2283689372158583808`2.", "\"%\"", "percent", 
                    "\"Percent\""}, "QuantityPostfix", SyntaxForm -> Mod]}, 
                    "RowDefault"], {10, 
                    Opacity[0.5]}, StripOnInput -> False]},
                 "RowDefault"],
                
                TemplateBox[{
                 "\"95% confidence interval: [\"", "0.2045997520628546618`3.",
                   "\", \"", "0.6537345095514890403`3.", "\"]\""}, 
                 "RowDefault"],
                TooltipStyle->{}],
               Annotation[#, 
                
                Row[{"95% confidence interval: [", 0.2045997520628546618`3., 
                  ", ", 0.6537345095514890403`3., "]"}], "Tooltip"]& ]},
             {
              TemplateBox[{TemplateBox[{5}, "Spacer1"],StyleBox[
                 TagBox[
                  TooltipBox[
                  "\"Loss\"", "\"Mean cross entropy\"", LabelStyle -> 
                   "TextStyling"], 
                  Annotation[#, "Mean cross entropy", "Tooltip"]& ], 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], 
              TagBox[
               TooltipBox[
                TemplateBox[{"1.395772853757596188`3.",StyleBox[
                   
                   TemplateBox[{
                    "\" \[PlusMinus] \"", "0.1586450098991121216`2."}, 
                    "RowDefault"], {10, 
                    Opacity[0.5]}, StripOnInput -> False]},
                 "RowDefault"],
                
                TemplateBox[{
                 "\"95% confidence interval: [\"", "1.0784828339593719448`3.",
                   "\", \"", "1.7130628735558204312`3.", "\"]\""}, 
                 "RowDefault"],
                TooltipStyle->{}],
               Annotation[#, 
                
                Row[{"95% confidence interval: [", 1.0784828339593719448`3., 
                  ", ", 1.7130628735558204312`3., "]"}], "Tooltip"]& ]},
             {
              
              TemplateBox[{
               TemplateBox[{5}, "Spacer1"],StyleBox[
                "\"Single evaluation time\"", 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], 
              
              TemplateBox[{
               "3.14`",
                RowBox[{
                 "\"ms\"", "\[InvisibleSpace]", "\"/\"", "\[InvisibleSpace]", 
                  "\"example\""}],"milliseconds per example",FractionBox[
                "\"Milliseconds\"", "\"Examples\""]},
               "Quantity"]},
             {
              
              TemplateBox[{
               TemplateBox[{5}, "Spacer1"],StyleBox[
                "\"Batch evaluation speed\"", 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], 
              
              TemplateBox[{
               "104.`",
                RowBox[{
                 "\"examples\"", "\[InvisibleSpace]", "\"/\"", 
                  "\[InvisibleSpace]", "\"ms\""}],"examples per millisecond",
                FractionBox["\"Examples\"", "\"Milliseconds\""]},
               "Quantity"]},
             {
              
              TemplateBox[{
               TemplateBox[{5}, "Spacer1"],StyleBox["\"Classifier memory\"", 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], 
              TemplateBox[{"330.`","\"kB\"","kilobytes","\"Kilobytes\""},
               "Quantity"]},
             {
              
              TemplateBox[{
               TemplateBox[{5}, "Spacer1"],StyleBox[
                "\"Training examples used\"", 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], 
              TemplateBox[{"195","\"examples\"","examples","\"Examples\""},
               "Quantity"]},
             {
              
              TemplateBox[{
               TemplateBox[{5}, "Spacer1"],StyleBox["\"Training time\"", 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], 
              TemplateBox[{"3.69`","\"s\"","seconds","\"Seconds\""},
               "Quantity"]},
             {
              ItemBox[
               
               DynamicModuleBox[{
                MachineLearning`file4Automation`PackagePrivate`pos$$ = 1}, 
                DynamicBox[ToBoxes[
                  Show[
                   Part[{
                    Graphics[{{{{}, {{{}, {}, {
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.1972245773362196`, 0.5819482505440376}, {
                    3.6888794541139363`, 0.4210823930480344}, {
                    5.049856007249537, 0.33344827889308765`}}]}, {
                    Hue[0.9060679774997897, 0.6, 0.6], 
                    Directive[
                    Opacity[0]], 
                    
                    Line[{{2.1972245773362196`, 0.39962669375008303`}, {
                    2.1972245773362196`, 0.5157698356870423}}]}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6], 
                    AbsolutePointSize[6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 8.96], {0., 0.}], {{{
                    2.1972245773362196`, 0.5819482505440376}}, {{
                    3.6888794541139363`, 0.4210823930480344}}, {{
                    5.049856007249537, 0.33344827889308765`}}}]}, {
                    Directive[
                    Opacity[0]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledSquare]", FontSize -> 8.96], {0., 0.}], {{{
                    2.1972245773362196`, 0.39962669375008303`}}, {{
                    2.1972245773362196`, 
                    0.5157698356870423}}}]}, {}}}, {}, {}, {}, {}}}, {{{}, \
{{{}, {}, {
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    
                    Line[{{2.1972245773362196`, 0.574263671596196}, {
                    2.1972245773362196`, 0.5895742267891817}}]}, {
                    Hue[0.9060679774997897, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    
                    Line[{{3.6888794541139363`, 0.37347315559351857`}, {
                    3.6888794541139363`, 0.4665276274183801}}]}, {
                    Hue[0.1421359549995791, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    
                    Line[{{5.049856007249537, 0.212792437996133}, {
                    5.049856007249537, 
                    0.44110111133151897`}}]}}}, {}, {}, {}, {}}}}, {
                    DisplayFunction -> Identity, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& }, 
                    DisplayFunction -> Identity, DisplayFunction -> Identity, 
                    DisplayFunction -> Identity, PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.02], 
                    Scaled[0.05]}}, 
                    AxesOrigin -> {2.086414691506906, 0.31541199062809944`}, 
                    PlotRange -> {{2.1344536593519843`, 
                    Log[195]}, {0.3196427249124793, 0.5819482505440376}}, 
                    PlotRangeClipping -> True, 
                    ImagePadding -> {{30, 10}, {37, 0}}, DisplayFunction -> 
                    Identity, AspectRatio -> GoldenRatio^(-1), 
                    Axes -> {True, True}, AxesLabel -> {None, None}, 
                    AxesOrigin -> {2.086414691506906, 0.31541199062809944`}, 
                    DisplayFunction :> Identity, 
                    Frame -> {{True, True}, {True, True}}, 
                    FrameLabel -> {{None, None}, {
                    "training examples used", None}}, FrameTicks -> {{
                    Charting`ScaledTicks[{Log, Exp}], {}}, {
                    Charting`ScaledTicks[{Log, Exp}], {}}}, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& }, 
                    GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], ImageMargins -> 0, 
                    ImagePadding -> {{30, 10}, {37, 0}}, ImageSize -> 330, 
                    LabelStyle -> 10, 
                    Method -> {
                    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Exp[#]& )[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Exp[#]& )[
                    Part[#, 2]]}& )}}, PlotRange -> {{2.1344536593519843`, 
                    Log[195]}, {0.3196427249124793, 0.5819482505440376}}, 
                    PlotRangeClipping -> True, PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.02], 
                    Scaled[0.05]}}, Ticks -> {
                    Charting`ScaledTicks[{Log, Exp}], 
                    Charting`ScaledTicks[{Log, Exp}]}}], 
                    Graphics[{{{}, {{{}, {}, {
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.1972245773362196`, 0.21382520433437455`}, {
                    3.6888794541139363`, 0.3353657993699107}, {
                    5.049856007249537, 0.4291671308071718}}]}, {
                    Hue[0.9060679774997897, 0.6, 0.6], 
                    Directive[
                    Opacity[0]], 
                    
                    Line[{{2.1972245773362196`, 0.35763927567264314`}, {
                    2.1972245773362196`, 0.25659024520124946`}}]}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6], 
                    AbsolutePointSize[6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 8.96], {0., 0.}], {{{
                    2.1972245773362196`, 0.21382520433437455`}}, {{
                    3.6888794541139363`, 0.3353657993699107}}, {{
                    5.049856007249537, 0.4291671308071718}}}]}, {
                    Directive[
                    Opacity[0]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledSquare]", FontSize -> 8.96], {0., 0.}], {{{
                    2.1972245773362196`, 0.35763927567264314`}}, {{
                    2.1972245773362196`, 
                    0.25659024520124946`}}}]}, {}}}, {}, {}, {}, {}}}, {
                    DisplayFunction -> Identity, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Identity, Identity}][#, #2, {6,
                     6}]& }, DisplayFunction -> Identity, DisplayFunction -> 
                    Identity, DisplayFunction -> Identity, 
                    PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.05], 0}}, 
                    AxesOrigin -> {2.086414691506906, 0.1765853455923186}, 
                    PlotRange -> {{2.1344536593519843`, 
                    Log[195]}, {0.21382520433437455`, 1}}, PlotRangeClipping -> 
                    True, ImagePadding -> {{30, 10}, {37, 0}}, 
                    DisplayFunction -> Identity, AspectRatio -> 
                    GoldenRatio^(-1), Axes -> {True, True}, 
                    AxesLabel -> {None, None}, 
                    AxesOrigin -> {2.086414691506906, 0.1765853455923186}, 
                    DisplayFunction :> Identity, 
                    Frame -> {{True, True}, {True, True}}, 
                    FrameLabel -> {{None, None}, {
                    "training examples used", None}}, 
                    FrameTicks -> {{Automatic, None}, {
                    Charting`ScaledTicks[{Log, Exp}], {}}}, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Identity, Identity}][#, #2, {6,
                     6}]& }, GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], ImageMargins -> 0, 
                    ImagePadding -> {{30, 10}, {37, 0}}, ImageSize -> 330, 
                    LabelStyle -> 10, 
                    Method -> {
                    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Identity[#]& )[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Identity[#]& )[
                    Part[#, 2]]}& )}}, PlotRange -> {{2.1344536593519843`, 
                    Log[195]}, {0.21382520433437455`, 1}}, PlotRangeClipping -> 
                    True, PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.05], 0}}, Ticks -> {
                    Charting`ScaledTicks[{Log, Exp}], Automatic}}], 
                    Graphics[{{{{}, {{{}, {}, 
                    Tooltip[{
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.1972245773362196`, 0.7659440637120504}, {
                    3.6888794541139363`, 0.5992021087946876}, {
                    5.049856007249537, 0.3957764738481777}}]}, 
                    "LogisticRegression"], 
                    Tooltip[{
                    Hue[0.9060679774997897, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.1972245773362196`, 1.9615381889856207`}, {
                    3.6888794541139363`, 2.9466097849563875`}, {
                    5.049856007249537, 0.5280866600639661}}]}, 
                    "LogisticRegression"], 
                    Tooltip[{
                    Hue[0.1421359549995791, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.560181, 0.691569, 0.194885], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.1972245773362196`, 0.5819482505440376}, {
                    3.6888794541139363`, 0.5747127371516825}, {
                    5.049856007249537, 0.5489079261389018}}]}, 
                    "LogisticRegression"], 
                    Tooltip[{
                    Hue[0.37820393249936934`, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.922526, 0.385626, 0.209179], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.1972245773362196`, 0.5831956931573055}, {
                    3.6888794541139363`, 0.5831885311412864}, {
                    5.049856007249537, 0.5831563290228854}}]}, 
                    "LogisticRegression"], 
                    Tooltip[{
                    Hue[0.6142719099991583, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.528488, 0.470624, 0.701351], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.1972245773362196`, 1.7388472009845926`}, {
                    3.6888794541139363`, 2.473529875340653}, {
                    5.049856007249537, 0.5270202451684403}}]}, 
                    "LogisticRegression"], 
                    Tooltip[{
                    Hue[0.8503398874989481, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.772079, 0.431554, 0.102387], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.1972245773362196`, 0.5830708768902885}, {
                    3.6888794541139363`, 0.5823190301420821}, {
                    5.049856007249537, 0.5792448723261365}}]}, 
                    "LogisticRegression"], 
                    Tooltip[{
                    Hue[0.08640786499873876, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.363898, 0.618501, 0.782349], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.1972245773362196`, 1.1420430847080438`}, {
                    3.6888794541139363`, 1.2024376078089016`}, {
                    5.049856007249537, 0.4726043830086204}}]}, 
                    "LogisticRegression"], 
                    Tooltip[{
                    Hue[0.3224758424985268, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[1, 0.75, 0], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.1972245773362196`, 2.1511125218863225`}, {
                    3.6888794541139363`, 3.28402533368459}, {
                    5.049856007249537, 0.528194018791613}}]}, 
                    "LogisticRegression"], 
                    Tooltip[{
                    Hue[0.5585438199983166, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.647624, 0.37816, 0.614037], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.1972245773362196`, 1.4697837848273247`}, {
                    3.6888794541139363`, 1.9466526316709745`}, {
                    5.049856007249537, 0.5171741186522605}}]}, 
                    "LogisticRegression"], 
                    Tooltip[{
                    Hue[0.7946117974981064, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.571589, 0.586483, 0.], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.1972245773362196`, 2.313396045889925}, {
                    3.6888794541139363`, 3.6036011105961054`}}]}, 
                    "LogisticRegression"], 
                    Tooltip[{
                    Hue[0.030679774997896203`, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.915, 0.3325, 0.2125], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{3.6888794541139363`, 0.5831092075039414}, {
                    5.049856007249537, 0.5827951798227755}}]}, 
                    "LogisticRegression"], 
                    Tooltip[{
                    Hue[0.266747752497686, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.40082222609352647`, 0.5220066643438841, 0.85], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{3.6888794541139363`, 0.5203155699732067}, {
                    5.049856007249537, 0.4260955422610999}}]}, 
                    "LogisticRegression"], 
                    Tooltip[{
                    Hue[0.5028157299974758, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[
                    0.9728288904374106, 0.621644452187053, 
                    0.07336199581899142], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{3.6888794541139363`, 0.4210823930480344}, {
                    5.049856007249537, 0.33344827889308765`}}]}, 
                    "LogisticRegression"]}}, {}, {}, {}, {}}}}, {
                    DisplayFunction -> Identity, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& }, 
                    DisplayFunction -> Identity, DisplayFunction -> Identity, 
                    DisplayFunction -> Identity, PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.02], 
                    Scaled[0.05]}}, 
                    AxesOrigin -> {2.086414691506906, 0.09609847659206217}, 
                    PlotRange -> {{2.1344536593519843`, 
                    Log[195]}, {0.1517731215762533, 3.6036011105961054`}}, 
                    PlotRangeClipping -> True, 
                    ImagePadding -> {{30, 10}, {37, 0}}, DisplayFunction -> 
                    Identity, AspectRatio -> GoldenRatio^(-1), 
                    Axes -> {True, True}, AxesLabel -> {None, None}, 
                    AxesOrigin -> {2.086414691506906, 0.09609847659206217}, 
                    DisplayFunction :> Identity, 
                    Frame -> {{True, True}, {True, True}}, 
                    FrameLabel -> {{None, None}, {
                    "training examples used", None}}, FrameTicks -> {{
                    Charting`ScaledTicks[{Log, Exp}], {}}, {
                    Charting`ScaledTicks[{Log, Exp}], {}}}, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& }, 
                    GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], ImageMargins -> 0, 
                    ImagePadding -> {{30, 10}, {37, 0}}, ImageSize -> 330, 
                    LabelStyle -> 10, 
                    Method -> {
                    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Exp[#]& )[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Exp[#]& )[
                    Part[#, 2]]}& )}}, PlotRange -> {{2.1344536593519843`, 
                    Log[195]}, {0.1517731215762533, 3.6036011105961054`}}, 
                    PlotRangeClipping -> True, PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.02], 
                    Scaled[0.05]}}, Ticks -> {
                    Charting`ScaledTicks[{Log, Exp}], 
                    Charting`ScaledTicks[{Log, Exp}]}}]}, 
                    MachineLearning`file4Automation`PackagePrivate`pos$$], 
                   PlotLabel -> Grid[{{
                    Button[
                    Deploy[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{
                    GrayLevel[0.25], 
                    Line[{{0, 0.8}, {-1, 0}, {0, -0.8}}]}, 
                    ImageSize -> {Automatic, 10}, 
                    ImagePadding -> {{1, 1}, {1, 1}}, BaselinePosition -> 
                    Scaled[0.1]], 
                    Graphics[{
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098], 
                    Line[{{0, 0.8}, {-1, 0}, {0, -0.8}}]}, 
                    ImageSize -> {Automatic, 10}, 
                    ImagePadding -> {{1, 1}, {1, 1}}, BaselinePosition -> 
                    Scaled[0.1]]], "LinkHand"]], 
                    MachineLearning`file4Automation`PackagePrivate`pos$$ = 
                    Max[MachineLearning`file4Automation`PackagePrivate`pos$$ - 
                    1, 1], Appearance -> "Frameless"], 
                    Part[{
                    Tooltip[
                    "Learning curve", 
                    "mean cross entropy for best algorithm at each training \
size"], "Accuracy", 
                    Tooltip[
                    "Learning curves for all algorithms", 
                    "mean cross entropy at each training size"]}, 
                    MachineLearning`file4Automation`PackagePrivate`pos$$], 
                    Button[
                    Deploy[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{
                    GrayLevel[0.25], 
                    Line[{{0, 0.8}, {1, 0}, {0, -0.8}}]}, 
                    ImageSize -> {Automatic, 10}, 
                    ImagePadding -> {{1, 1}, {1, 1}}, BaselinePosition -> 
                    Scaled[0.1]], 
                    Graphics[{
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098], 
                    Line[{{0, 0.8}, {1, 0}, {0, -0.8}}]}, 
                    ImageSize -> {Automatic, 10}, 
                    ImagePadding -> {{1, 1}, {1, 1}}, BaselinePosition -> 
                    Scaled[0.1]]], "LinkHand"]], 
                    MachineLearning`file4Automation`PackagePrivate`pos$$ = 
                    Min[MachineLearning`file4Automation`PackagePrivate`pos$$ + 
                    1, 
                    Length[{
                    Graphics[{{{{}, {{{}, {}, {
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    Line[{{2.1972245773362196`, 0.5819482505440376}, {
                    3.6888794541139363`, 0.4210823930480344}, {
                    5.049856007249537, 0.33344827889308765`}}]}, {
                    Hue[0.9060679774997897, 0.6, 0.6], 
                    Directive[
                    Opacity[0]], 
                    
                    Line[{{2.1972245773362196`, 0.39962669375008303`}, {
                    2.1972245773362196`, 0.5157698356870423}}]}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6], 
                    AbsolutePointSize[6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 8.96], {0., 0.}], {{{
                    2.1972245773362196`, 0.5819482505440376}}, {{
                    3.6888794541139363`, 0.4210823930480344}}, {{
                    5.049856007249537, 0.33344827889308765`}}}]}, {
                    Directive[
                    Opacity[0]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledSquare]", FontSize -> 8.96], {0., 0.}], {{{
                    2.1972245773362196`, 0.39962669375008303`}}, {{
                    2.1972245773362196`, 
                    0.5157698356870423}}}]}, {}}}, {}, {}, {}, {}}}, {{{}, \
{{{}, {}, {
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    
                    Line[{{2.1972245773362196`, 0.574263671596196}, {
                    2.1972245773362196`, 0.5895742267891817}}]}, {
                    Hue[0.9060679774997897, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    Line[{{3.6888794541139363`, 0.37347315559351857`}, {
                    3.6888794541139363`, 0.4665276274183801}}]}, {
                    Hue[0.1421359549995791, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    
                    Line[{{5.049856007249537, 0.212792437996133}, {
                    5.049856007249537, 
                    0.44110111133151897`}}]}}}, {}, {}, {}, {}}}}, {
                    DisplayFunction -> Identity, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& }, 
                    DisplayFunction -> Identity, DisplayFunction -> Identity, 
                    DisplayFunction -> Identity, PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.02], 
                    Scaled[0.05]}}, 
                    AxesOrigin -> {2.086414691506906, 0.31541199062809944`}, 
                    PlotRange -> {{2.1344536593519843`, 
                    Log[195]}, {0.3196427249124793, 0.5819482505440376}}, 
                    PlotRangeClipping -> True, 
                    ImagePadding -> {{30, 10}, {37, 0}}, DisplayFunction -> 
                    Identity, AspectRatio -> GoldenRatio^(-1), 
                    Axes -> {True, True}, AxesLabel -> {None, None}, 
                    AxesOrigin -> {2.086414691506906, 0.31541199062809944`}, 
                    DisplayFunction :> Identity, 
                    Frame -> {{True, True}, {True, True}}, 
                    FrameLabel -> {{None, None}, {
                    "training examples used", None}}, FrameTicks -> {{
                    Charting`ScaledTicks[{Log, Exp}], {}}, {
                    Charting`ScaledTicks[{Log, Exp}], {}}}, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& }, 
                    GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], ImageMargins -> 0, 
                    ImagePadding -> {{30, 10}, {37, 0}}, ImageSize -> 330, 
                    LabelStyle -> 10, 
                    Method -> {
                    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Exp[#]& )[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Exp[#]& )[
                    Part[#, 2]]}& )}}, PlotRange -> {{2.1344536593519843`, 
                    Log[195]}, {0.3196427249124793, 0.5819482505440376}}, 
                    PlotRangeClipping -> True, PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.02], 
                    Scaled[0.05]}}, Ticks -> {
                    Charting`ScaledTicks[{Log, Exp}], 
                    Charting`ScaledTicks[{Log, Exp}]}}], 
                    Graphics[{{{}, {{{}, {}, {
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.1972245773362196`, 0.21382520433437455`}, {
                    3.6888794541139363`, 0.3353657993699107}, {
                    5.049856007249537, 0.4291671308071718}}]}, {
                    Hue[0.9060679774997897, 0.6, 0.6], 
                    Directive[
                    Opacity[0]], 
                    
                    Line[{{2.1972245773362196`, 0.35763927567264314`}, {
                    2.1972245773362196`, 0.25659024520124946`}}]}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6], 
                    AbsolutePointSize[6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 8.96], {0., 0.}], {{{
                    2.1972245773362196`, 0.21382520433437455`}}, {{
                    3.6888794541139363`, 0.3353657993699107}}, {{
                    5.049856007249537, 0.4291671308071718}}}]}, {
                    Directive[
                    Opacity[0]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledSquare]", FontSize -> 8.96], {0., 0.}], {{{
                    2.1972245773362196`, 0.35763927567264314`}}, {{
                    2.1972245773362196`, 
                    0.25659024520124946`}}}]}, {}}}, {}, {}, {}, {}}}, {
                    DisplayFunction -> Identity, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Identity, Identity}][#, #2, {6,
                     6}]& }, DisplayFunction -> Identity, DisplayFunction -> 
                    Identity, DisplayFunction -> Identity, 
                    PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.05], 0}}, 
                    AxesOrigin -> {2.086414691506906, 0.1765853455923186}, 
                    PlotRange -> {{2.1344536593519843`, 
                    Log[195]}, {0.21382520433437455`, 1}}, PlotRangeClipping -> 
                    True, ImagePadding -> {{30, 10}, {37, 0}}, 
                    DisplayFunction -> Identity, AspectRatio -> 
                    GoldenRatio^(-1), Axes -> {True, True}, 
                    AxesLabel -> {None, None}, 
                    AxesOrigin -> {2.086414691506906, 0.1765853455923186}, 
                    DisplayFunction :> Identity, 
                    Frame -> {{True, True}, {True, True}}, 
                    FrameLabel -> {{None, None}, {
                    "training examples used", None}}, 
                    FrameTicks -> {{Automatic, None}, {
                    Charting`ScaledTicks[{Log, Exp}], {}}}, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Identity, Identity}][#, #2, {6,
                     6}]& }, GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], ImageMargins -> 0, 
                    ImagePadding -> {{30, 10}, {37, 0}}, ImageSize -> 330, 
                    LabelStyle -> 10, 
                    Method -> {
                    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Identity[#]& )[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Identity[#]& )[
                    Part[#, 2]]}& )}}, PlotRange -> {{2.1344536593519843`, 
                    Log[195]}, {0.21382520433437455`, 1}}, PlotRangeClipping -> 
                    True, PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.05], 0}}, Ticks -> {
                    Charting`ScaledTicks[{Log, Exp}], Automatic}}], 
                    Graphics[{{{{}, {{{}, {}, 
                    Tooltip[{
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.1972245773362196`, 0.7659440637120504}, {
                    3.6888794541139363`, 0.5992021087946876}, {
                    5.049856007249537, 0.3957764738481777}}]}, 
                    "LogisticRegression"], 
                    Tooltip[{
                    Hue[0.9060679774997897, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.1972245773362196`, 1.9615381889856207`}, {
                    3.6888794541139363`, 2.9466097849563875`}, {
                    5.049856007249537, 0.5280866600639661}}]}, 
                    "LogisticRegression"], 
                    Tooltip[{
                    Hue[0.1421359549995791, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.560181, 0.691569, 0.194885], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.1972245773362196`, 0.5819482505440376}, {
                    3.6888794541139363`, 0.5747127371516825}, {
                    5.049856007249537, 0.5489079261389018}}]}, 
                    "LogisticRegression"], 
                    Tooltip[{
                    Hue[0.37820393249936934`, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.922526, 0.385626, 0.209179], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.1972245773362196`, 0.5831956931573055}, {
                    3.6888794541139363`, 0.5831885311412864}, {
                    5.049856007249537, 0.5831563290228854}}]}, 
                    "LogisticRegression"], 
                    Tooltip[{
                    Hue[0.6142719099991583, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.528488, 0.470624, 0.701351], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.1972245773362196`, 1.7388472009845926`}, {
                    3.6888794541139363`, 2.473529875340653}, {
                    5.049856007249537, 0.5270202451684403}}]}, 
                    "LogisticRegression"], 
                    Tooltip[{
                    Hue[0.8503398874989481, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.772079, 0.431554, 0.102387], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.1972245773362196`, 0.5830708768902885}, {
                    3.6888794541139363`, 0.5823190301420821}, {
                    5.049856007249537, 0.5792448723261365}}]}, 
                    "LogisticRegression"], 
                    Tooltip[{
                    Hue[0.08640786499873876, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.363898, 0.618501, 0.782349], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.1972245773362196`, 1.1420430847080438`}, {
                    3.6888794541139363`, 1.2024376078089016`}, {
                    5.049856007249537, 0.4726043830086204}}]}, 
                    "LogisticRegression"], 
                    Tooltip[{
                    Hue[0.3224758424985268, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[1, 0.75, 0], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.1972245773362196`, 2.1511125218863225`}, {
                    3.6888794541139363`, 3.28402533368459}, {
                    5.049856007249537, 0.528194018791613}}]}, 
                    "LogisticRegression"], 
                    Tooltip[{
                    Hue[0.5585438199983166, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.647624, 0.37816, 0.614037], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.1972245773362196`, 1.4697837848273247`}, {
                    3.6888794541139363`, 1.9466526316709745`}, {
                    5.049856007249537, 0.5171741186522605}}]}, 
                    "LogisticRegression"], 
                    Tooltip[{
                    Hue[0.7946117974981064, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.571589, 0.586483, 0.], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.1972245773362196`, 2.313396045889925}, {
                    3.6888794541139363`, 3.6036011105961054`}}]}, 
                    "LogisticRegression"], 
                    Tooltip[{
                    Hue[0.030679774997896203`, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.915, 0.3325, 0.2125], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{3.6888794541139363`, 0.5831092075039414}, {
                    5.049856007249537, 0.5827951798227755}}]}, 
                    "LogisticRegression"], 
                    Tooltip[{
                    Hue[0.266747752497686, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.40082222609352647`, 0.5220066643438841, 0.85], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{3.6888794541139363`, 0.5203155699732067}, {
                    5.049856007249537, 0.4260955422610999}}]}, 
                    "LogisticRegression"], 
                    Tooltip[{
                    Hue[0.5028157299974758, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[
                    0.9728288904374106, 0.621644452187053, 
                    0.07336199581899142], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{3.6888794541139363`, 0.4210823930480344}, {
                    5.049856007249537, 0.33344827889308765`}}]}, 
                    "LogisticRegression"]}}, {}, {}, {}, {}}}}, {
                    DisplayFunction -> Identity, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& }, 
                    DisplayFunction -> Identity, DisplayFunction -> Identity, 
                    DisplayFunction -> Identity, PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.02], 
                    Scaled[0.05]}}, 
                    AxesOrigin -> {2.086414691506906, 0.09609847659206217}, 
                    PlotRange -> {{2.1344536593519843`, 
                    Log[195]}, {0.1517731215762533, 3.6036011105961054`}}, 
                    PlotRangeClipping -> True, 
                    ImagePadding -> {{30, 10}, {37, 0}}, DisplayFunction -> 
                    Identity, AspectRatio -> GoldenRatio^(-1), 
                    Axes -> {True, True}, AxesLabel -> {None, None}, 
                    AxesOrigin -> {2.086414691506906, 0.09609847659206217}, 
                    DisplayFunction :> Identity, 
                    Frame -> {{True, True}, {True, True}}, 
                    FrameLabel -> {{None, None}, {
                    "training examples used", None}}, FrameTicks -> {{
                    Charting`ScaledTicks[{Log, Exp}], {}}, {
                    Charting`ScaledTicks[{Log, Exp}], {}}}, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& }, 
                    GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], ImageMargins -> 0, 
                    ImagePadding -> {{30, 10}, {37, 0}}, ImageSize -> 330, 
                    LabelStyle -> 10, 
                    Method -> {
                    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Exp[#]& )[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Exp[#]& )[
                    Part[#, 2]]}& )}}, PlotRange -> {{2.1344536593519843`, 
                    Log[195]}, {0.1517731215762533, 3.6036011105961054`}}, 
                    PlotRangeClipping -> True, PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.02], 
                    Scaled[0.05]}}, Ticks -> {
                    Charting`ScaledTicks[{Log, Exp}], 
                    Charting`ScaledTicks[{Log, Exp}]}}]}]], Appearance -> 
                    "Frameless"]}}, Alignment -> {Center, Baseline}, 
                    ItemSize -> {{3, 20, 3}, {2}}]], StandardForm],
                 ImageSizeCache->{297., {106., 111.}}],
                DynamicModuleValues:>{}],
               Alignment->Center,
               StripOnInput->False], "\[SpanFromLeft]"}
            },
            AutoDelete->False,
            ColumnsEqual->False,
            
            GridBoxAlignment->{
             "Columns" -> {Right, {Left}}, "ColumnsIndexed" -> {}, 
              "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
            GridBoxDividers->{"Columns" -> {False, {
                 Opacity[0.15]}, False}},
            
            GridBoxItemSize->{
             "Columns" -> {Automatic, {Automatic}}, "ColumnsIndexed" -> {}, 
              "Rows" -> {{1.}}, "RowsIndexed" -> {}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], 
                Offset[1.1199999999999999`], {
                 Offset[1.75]}, 
                Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
                Offset[0.2], {
                 Offset[0.8]}, 
                Offset[0.2]}, "RowsIndexed" -> {}}],
           "Grid"],
          FrameMargins->{{10, 10}, {10, 5}},
          FrameStyle->None,
          StripOnInput->False],
         Deploy,
         DefaultBaseStyle->"Deploy"],
        Alignment->Center,
        BaseStyle->{
         FontWeight -> "Light", FontSize -> 12, FontFamily -> "Segoe UI", 
          NumberMarks -> False, Deployed -> False},
        StripOnInput->False]}
     },
     DefaultBaseStyle->"Column",
     GridBoxAlignment->{
      "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
       "RowsIndexed" -> {}},
     GridBoxDividers->{
      "Columns" -> {{False}}, "ColumnsIndexed" -> {}, "Rows" -> {{False}}, 
       "RowsIndexed" -> {}},
     GridBoxItemSize->{
      "Columns" -> {{Automatic}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.}}, 
       "RowsIndexed" -> {}},
     GridBoxSpacings->{"Columns" -> {
         Offset[0.27999999999999997`], {
          Offset[0.5599999999999999]}, 
         Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
         Offset[0.2], 
         Offset[1.2], {
          Offset[0.4]}, 
         Offset[0.2]}, "RowsIndexed" -> {}}],
    Background->RGBColor[0.9802, 0.9802, 0.9802],
    FrameMargins->{{0, 0}, {0, 0}},
    FrameStyle->GrayLevel[0.85],
    RoundingRadius->5,
    StripOnInput->False],
   StripOnInput->False,
   LineBreakWithin->False],
  Deploy,
  DefaultBaseStyle->"Deploy"]], "Output",
 CellChangeTimes->{{3.7536292419753647`*^9, 3.7536292526239*^9}, 
   3.7536312676103125`*^9, 3.7536437294527845`*^9},
 CellLabel->"Out[66]=",ExpressionUUID->"19371a75-f428-4a56-834d-1377e437108c"]
}, Open  ]],

Cell["\<\
An accuracy of 0.61 for the testing set was promising. But we had to bolster \
it with statistical methods for more accuracy. \
\>", "Text",
 CellChangeTimes->{{3.7536421080510635`*^9, 3.7536421578558626`*^9}, {
  3.7536433865087757`*^9, 
  3.7536434118190823`*^9}},ExpressionUUID->"4f263ea3-3051-4ec2-9e46-\
3eb3b1737b88"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Statistics Based Measures", "Section",
 CellChangeTimes->{{3.753074541482788*^9, 
  3.753074546776615*^9}},ExpressionUUID->"b4f2a97f-0121-462f-89b8-\
cd82a75a46c7"],

Cell["\<\
The idea behind the simple statistical properties was to group together \
vaguely similar textures. The mean for eg, separates the textures based on \
average brightness to begin with.  Standard deviation differentiates \
gradually changing gradient textures from abrupt and discontinuous changes \
like in the fur texture for eg. 
The secondary features such as the entropy, energy, low pass filter \
components, high pass filter components account for the intensity \
distribution in the texture. High entropy, energy and high pass filter \
components suggest that the edges are high in number and its a comparatively \
course texture. \
\>", "Text",
 CellChangeTimes->{{3.7536410710371084`*^9, 3.753641083415453*^9}, {
  3.753642174302699*^9, 
  3.7536422068007975`*^9}},ExpressionUUID->"abdcb461-29a9-4b9a-ac7e-\
8e1ebdb41d20"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Evaluate", " ", "the", " ", "following", " ", "cell", " ", "before",
   " ", "evaluating", " ", "Test", " ", "Bench"}]], "Code",
 CellChangeTimes->{{3.753640379385641*^9, 3.7536403984127407`*^9}},
 CellLabel->"In[37]:=",ExpressionUUID->"d9233197-2383-4804-a93a-017b99cd6df4"],

Cell[BoxData[
 RowBox[{"before", " ", "Bench", " ", "cell", " ", "Evaluate", " ", 
  "evaluating", " ", "following", " ", "Test", " ", "the"}]], "Output",
 CellChangeTimes->{3.7536433265884266`*^9},
 CellLabel->"Out[37]=",ExpressionUUID->"f8b92697-cb0b-4621-b201-28ff28e7f0b5"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"featureVecStat", "[", "img1_", "]"}], " ", ":=", " ", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"featMean", " ", "=", " ", 
      RowBox[{"ImageMeasurements", "[", 
       RowBox[{"img1", ",", " ", "\"\<Mean\>\""}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"featStdDev", " ", "=", " ", 
      RowBox[{"ImageMeasurements", "[", 
       RowBox[{"img1", ",", " ", "\"\<StandardDeviation\>\""}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"featEntropy", " ", "=", " ", 
      RowBox[{"ImageMeasurements", "[", 
       RowBox[{"img1", ",", "\"\<Entropy\>\""}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"featMedian", " ", "=", " ", 
      RowBox[{"ImageMeasurements", "[", 
       RowBox[{"img1", ",", " ", "\"\<Median\>\""}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"featEnergy", " ", "=", " ", 
      RowBox[{"ImageMeasurements", "[", 
       RowBox[{"img1", ",", "\"\<Energy\>\""}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"featLPFSum", " ", "=", " ", 
      RowBox[{"ImageMeasurements", "[", 
       RowBox[{
        RowBox[{"LowpassFilter", "[", 
         RowBox[{"img1", ",", "0.1"}], "]"}], ",", "\"\<Total\>\""}], "]"}]}],
      ";", "\[IndentingNewLine]", 
     RowBox[{"featHPFSum", " ", "=", " ", 
      RowBox[{"ImageMeasurements", "[", 
       RowBox[{
        RowBox[{"HighpassFilter", "[", 
         RowBox[{"img1", ",", "0.1"}], "]"}], ",", "\"\<Total\>\""}], "]"}]}],
      ";", "\[IndentingNewLine]", 
     RowBox[{"featLPFMean", " ", "=", " ", 
      RowBox[{"ImageMeasurements", "[", 
       RowBox[{
        RowBox[{"LowpassFilter", "[", 
         RowBox[{"img1", ",", "0.1"}], "]"}], ",", "\"\<Mean\>\""}], "]"}]}], 
     ";", "\[IndentingNewLine]", 
     RowBox[{"featHPFMean", " ", "=", " ", 
      RowBox[{"ImageMeasurements", "[", 
       RowBox[{
        RowBox[{"HighpassFilter", "[", 
         RowBox[{"img1", ",", "0.1"}], "]"}], ",", "\"\<Mean\>\""}], "]"}]}], 
     ";", "\[IndentingNewLine]", 
     RowBox[{"featStat", " ", "=", " ", 
      RowBox[{"{", 
       RowBox[{
       "featMean", ",", " ", "featStdDev", ",", "featEntropy", ",", " ", 
        "featMedian", ",", " ", "featEnergy", ",", " ", "featLPFSum", ",", 
        " ", "featHPFSum", ",", "featLPFMean", ",", " ", "featHPFMean"}], 
       "}"}]}]}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.753069019792457*^9, 3.753069098479001*^9}, {
  3.753069138702482*^9, 3.753069172591856*^9}, {3.7530692247922764`*^9, 
  3.753069340389159*^9}, {3.753132777467631*^9, 3.7531328487061768`*^9}, {
  3.753133137529929*^9, 3.753133138078497*^9}},
 CellLabel->"In[67]:=",ExpressionUUID->"7ddd284d-9770-488e-9737-dcc821f36eb8"],

Cell[CellGroupData[{

Cell["Statistical Based Feature Matrix Extraction", "Subsubsection",
 CellChangeTimes->{{3.7536404092009025`*^9, 
  3.7536404128581276`*^9}},ExpressionUUID->"34ad8440-f042-4a8a-ae43-\
34f5363c023d"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"featMatrixTrainingStat", "=", " ", 
   RowBox[{"ConstantArray", "[", 
    RowBox[{"0", ",", 
     RowBox[{"Length", "[", "traFiles", "]"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"For", "[", 
  RowBox[{
   RowBox[{"i", "=", "1"}], ",", 
   RowBox[{"i", "\[LessEqual]", 
    RowBox[{"Length", "[", "traFiles", "]"}]}], ",", 
   RowBox[{"i", "++"}], ",", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"featMatrixTrainingStat", "[", 
      RowBox[{"[", "i", "]"}], "]"}], " ", "=", " ", 
     RowBox[{"featureVecStat", "[", 
      RowBox[{"traTextures", "[", 
       RowBox[{"[", "i", "]"}], "]"}], "]"}]}], ";"}]}], 
  "]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"featMatrixTestingStat", "=", " ", 
   RowBox[{"ConstantArray", "[", 
    RowBox[{"0", ",", 
     RowBox[{"Length", "[", "testFiles", "]"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"For", "[", 
  RowBox[{
   RowBox[{"i", "=", "1"}], ",", 
   RowBox[{"i", "\[LessEqual]", 
    RowBox[{"Length", "[", "testFiles", "]"}]}], ",", 
   RowBox[{"i", "++"}], ",", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"featMatrixTestingStat", "[", 
      RowBox[{"[", "i", "]"}], "]"}], " ", "=", " ", 
     RowBox[{"featureVecStat", "[", 
      RowBox[{"testTextures", "[", 
       RowBox[{"[", "i", "]"}], "]"}], "]"}]}], ";"}]}], "]"}]}], "Input",
 CellChangeTimes->{{3.7530693525306883`*^9, 3.753069362773261*^9}, {
  3.7531313113301477`*^9, 3.753131312253671*^9}},
 CellLabel->"In[68]:=",ExpressionUUID->"a686225f-66f9-4b61-96ac-a711a0e5b552"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Segmentation Based Feature Classifier", "Subsubsection",
 CellChangeTimes->{{3.7536404176682744`*^9, 
  3.7536404279966564`*^9}},ExpressionUUID->"6851a4fc-d427-4403-bcf1-\
58c02a384e75"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"trainingSetStat", " ", "=", " ", 
   RowBox[{"Thread", "[", 
    RowBox[{"featMatrixTrainingStat", "\[Rule]", "classes"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"cStat", " ", "=", " ", 
  RowBox[{"Classify", "[", "trainingSetStat", "]"}]}]}], "Input",
 CellChangeTimes->{{3.7530694008913336`*^9, 3.753069410190065*^9}, {
  3.753114383987974*^9, 3.7531143844198503`*^9}},
 CellLabel->"In[72]:=",ExpressionUUID->"8a284210-7c0f-4902-8e07-bc22372a6444"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["ClassifierFunction",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    TemplateBox[{PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquarePlusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              Evaluator -> Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{{
               PointSize[0.13], 
               GrayLevel[0.45], 
               
               PointBox[{{0.9821769431797024, -0.440194219686987}, {
                1.1339776261519132`, 0.8056918676854272}, {0.5279892326667741,
                 0.6574306661126254}, {0.022147046479890797`, 
                1.4937877187998898`}}], 
               GrayLevel[0.7], 
               
               PointBox[{{-0.9815166384819979, 
                0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
               GrayLevel[0.55], 
               AbsoluteThickness[1.5], 
               LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
             Axes -> {False, False}, AxesLabel -> {None, None}, 
              AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
              Frame -> {{True, True}, {True, True}}, 
              FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
              Directive[
                Thickness[Tiny], 
                GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, 
              GridLines -> {None, None}, 
              LabelStyle -> {FontFamily -> "Arial"}, 
              Method -> {"ScalingFunctions" -> None}, 
              PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> True,
               PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
              Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
             ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], Frame -> True, FrameTicks -> None, 
             FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
             GrayLevel[0.94]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TemplateBox[{"\"NumericalVector\"", 
                    StyleBox[
                    
                    TemplateBox[{"\" (length: \"", "9", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                  "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Number of classes: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TagBox[
                   TooltipBox["6", 
                    TagBox[
                    RowBox[{"{", 
                    
                    RowBox[{
                    "1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6"}], 
                    "}"}], Short[#, 1]& ]], Annotation[#, 
                    Short[{1, 2, 3, 4, 5, 6}, 1], "Tooltip"]& ], 
                  "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquareMinusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              Evaluator -> Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{{
               PointSize[0.13], 
               GrayLevel[0.45], 
               
               PointBox[{{0.9821769431797024, -0.440194219686987}, {
                1.1339776261519132`, 0.8056918676854272}, {0.5279892326667741,
                 0.6574306661126254}, {0.022147046479890797`, 
                1.4937877187998898`}}], 
               GrayLevel[0.7], 
               
               PointBox[{{-0.9815166384819979, 
                0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
               GrayLevel[0.55], 
               AbsoluteThickness[1.5], 
               LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
             Axes -> {False, False}, AxesLabel -> {None, None}, 
              AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
              Frame -> {{True, True}, {True, True}}, 
              FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
              Directive[
                Thickness[Tiny], 
                GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, 
              GridLines -> {None, None}, 
              LabelStyle -> {FontFamily -> "Arial"}, 
              Method -> {"ScalingFunctions" -> None}, 
              PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> True,
               PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
              Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
             ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], Frame -> True, FrameTicks -> None, 
             FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
             GrayLevel[0.94]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TemplateBox[{"\"NumericalVector\"", 
                    StyleBox[
                    
                    TemplateBox[{"\" (length: \"", "9", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                  "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Number of classes: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TagBox[
                   TooltipBox["6", 
                    TagBox[
                    RowBox[{"{", 
                    
                    RowBox[{
                    "1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6"}], 
                    "}"}], Short[#, 1]& ]], Annotation[#, 
                    Short[{1, 2, 3, 4, 5, 6}, 1], "Tooltip"]& ], 
                  "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Method: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"LogisticRegression\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox[
                 "\"Number of training examples: \"", 
                  "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                 TagBox["195", "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  ClassifierFunction[
   Association[
   "ExampleNumber" -> 195, "ClassNumber" -> 6, "Input" -> 
    Association["Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
        Association[
        "Input" -> Association[
          "f1" -> Association["Type" -> "NumericalVector", "Length" -> 9]], 
         "Output" -> 
         Association[
          "f1" -> Association["Type" -> "NumericalVector", "Weight" -> 1]], 
         "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
           Association["Processors" -> {
              MachineLearning`MLProcessor["List"], 
              MachineLearning`MLProcessor["WrapMLDataset", 
               Association[
               "FeatureTypes" -> {"NumericalVector"}, "FeatureKeys" -> {"f1"},
                 "FeatureWeights" -> Automatic, "ExampleWeights" -> Automatic,
                 "RawExample" -> Missing["KeyAbsent", "RawExample"]]]}]], 
         "ScalarFeature" -> True, "Invertibility" -> "Perfect", "Missing" -> 
         "Allowed"]], "Processor" -> MachineLearning`MLProcessor["Sequence", 
        Association[
        "Input" -> Association[
          "f1" -> Association["Type" -> "NumericalVector", "Weight" -> 1]], 
         "Output" -> 
         Association[
          "f1" -> Association["Type" -> "NumericalVector", "Weight" -> 1]], 
         "Processors" -> {
           MachineLearning`MLProcessor["ImputeMissing", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Imputed", "Input" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NumericalVector", "Weight" -> 1]], 
             "Imputer" -> (DimensionReducerFunction[
               Association[
               "ExampleNumber" -> 195, "Imputer" -> 
                MachineLearning`MLProcessor["ImputeMissing", 
                  Association[
                  "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                   "Input" -> 
                   Association[
                    "f1" -> 
                    Association["Type" -> "NumericalVector", "Weight" -> 1]], 
                   "Fill" -> {0.45952995498682975`, 0.16593597891729997`, 
                    4.818815382788861, 0.46531925590749096`, 
                    0.011371367289333939`, 141162.7082221702, 
                    32701.4348313918, 0.4595140241607108, 
                    0.10644998317510337`}, "Method" -> "Naive", 
                   "VectorLength" -> 9, "Output" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Type" -> 
                   "NumericalVector"]], "RandomImputer" -> 
                MachineLearning`MLProcessor["ImputeMissing", 
                  Association[
                  "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                   "Input" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                   "Mean" -> {0.45952995498682975`, 0.16593597891729997`, 
                    4.818815382788861, 0.46531925590749096`, 
                    0.011371367289333939`, 141162.7082221702, 
                    32701.4348313918, 0.4595140241607108, 
                    0.10644998317510337`}, 
                   "StandardDeviation" -> {0.07702644275723788, 
                    0.03888059408891359, 0.36556260949185765`, 
                    0.10524545595252087`, 0.005502775157907179, 
                    23660.76217470466, 5481.678770176637, 0.07702071020411537,
                     0.01784400641333647}, "Method" -> "NaiveSampler", 
                   "VectorLength" -> 9, "Output" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Type" -> 
                   "NumericalVector"]], "Preprocessor" -> 
                MachineLearning`MLProcessor["ToMLDataset", 
                  Association[
                  "Input" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Length" -> 9]], "Output" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                   "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
                    Association["Processors" -> {
                    MachineLearning`MLProcessor["List"], 
                    MachineLearning`MLProcessor["WrapMLDataset", 
                    Association[
                    "FeatureTypes" -> {"NumericalVector"}, 
                    "FeatureKeys" -> {"f1"}, "FeatureWeights" -> Automatic, 
                    "ExampleWeights" -> Automatic, "RawExample" -> 
                    Missing["KeyAbsent", "RawExample"]]]}]], "ScalarFeature" -> 
                   True, "Invertibility" -> "Perfect", "Missing" -> 
                   "Allowed"]], "Processor" -> 
                MachineLearning`MLProcessor["Identity"], "Padder" -> 
                MachineLearning`MLProcessor["Identity"], "PostProcessor" -> 
                MachineLearning`MLProcessor["FromMLDataset", 
                  Association[
                  "DatasetFormat" -> Automatic, "Input" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Output" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Length" -> 2]], 
                   "InversePreprocessor" -> 
                   MachineLearning`MLProcessor["Sequence", 
                    Association["Processors" -> {
                    MachineLearning`MLProcessor["List"], 
                    MachineLearning`MLProcessor["WrapMLDataset", 
                    Association[
                    "FeatureTypes" -> {"NumericalVector"}, 
                    "FeatureKeys" -> {"f1"}, "FeatureWeights" -> {1}, 
                    "ExampleWeights" -> 1]]}]], "ScalarFeature" -> True, 
                   "Invertibility" -> "Perfect", "Missing" -> "Allowed"]], 
                "Model" -> 
                Association[
                 "Matrix" -> {{-0.40561656056348255`, -0.05258942912660446}, {
                   0.06616422993802268, -0.5494927288706942}, {
                   0.07038254448279403, -0.5917608556115213}, \
{-0.40147179047722703`, -0.047526658946913554`}, {-0.08286838340453748, 
                   0.5760112332697015}, {-0.40561975487046154`, \
-0.0525625596406197}, {-0.4056120432790932, -0.052620400572447414`}, \
{-0.40561975487046914`, -0.05256255964062065}, {-0.4056120432790692, \
-0.052620400572444576`}}, "Processor" -> 
                  MachineLearning`MLProcessor["Standardize", 
                    Association[
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Mean" -> {0.45952995498682975`, 0.16593597891729997`, 
                    4.818815382788861, 0.46531925590749096`, 
                    0.011371367289333939`, 141162.7082221702, 
                    32701.4348313918, 0.4595140241607108, 
                    0.10644998317510337`}, 
                    "StandardDeviation" -> {0.07702644275723788, 
                    0.03888059408891359, 0.36556260949185765`, 
                    0.10524545595252087`, 0.005502775157907179, 
                    23660.76217470466, 5481.678770176637, 0.07702071020411537,
                     0.01784400641333647}, "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]]]], 
                  "FinalDimension" -> 2, "Method" -> "Linear"], 
                "PerformanceGoal" -> Automatic, "Invertibility" -> 
                "Approximate", "Log" -> 
                Association[
                 "TrainingTime" -> 0.012823636698239976`, "MaxTrainingMemory" -> 
                  95848, "DataMemory" -> 14456, "FunctionMemory" -> 22528, 
                  "LanguageVersion" -> {11.3, 0}, "Date" -> 
                  DateObject[{
                    2018, 12, 12, 17, 3, 29.0962826`9.21641241624904}, 
                    "Instant", "Gregorian", -6.], "ProcessorCount" -> 4, 
                  "ProcessorType" -> "x86-64", "OperatingSystem" -> "Windows",
                   "SystemWordLength" -> 64, "Evaluations" -> {}]]][#, 
               "ImputedVectors", PerformanceGoal -> "Quality"]& ), "Method" -> 
             "DimensionReduction", "VectorLength" -> 9, "Output" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NumericalVector", "Weight" -> 1]], "Type" -> 
             "NumericalVector", "Version" -> {11.3, 0}, "ID" -> 
             7263179337424669307]], 
           MachineLearning`MLProcessor["Standardize", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NumericalVector", "Weight" -> 1]], 
             "Mean" -> {0.45952995498682975`, 0.16593597891729997`, 
              4.818815382788861, 0.46531925590749096`, 0.011371367289333939`, 
              141162.7082221702, 32701.4348313918, 0.4595140241607108, 
              0.10644998317510337`}, 
             "StandardDeviation" -> {0.07702644275723788, 0.03888059408891359,
               0.36556260949185765`, 0.10524545595252087`, 
              0.005502775157907179, 23660.76217470466, 5481.678770176637, 
              0.07702071020411537, 0.01784400641333647}, "Output" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NumericalVector", "Weight" -> 1]], 
             "Version" -> {11.3, 0}, "ID" -> 1519634882283037191]]}, 
         "Invertibility" -> "Perfect", "Missing" -> "Imputed"]]], "Output" -> 
    Association["Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
        Association[
        "Input" -> Association["f1" -> Association["Type" -> "Nominal"]], 
         "Output" -> 
         Association["f1" -> Association["Type" -> "Nominal", "Weight" -> 1]],
          "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
           Association["Processors" -> {
              MachineLearning`MLProcessor["List"], 
              MachineLearning`MLProcessor["WrapMLDataset", 
               Association[
               "FeatureTypes" -> {"Nominal"}, "FeatureKeys" -> {"f1"}, 
                "FeatureWeights" -> Automatic, "ExampleWeights" -> Automatic, 
                "RawExample" -> Missing["KeyAbsent", "RawExample"]]]}]], 
         "ScalarFeature" -> True, "Invertibility" -> "Perfect", "Missing" -> 
         "Allowed"]], "Processor" -> MachineLearning`MLProcessor["Sequence", 
        Association[
        "Input" -> Association[
          "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], "Output" -> 
         Association["f1" -> Association["Type" -> "Nominal", "Weight" -> 1]],
          "Processors" -> {
           MachineLearning`MLProcessor["ToVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
             Association[
              "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
             "Output" -> 
             Association[
              "f1" -> Association["Type" -> "NominalVector", "Weight" -> 1]], 
             "Version" -> {11.3, 0}, "ID" -> 2242178343964704499]], 
           MachineLearning`MLProcessor["IntegerEncodeNominalVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
             Association[
              "f1" -> Association["Type" -> "NominalVector", "Weight" -> 1]], 
             "Index" -> {
               Association[1 -> 1, 2 -> 2, 3 -> 3, 4 -> 4, 5 -> 5, 6 -> 6]}, 
             "MissingCode" -> 0, "Version" -> {11.3, 0}, "ID" -> 
             2182274502795179204, "Output" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NominalVector", "Weight" -> 1]]]], 
           MachineLearning`MLProcessor["FromVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
             Association[
              "f1" -> Association["Type" -> "NominalVector", "Weight" -> 1]], 
             "Output" -> 
             Association[
              "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
             "Version" -> {11.3, 0}, "ID" -> 3987113361074832291]], 
           MachineLearning`MLProcessor["FirstValues", 
            Association[
            "Info" -> Association[
              "Type" -> "Nominal", "Weight" -> 1, "SetSize" -> 6], "Key" -> 
             "f1", "Invertibility" -> "Perfect", "Missing" -> "Allowed"]]}, 
         "Invertibility" -> "Perfect", "Missing" -> "Allowed"]], 
      "ProbabilityPostprocessor" -> Identity, "Name" -> "class", "Marginal" -> 
      Association[
       1 -> 0.1691542288557214, 2 -> 0.16417910447761194`, 3 -> 
        0.1691542288557214, 4 -> 0.16417910447761194`, 5 -> 
        0.16417910447761194`, 6 -> 0.1691542288557214]], "Prior" -> Automatic,
     "Utility" -> 
    SparseArray[
     Automatic, {6, 7}, 0., {
      1, {{0, 1, 2, 3, 4, 5, 6}, {{2}, {3}, {4}, {5}, {6}, {7}}}, {1., 1., 1.,
        1., 1., 1.}}], "Threshold" -> 0, "TieBreaker" -> RandomChoice, 
    "PerformanceGoal" -> Automatic, "BatchProcessing" -> Automatic, "Model" -> 
    Association["LogProbabilitiesFunction" -> LinearLayer[
        Association[
        "Type" -> "Linear", "Arrays" -> 
         Association[
          "Weights" -> 
           RawArray["Real32",{{-3.828110933303833, 
             5.997787952423096, -9.648638725280762, -2.3119590282440186`, 
             5.921446800231934, -3.8140311241149902`, -3.843045473098755, \
-3.8140311241149902`, -3.843045473098755}, {-1.8781359195709229`, \
-2.9983699321746826`, -5.812038898468018, -1.7973638772964478`, 
             0.57850182056427, -1.855657696723938, -1.9014872312545776`, \
-1.855657696723938, -1.9014872312545776`}, {-3.2409284114837646`, 
             0.5857602953910828, -9.560070991516113, 11.240188598632812`, 
             13.936480522155762`, -3.202648639678955, -3.2796077728271484`, \
-3.202648639678955, -3.2796077728271484`}, {0.35903793573379517`, 
             0.3342534005641937, -20.501785278320312`, -12.08708381652832, 
             6.612992286682129, 0.339686781167984, 0.37744754552841187`, 
             0.339686781167984, 0.37744754552841187`}, {1.8615968227386475`, 
             10.848148345947266`, -10.175031661987305`, 0.4083726406097412, 
             6.210919380187988, 1.867727279663086, 1.855818748474121, 
             1.867727279663086, 1.855818748474121}}], "Biases" -> 
           RawArray["Real32",{-0.19784313440322876`, 7.331965923309326, 
             9.24074649810791, 5.6257243156433105`, 1.040838360786438}]], 
         "Parameters" -> 
         Association[
          "OutputDimensions" -> {5}, "$OutputSize" -> 5, "$InputSize" -> 9, 
           "$InputDimensions" -> {9}], "Inputs" -> 
         Association[
          "Input" -> NeuralNetworks`TensorT[{9}, NeuralNetworks`RealT]], 
         "Outputs" -> 
         Association[
          "Output" -> NeuralNetworks`TensorT[{5}, NeuralNetworks`RealT]]], 
        Association["Version" -> "11.3.5"]], "Processor" -> 
      MachineLearning`MLProcessor["FirstValues", 
        Association[
        "Info" -> Association["Weight" -> 1, "Type" -> "NumericalVector"], 
         "Key" -> "f1", "Invertibility" -> "Perfect", "Missing" -> 
         "Allowed"]], "Method" -> "LogisticRegression", "Options" -> 
      Association[
       "L1Regularization" -> 
        Association["Value" -> 0, "Options" -> Association[]], 
        "L2Regularization" -> 
        Association["Value" -> 0.01, "Options" -> Association[]], 
        "OptimizationMethod" -> 
        Association["Value" -> "LBFGS", "Options" -> Association[]], 
        MaxIterations -> 
        Association["Value" -> 30, "Options" -> Association[]]]], 
    "TrainingInformation" -> 
    Association[
     "LossName" -> "MeanCrossEntropy", "BestModelInformation" -> Dataset[
        Association[
        "MeanCrossEntropy" -> 
         PlusMinus[0.25144457040184504`, 0.09740775350534699], "Accuracy" -> 
         PlusMinus[0.9041671308071711, 0.036347930428302075`], 
         "EvaluationTime" -> 8.897120108986162*^-6, "TestSize" -> 78, 
         "TrainingSize" -> 156, "TrainingTime" -> 0.027476969442122624`, 
         "TrainingMemory" -> 122661.33333333333`, "ModelMemory" -> 9088., 
         "ExperimentCount" -> 2, "ModelUtility" -> 1.5943155853538462`, 
         "MeanCrossEntropyHistory" -> {
           PlusMinus[0.22406552018632114`, 0.07994684126499685], 
           PlusMinus[0.3569379946572904, 0.1569295808802805]}, 
         "AccuracyHistory" -> {
           PlusMinus[0.9041671308071711, 0.05140373617589849], 
           PlusMinus[0.9041671308071711, 0.05140373617589849]}, 
         "Configuration" -> {
          "LogisticRegression", "L1Regularization" -> 0, "L2Regularization" -> 
           0.01, "OptimizationMethod" -> Automatic, MaxIterations -> 30}, 
         "FinalTrainingSize" -> 195], 
        TypeSystem`Struct[{
         "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
          "TrainingSize", "TrainingTime", "TrainingMemory", "ModelMemory", 
          "ExperimentCount", "ModelUtility", "MeanCrossEntropyHistory", 
          "AccuracyHistory", "Configuration", "FinalTrainingSize"}, {
         TypeSystem`AnyType, TypeSystem`AnyType, 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Real], 
          TypeSystem`Vector[TypeSystem`AnyType, 2], 
          TypeSystem`Vector[TypeSystem`AnyType, 2], 
          TypeSystem`Tuple[{
            TypeSystem`Atom[String], TypeSystem`AnyType, TypeSystem`AnyType, 
            TypeSystem`AnyType, TypeSystem`AnyType}], 
          TypeSystem`Atom[Integer]}], 
        Association["ID" -> 214112865740004]], "Configurations" -> Dataset[
        Association[
        Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 1000.], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[1.7809871118585976`, 0.006855374576007626], 
              "Accuracy" -> PlusMinus[0.517851465957302, 0.04118598294690353],
               "EvaluationTime" -> 7.016217186383927*^-6, "TestSize" -> 372, 
              "TrainingSize" -> 9, "TrainingTime" -> 0.008697995970487711, 
              "TrainingMemory" -> 71552., "ModelMemory" -> 9088., 
              "ExperimentCount" -> 2, "ModelUtility" -> 0.24234283623323052`, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[1.7801565078602797`, 0.009622255126359948], 
                PlusMinus[1.7818181466775695`, 0.009624750255717828]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.549774264223411, 0.0365791869710728], 
                PlusMinus[0.4857353147441854, 0.03668979783007068]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[1.747729303344358, 0.015627158170794454`], "Accuracy" -> 
              PlusMinus[0.5880958045817551, 0.05619924383243704], 
              "EvaluationTime" -> 4.434146082130136*^-6, "TestSize" -> 155, 
              "TrainingSize" -> 40, "TrainingTime" -> 0.010153630724911248`, 
              "TrainingMemory" -> 80048, "ModelMemory" -> 9088, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.2467033561678575, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[1.747729303344358, 0.011050069513243522`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.5880958045817551, 0.039738866411472486`]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[1.639119827880602, 0.046069821511608024`], "Accuracy" -> 
              PlusMinus[0.5041671308071717, 0.11380410105953834`], 
              "EvaluationTime" -> 9.002567458425999*^-6, "TestSize" -> 39, 
              "TrainingSize" -> 156, "TrainingTime" -> 0.01365589308461256, 
              "TrainingMemory" -> 111400, "ModelMemory" -> 9088, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.262047492660005, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[1.639119827880602, 0.03257628319891191]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.5041671308071717, 0.08047165158603871]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 9.002567458425999*^-6, "MeanCrossEntropy" -> 
             PlusMinus[1.639119827880602, 0.046069821511608024`], 
             "ModelMemory" -> 9088, "TrainingMemory" -> 111400, 
             "TrainingTime" -> 0.025767862326253412`], "Index" -> 1], 
         Association[
          "Value" -> "NaiveBayes", "Options" -> 
           Association["SmoothingParameter" -> Association["Value" -> 0.2]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[4.092975492776665, 1.567712558653658], "Accuracy" -> 
              PlusMinus[0.5445233245839437, 0.03336721244514954], 
              "EvaluationTime" -> 9.375530764946063*^-6, "TestSize" -> 372, 
              "TrainingSize" -> 9, "TrainingTime" -> 0.00628827359833254, 
              "TrainingMemory" -> 62349.33333333333, "ModelMemory" -> 20712., 
              "ExperimentCount" -> 2, "ModelUtility" -> 0.09802323562439721, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[3.23616035513705, 0.36860379788233427`], 
                PlusMinus[6.308453057468343, 0.5927204595530596]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.5233476137027225, 0.03656458564881384], 
                PlusMinus[0.5656037105154443, 0.036482192930608504`]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[2.6492690037134454`, 0.746801211404422], "Accuracy" -> 
              PlusMinus[0.8071336391287738, 0.04559979259615742], 
              "EvaluationTime" -> 0.000010022430411516283`, "TestSize" -> 155,
               "TrainingSize" -> 40, "TrainingTime" -> 0.006026276477730587, 
              "TrainingMemory" -> 59664, "ModelMemory" -> 23656, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.15434020241875446`, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[2.6492690037134454`, 0.5280682007823952]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.8071336391287738, 0.032243922565443034`]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[1.0858689400355148`, 0.5888708746824709], "Accuracy" -> 
              PlusMinus[0.8062696643090353, 0.052699111715386264`], 
              "EvaluationTime" -> 0.000013158950482179533`, "TestSize" -> 78, 
              "TrainingSize" -> 156, "TrainingTime" -> 0.006658222442923524, 
              "TrainingMemory" -> 107733.33333333333`, "ModelMemory" -> 
              33896., "ExperimentCount" -> 2, "ModelUtility" -> 
              0.35886093035440186`, "MeanCrossEntropyHistory" -> {
                PlusMinus[0.8582490162828385, 0.45444968947239645`], 
                PlusMinus[1.7383764581010084`, 0.769437651539807]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.8291671308071713, 0.06301167219942883], 
                PlusMinus[0.7791671308071713, 0.06855391061337202]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.000013158950482179533`, "MeanCrossEntropy" -> 
             PlusMinus[1.0858689400355148`, 0.5888708746824709], 
             "ModelMemory" -> 33896., "TrainingMemory" -> 107733.33333333333`,
              "TrainingTime" -> 0.014611051651986945`], "Index" -> 2], 
         Association[
          "Value" -> "DecisionTree", "Options" -> 
           Association[
            "DistributionSmoothing" -> Association["Value" -> 1], 
             "FeatureFraction" -> Association["Value" -> 1]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[1.477162302250045, 0.023571181141936643`], "Accuracy" -> 
              PlusMinus[0.5517644373036149, 0.03271060843780705], 
              "EvaluationTime" -> 0.000012724263626356983`, "TestSize" -> 558,
               "TrainingSize" -> 9, "TrainingTime" -> 0.014361177681340903`, 
              "TrainingMemory" -> 546412., "ModelMemory" -> 5616., 
              "ExperimentCount" -> 3, "ModelUtility" -> 0.2914830615595954, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[1.480756452576107, 0.03885698407273661], 
                PlusMinus[1.457786299060925, 0.03224166807902029], 
                PlusMinus[1.4983156278239436`, 0.036069869754246]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.581574833589455, 0.03632064559107509], 
                PlusMinus[0.5017721345025156, 0.03669280710608763], 
                PlusMinus[0.5710369202200813, 0.036414806579683566`]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[1.0201680662234751`, 0.07817222117479992], "Accuracy" -> 
              PlusMinus[0.7351077215010614, 0.05072677414622408], 
              "EvaluationTime" -> 9.677515533025981*^-6, "TestSize" -> 155, 
              "TrainingSize" -> 40, "TrainingTime" -> 0.007425536442959851, 
              "TrainingMemory" -> 75616, "ModelMemory" -> 5616, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.4170118408130469, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[1.0201680662234751`, 0.055276107693115646`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.7351077215010614, 0.03586924598651348]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.7546494940995635, 0.14494025583928657`], "Accuracy" -> 
              PlusMinus[0.7863554841845792, 0.06906986963165328], 
              "EvaluationTime" -> 0.000012622926455860368`, "TestSize" -> 78, 
              "TrainingSize" -> 156, "TrainingTime" -> 0.010552538047842147`, 
              "TrainingMemory" -> 108237.33333333333`, "ModelMemory" -> 5744.,
               "ExperimentCount" -> 2, "ModelUtility" -> 0.5512011343828125, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.8788163383072881, 0.17522568410292969`], 
                PlusMinus[0.6820511398032459, 0.1339856632764267]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.7291671308071713, 0.0728272372632941], 
                PlusMinus[0.8291671308071713, 0.06301167219942883]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.000012622926455860368`, "MeanCrossEntropy" -> 
             PlusMinus[0.7546494940995635, 0.14494025583928657`], 
             "ModelMemory" -> 5744., "TrainingMemory" -> 108237.33333333333`, 
             "TrainingTime" -> 0.027551850241143587`], "Index" -> 3], 
         Association[
          "Value" -> "NearestNeighbors", "Options" -> 
           Association[
            "NeighborsNumber" -> Association["Value" -> Automatic], 
             "DistributionSmoothing" -> Association["Value" -> 0.5], 
             "NearestMethod" -> Association["Value" -> Automatic]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[1.1874659257812203`, 0.15977068611015505`], 
              "Accuracy" -> PlusMinus[0.4463465770835803, 0.0261602237848162],
               "EvaluationTime" -> 0.00001047250563557194, "TestSize" -> 558, 
              "TrainingSize" -> 9, "TrainingTime" -> 0.0041324948054658524`, 
              "TrainingMemory" -> 65516., "ModelMemory" -> 6736., 
              "ExperimentCount" -> 3, "ModelUtility" -> 0.3542190817158093, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[1.5479829544004244`, 0.12049143820223815`], 
                PlusMinus[1.0193675652959093`, 0.06686184529346942], 
                PlusMinus[1.2674361494079285`, 0.07913644312855049]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.44316432398467803`, 0.03644860148860408], 
                PlusMinus[0.47507077233497946`, 0.0366534791793243], 
                PlusMinus[0.4214972190859434, 0.03617854072487412]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.5625279772219822, 0.08696830639647014], "Accuracy" -> 
              PlusMinus[0.75792333865379, 0.04912403414874814], 
              "EvaluationTime" -> 0.000010708943679280635`, "TestSize" -> 155,
               "TrainingSize" -> 40, "TrainingTime" -> 0.003892430733547386, 
              "TrainingMemory" -> 83248, "ModelMemory" -> 9200, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.7448277530316848, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.5625279772219822, 0.06149587920125343]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.75792333865379, 0.03473593766581934]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.3999800123301289, 0.06827863690489053], "Accuracy" -> 
              PlusMinus[0.8172382791565529, 0.04724610598974232], 
              "EvaluationTime" -> 0.000017170343400453296`, "TestSize" -> 78, 
              "TrainingSize" -> 156, "TrainingTime" -> 0.007402232578733648, 
              "TrainingMemory" -> 580722.6666666666, "ModelMemory" -> 17776., 
              "ExperimentCount" -> 2, "ModelUtility" -> 1.0442552599764987`, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.38605256164417023`, 0.06264773257636196], 
                PlusMinus[0.4623150107707413, 0.1325365064812182]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.8291671308071713, 0.06301167219942883], 
                PlusMinus[0.8041671308071714, 0.06595968273784553]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.000017170343400453296`, "MeanCrossEntropy" -> 
             PlusMinus[0.3999800123301289, 0.06827863690489053], 
             "ModelMemory" -> 17776., "TrainingMemory" -> 580722.6666666666, 
             "TrainingTime" -> 0.013385285528882912`], "Index" -> 4], 
         Association[
          "Value" -> "RandomForest", "Options" -> 
           Association[
            "FeatureFraction" -> Association["Value" -> Automatic], 
             "LeafSize" -> Association["Value" -> Automatic], "TreeNumber" -> 
             Association["Value" -> Automatic], "DistributionSmoothing" -> 
             Association["Value" -> 0.5], "Implementation" -> 
             Association["Value" -> Automatic]]] -> Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[1.790734132323631, 0.049891946092291965`], "Accuracy" -> 
              PlusMinus[0.13138648131629102`, 0.12035073470600759`], 
              "EvaluationTime" -> 0.000050644144565278515`, "TestSize" -> 472,
               "TrainingSize" -> 9, "TrainingTime" -> 0.019125318586099727`, 
              "TrainingMemory" -> 156488., "ModelMemory" -> 86332., 
              "ExperimentCount" -> 3, "ModelUtility" -> 0.23987051235853638`, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[1.6857227889213375`, 0.019216342970884842`], 
                PlusMinus[1.7709429177643286`, 0.009684933563433374], 
                PlusMinus[1.85688059495115, 0.01155542757323784]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.4372939131909593, 0.049653124784769166`], 
                PlusMinus[0.3740984439654622, 0.03547669297780424], 
                PlusMinus[0.051270057739527815`, 0.01589953944860087]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[1.0974646199806215`, 0.05160796457115537], "Accuracy" -> 
              PlusMinus[0.7640265864582867, 0.06076504089062877], 
              "EvaluationTime" -> 0.000037217641984790116`, "TestSize" -> 100,
               "TrainingSize" -> 40, "TrainingTime" -> 0.011383766322557696`, 
              "TrainingMemory" -> 158384, "ModelMemory" -> 87400, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.3899107808174553, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[1.0974646199806215`, 0.03649234171149906]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.7640265864582867, 0.04296737247284145]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.6543884610417972, 0.06421735931457404], "Accuracy" -> 
              PlusMinus[0.8316693390485722, 0.05081942285260608], 
              "EvaluationTime" -> 0.00008403714386398929, "TestSize" -> 78, 
              "TrainingSize" -> 156, "TrainingTime" -> 0.008669894251861994, 
              "TrainingMemory" -> 193186.66666666666`, "ModelMemory" -> 
              92738.66666666666, "ExperimentCount" -> 2, "ModelUtility" -> 
              0.6473573539785248, "MeanCrossEntropyHistory" -> {
                PlusMinus[0.685152127081087, 0.0975452159620302], 
                PlusMinus[0.6362721453120916, 0.0748551820593841]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.8041671308071714, 0.06595968273784553], 
                PlusMinus[0.8541671308071713, 0.05965745485569516]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.00008403714386398929, "MeanCrossEntropy" -> 
             PlusMinus[0.6543884610417972, 0.06421735931457404], 
             "ModelMemory" -> 92738.66666666666, "TrainingMemory" -> 
             193186.66666666666`, "TrainingTime" -> 0.029962686400927217`], 
           "Index" -> 5], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 0.00001], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[2.921241194838265, 0.6044748268880006], "Accuracy" -> 
              PlusMinus[0.7042444668822769, 0.046470840801028514`], 
              "EvaluationTime" -> 4.198122599573471*^-6, "TestSize" -> 372, 
              "TrainingSize" -> 9, "TrainingTime" -> 0.026097414950319926`, 
              "TrainingMemory" -> 88754.66666666666, "ModelMemory" -> 9088., 
              "ExperimentCount" -> 2, "ModelUtility" -> 0.14198632692130497`, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[3.4873785167224804`, 0.4590658543909233], 
                PlusMinus[2.4490161544661433`, 0.41926499491922836`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.6613971828044222, 0.0349358724360237], 
                PlusMinus[0.7412460032274172, 0.03246533003076775]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[2.542878384252619, 0.9197543885469838], "Accuracy" -> 
              PlusMinus[0.8465378451273007, 0.041653357683123476`], 
              "EvaluationTime" -> 4.908404040054302*^-6, "TestSize" -> 155, 
              "TrainingSize" -> 40, "TrainingTime" -> 0.023319114549116494`, 
              "TrainingMemory" -> 94840, "ModelMemory" -> 9088, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.15840439484133342`, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[2.542878384252619, 0.6503645651676588]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.8465378451273007, 0.029453371676925386`]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[1.36666344763349, 0.9031530713922142], "Accuracy" -> 
              PlusMinus[0.8291671308071713, 0.08911196141223997], 
              "EvaluationTime" -> 9.305728588065527*^-6, "TestSize" -> 39, 
              "TrainingSize" -> 156, "TrainingTime" -> 0.027800139206318363`, 
              "TrainingMemory" -> 122368, "ModelMemory" -> 9088, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.2791594356948613, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[1.36666344763349, 0.6386256612308927]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.8291671308071713, 0.06301167219942883]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 9.305728588065527*^-6, "MeanCrossEntropy" -> 
             PlusMinus[1.36666344763349, 0.9031530713922142], "ModelMemory" -> 
             9088, "TrainingMemory" -> 122368, "TrainingTime" -> 
             0.06084758895821788], "Index" -> 6], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 1.*^6], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[1.7917473740326628`, 0.006857843313472374], 
              "Accuracy" -> PlusMinus[0.515203262799247, 0.03918076233847278],
               "EvaluationTime" -> 5.100023416993358*^-6, "TestSize" -> 372, 
              "TrainingSize" -> 9, "TrainingTime" -> 0.007507271319694404, 
              "TrainingMemory" -> 67733.33333333333, "ModelMemory" -> 9088., 
              "ExperimentCount" -> 2, "ModelUtility" -> 0.24088850366205156`, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[1.7917465143176126`, 0.009698446015484748], 
                PlusMinus[1.79174823375088, 0.00969846387720583]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.5445171380499655, 0.0365937560486483], 
                PlusMinus[0.4857353147441854, 0.03668979783007068]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[1.7917119391211882`, 0.015822596770311816`], 
              "Accuracy" -> 
              PlusMinus[0.5944934303181705, 0.05607402370823019], 
              "EvaluationTime" -> 4.646401391970322*^-6, "TestSize" -> 155, 
              "TrainingSize" -> 40, "TrainingTime" -> 0.007504701040551808, 
              "TrainingMemory" -> 73824, "ModelMemory" -> 9088, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.24065262940538973`, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[1.7917119391211882`, 0.01118826547226785]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.5944934303181705, 0.0396503224125048]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[1.7915748053345724`, 0.04539921084648078], "Accuracy" -> 
              PlusMinus[0.5041671308071717, 0.11380410105953834`], 
              "EvaluationTime" -> 0.000011651932113101877`, "TestSize" -> 39, 
              "TrainingSize" -> 156, "TrainingTime" -> 0.009642145175534644, 
              "TrainingMemory" -> 102584, "ModelMemory" -> 9088, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.23988038837024903`, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[1.7915748053345724`, 0.032102089850064415`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.5041671308071717, 0.08047165158603871]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.000011651932113101877`, "MeanCrossEntropy" -> 
             PlusMinus[1.7915748053345724`, 0.04539921084648078], 
             "ModelMemory" -> 9088, "TrainingMemory" -> 102584, 
             "TrainingTime" -> 0.01955995278911271], "Index" -> 7], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 0.01], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.8279567805780135, 0.27172879245243675`], "Accuracy" -> 
              PlusMinus[0.7429294791733442, 0.04903259992349929], 
              "EvaluationTime" -> 5.012735263315591*^-6, "TestSize" -> 558, 
              "TrainingSize" -> 9, "TrainingTime" -> 0.026469377180239284`, 
              "TrainingMemory" -> 88872., "ModelMemory" -> 9088., 
              "ExperimentCount" -> 3, "ModelUtility" -> 0.48956193584991214`, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[1.4808441062667008`, 0.16862922688147647`], 
                PlusMinus[0.9928560784706114, 0.132289954817428], 
                PlusMinus[0.5700517080353638, 0.08924310636730769]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.6666680904370991, 0.03481096514088346], 
                PlusMinus[0.7092568290032921, 0.033600127074868286`], 
                PlusMinus[0.8191264276176664, 0.02866108814375671]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.3238859603949106, 0.08824918847066153], "Accuracy" -> 
              PlusMinus[0.8543025312978362, 0.04102690878920922], 
              "EvaluationTime" -> 4.875239147891773*^-6, "TestSize" -> 155, 
              "TrainingSize" -> 40, "TrainingTime" -> 0.023958085943965857`, 
              "TrainingMemory" -> 94664, "ModelMemory" -> 9088, 
              "ExperimentCount" -> 1, "ModelUtility" -> 1.2647041437760074`, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.3238859603949106, 0.06240159960181445]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.8543025312978362, 0.029010405415971805`]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.25144457040184504`, 0.09740775350534699], 
              "Accuracy" -> 
              PlusMinus[0.9041671308071711, 0.036347930428302075`], 
              "EvaluationTime" -> 8.897120108986162*^-6, "TestSize" -> 78, 
              "TrainingSize" -> 156, "TrainingTime" -> 0.027476969442122624`, 
              "TrainingMemory" -> 122661.33333333333`, "ModelMemory" -> 9088.,
               "ExperimentCount" -> 2, "ModelUtility" -> 1.5943155853538462`, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.22406552018632114`, 0.07994684126499685], 
                PlusMinus[0.3569379946572904, 0.1569295808802805]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.9041671308071711, 0.05140373617589849], 
                PlusMinus[0.9041671308071711, 0.05140373617589849]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 8.897120108986162*^-6, "MeanCrossEntropy" -> 
             PlusMinus[0.25144457040184504`, 0.09740775350534699], 
             "ModelMemory" -> 9088., "TrainingMemory" -> 122661.33333333333`, 
             "TrainingTime" -> 0.06081558898289256], "Index" -> 8], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 1.], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.9000536566376985, 0.043917400971047606`], 
              "Accuracy" -> PlusMinus[0.6321854444371859, 0.0252897410812465],
               "EvaluationTime" -> 5.3745550243387374`*^-6, "TestSize" -> 372,
               "TrainingSize" -> 9, "TrainingTime" -> 0.025013271207972938`, 
              "TrainingMemory" -> 88749.33333333333, "ModelMemory" -> 9088., 
              "ExperimentCount" -> 2, "ModelUtility" -> 0.4752685837432628, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.9413843020920968, 0.057243840459344435`], 
                PlusMinus[0.8812492628147692, 0.03861200358862224]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.6349081373787606, 0.03549943791121597], 
                PlusMinus[0.6294453646846947, 0.03561260523929774]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.5515188005599861, 0.06992660684164972], "Accuracy" -> 
              PlusMinus[0.8177860322767576, 0.04478152616882212], 
              "EvaluationTime" -> 4.832124788080485*^-6, "TestSize" -> 155, 
              "TrainingSize" -> 40, "TrainingTime" -> 0.02257476170942069, 
              "TrainingMemory" -> 94600, "ModelMemory" -> 9088, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.7638171365343905, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.5515188005599861, 0.04944557788309615]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.8177860322767576, 0.03166532082585695]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.42366890426946213`, 0.05685667705483972], 
              "Accuracy" -> 
              PlusMinus[0.8571803771952196, 0.04869245607621542], 
              "EvaluationTime" -> 8.013998557427535*^-6, "TestSize" -> 78, 
              "TrainingSize" -> 156, "TrainingTime" -> 0.0435060869350655, 
              "TrainingMemory" -> 125506.66666666666`, "ModelMemory" -> 9088.,
               "ExperimentCount" -> 2, "ModelUtility" -> 0.9928776658742899, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.4076918267289, 0.06301071589758094], 
                PlusMinus[0.4558449928981518, 0.08941952677700231]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.8291671308071713, 0.06301167219942883], 
                PlusMinus[0.8791671308071711, 0.05582385696411831]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 8.013998557427535*^-6, "MeanCrossEntropy" -> 
             PlusMinus[0.42366890426946213`, 0.05685667705483972], 
             "ModelMemory" -> 9088., "TrainingMemory" -> 125506.66666666666`, 
             "TrainingTime" -> 0.07939587987680481], "Index" -> 9], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 10000.], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[1.790668066340689, 0.006850710317640427], "Accuracy" -> 
              PlusMinus[0.515203262799247, 0.03918076233847278], 
              "EvaluationTime" -> 4.7481070612687445`*^-6, "TestSize" -> 372, 
              "TrainingSize" -> 9, "TrainingTime" -> 0.00731689931119946, 
              "TrainingMemory" -> 69184., "ModelMemory" -> 9088., 
              "ExperimentCount" -> 2, "ModelUtility" -> 0.24103377769529227`, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[1.7905824016909282`, 0.00968679522277587], 
                PlusMinus[1.790753759808034, 0.009688424404467124]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.5445171380499655, 0.0365937560486483], 
                PlusMinus[0.4857353147441854, 0.03668979783007068]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[1.7871588829861331`, 0.01575127813903345], "Accuracy" -> 
              PlusMinus[0.5944934303181705, 0.05607402370823019], 
              "EvaluationTime" -> 4.878555637108025*^-6, "TestSize" -> 155, 
              "TrainingSize" -> 40, "TrainingTime" -> 0.00832667631035401, 
              "TrainingMemory" -> 76352, "ModelMemory" -> 9088, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.2412665666355453, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[1.7871588829861331`, 0.011137835584465973`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.5944934303181705, 0.0396503224125048]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[1.7739035927512228`, 0.04464136557300834], "Accuracy" -> 
              PlusMinus[0.5041671308071717, 0.11380410105953834`], 
              "EvaluationTime" -> 9.701156148464912*^-6, "TestSize" -> 39, 
              "TrainingSize" -> 156, "TrainingTime" -> 0.010419397588255675`, 
              "TrainingMemory" -> 105288, "ModelMemory" -> 9088, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.2422784477193382, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[1.7739035927512228`, 0.03156621231810188]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.5041671308071717, 0.08047165158603871]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 9.701156148464912*^-6, "MeanCrossEntropy" -> 
             PlusMinus[1.7739035927512228`, 0.04464136557300834], 
             "ModelMemory" -> 9088, "TrainingMemory" -> 105288, 
             "TrainingTime" -> 0.020341146296519053`], "Index" -> 10], 
         Association[
          "Value" -> "GradientBoostedTrees", "Options" -> 
           Association[
            "BoostingMethod" -> Association["Value" -> "Gradient"], 
             MaxTrainingRounds -> Association["Value" -> 50], "LeavesNumber" -> 
             Association["Value" -> 60], "LearningRate" -> 
             Association["Value" -> 0.004], ValidationSet -> 
             Association["Value" -> Automatic], "MaxBinNumber" -> 
             Association["Value" -> 255], "ThreadNumber" -> 
             Association["Value" -> 4], "MaxDepth" -> 
             Association["Value" -> 6], "LeafSize" -> 
             Association["Value" -> 35], "FeatureFraction" -> 
             Association["Value" -> 1], "BaggingFraction" -> 
             Association["Value" -> 1], "BaggingFrequency" -> 
             Association["Value" -> 0], "MinGainToSplit" -> 
             Association["Value" -> 0], "L1Regularization" -> 
             Association["Value" -> 0], "L2Regularization" -> 
             Association["Value" -> 0], "LossFunction" -> 
             Association["Value" -> Automatic]]] -> Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[1.7917581568393282`, 0.01582338099193028], "Accuracy" -> 
              PlusMinus[0.16768614755373437`, 0.0422142402282056], 
              "EvaluationTime" -> 0.000012184781380513179`, "TestSize" -> 155,
               "TrainingSize" -> 40, "TrainingTime" -> 0.026305264856984527`, 
              "TrainingMemory" -> 88512, "ModelMemory" -> 20248, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.24064609731805153`, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[1.7917581568393282`, 0.011188820000692217`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.16768614755373437`, 0.029849975528002125`]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[1.5453581391227509`, 0.02108883030528478], "Accuracy" -> 
              PlusMinus[0.6541671308071716, 0.054661152695177496`], 
              "EvaluationTime" -> 0.0007254382213900316, "TestSize" -> 78, 
              "TrainingSize" -> 156, "TrainingTime" -> 0.2929096964980118, 
              "TrainingMemory" -> 2.530205333333333*^6, "ModelMemory" -> 
              562229.3333333333, "ExperimentCount" -> 2, "ModelUtility" -> 
              0.27873020792960834`, "MeanCrossEntropyHistory" -> {
                PlusMinus[1.5468940251936314`, 0.03066143177001211], 
                PlusMinus[1.5439916138953875`, 0.028921562804941785`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.6541671308071715, 0.07730254347646667], 
                PlusMinus[0.6541671308071715, 0.07730254347646667]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[1.791758290726476, 0.006857923490034339], "Accuracy" -> 
              PlusMinus[0.1692502560135636, 0.01954221813611477], 
              "EvaluationTime" -> 0.000011947652401551096`, "TestSize" -> 372,
               "TrainingSize" -> 9, "TrainingTime" -> 0.018178042208095966`, 
              "TrainingMemory" -> 53906.666666666664`, "ModelMemory" -> 
              20248., "ExperimentCount" -> 2, "ModelUtility" -> 
              0.24088672035412936`, "MeanCrossEntropyHistory" -> {
                PlusMinus[1.7917582907264757`, 0.009698568409323592], 
                PlusMinus[1.7917582907264757`, 0.009698568409323592]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.16660560462006804`, 0.027202152025271525`], 
                PlusMinus[0.17196359132315528`, 0.027553119768810315`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.000011947652401551096`, "MeanCrossEntropy" -> 
             PlusMinus[1.791758290726476, 0.006857923490034339], 
             "ModelMemory" -> 20248., "TrainingMemory" -> 53906.666666666664`,
              "TrainingTime" -> 0.06175244716277166], "Index" -> 11], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 1.*^-6], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[4.715877393318203, 1.7390346145761482`], "Accuracy" -> 
              PlusMinus[0.8465378451273007, 0.041653357683123476`], 
              "EvaluationTime" -> 5.75079230098254*^-6, "TestSize" -> 155, 
              "TrainingSize" -> 40, "TrainingTime" -> 0.025722839603272273`, 
              "TrainingMemory" -> 94768, "ModelMemory" -> 9088, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.08530186949611535, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[4.715877393318203, 1.2296831686849283`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.8465378451273007, 0.029453371676925386`]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[1.405972953677448, 0.932751773800336], "Accuracy" -> 
              PlusMinus[0.8291671308071713, 0.08911196141223997], 
              "EvaluationTime" -> 9.582527880345097*^-6, "TestSize" -> 39, 
              "TrainingSize" -> 156, "TrainingTime" -> 0.028240685051359318`, 
              "TrainingMemory" -> 122304, "ModelMemory" -> 9088, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.2712310298814893, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[1.405972953677448, 0.6595551044179983]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.8291671308071713, 0.06301167219942883]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 9.582527880345097*^-6, "MeanCrossEntropy" -> 
             PlusMinus[1.405972953677448, 0.932751773800336], "ModelMemory" -> 
             9088, "TrainingMemory" -> 122304, "TrainingTime" -> 
             0.06102369591747142], "Index" -> 12]], 
        TypeSystem`Assoc[
         TypeSystem`Struct[{"Value", "Options"}, {
           TypeSystem`Atom[
            TypeSystem`Enumeration[
            "DecisionTree", "GradientBoostedTrees", "LogisticRegression", 
             "NaiveBayes", "NearestNeighbors", "RandomForest"]], 
           TypeSystem`Assoc[TypeSystem`AnyType, 
            TypeSystem`Struct[{"Value"}, {TypeSystem`AnyType}], 
            TypeSystem`AnyLength]}], 
         TypeSystem`Struct[{"Experiments", "PredictedPerformances", "Index"}, {
           TypeSystem`Vector[
            
            TypeSystem`Struct[{
             "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
              "TrainingSize", "TrainingTime", "TrainingMemory", "ModelMemory",
               "ExperimentCount", "ModelUtility", "MeanCrossEntropyHistory", 
              "AccuracyHistory"}, {TypeSystem`AnyType, TypeSystem`AnyType, 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Vector[TypeSystem`AnyType, TypeSystem`AnyLength], 
              TypeSystem`Vector[TypeSystem`AnyType, TypeSystem`AnyLength]}], 
            TypeSystem`AnyLength], 
           
           TypeSystem`Struct[{
            "EvaluationTime", "MeanCrossEntropy", "ModelMemory", 
             "TrainingMemory", "TrainingTime"}, {
             TypeSystem`Atom[Real], TypeSystem`AnyType, 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Real]}], 
           TypeSystem`Atom[Integer]}], 12], 
        Association["ID" -> 214108570772708]], "MaxTrainingSize" -> 195, 
      "LastReportingTime" -> 3.7536230118848263`17.32702564208046*^9, 
      "PreprocessorEvaluationTime" -> 3.9716334837204`2.*^-6, 
      "PreprocessorMemory" -> 39280, "RoundPartitioning" -> Dataset[{
         Association[
         "TrainingSizes" -> 9, "TimeBudgets" -> 0.6400000000000001, 
          "ElapsedTimes" -> 0.7300848999999998, "ExperimentCounts" -> 26], 
         Association[
         "TrainingSizes" -> 40, "TimeBudgets" -> 0.8, "ElapsedTimes" -> 
          0.8896480999999999, "ExperimentCounts" -> 12], 
         Association[
         "TrainingSizes" -> 156, "TimeBudgets" -> 1., "ElapsedTimes" -> 
          1.1249966, "ExperimentCounts" -> 19]}, 
        TypeSystem`Vector[
         TypeSystem`Struct[{
          "TrainingSizes", "TimeBudgets", "ElapsedTimes", 
           "ExperimentCounts"}, {
           TypeSystem`Atom[Integer], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Integer]}], 3], 
        Association[
        "Origin" -> HoldComplete[GeneralUtilities`AssociationTranspose, 
           Dataset`DatasetHandle[214117160707300]], "ID" -> 
         214121455674596]]], "Log" -> 
    Association["Example" -> MachineLearning`MLDataset[
        Association[
        "f1" -> Association[
          "Type" -> "NumericalVector", "Weight" -> 1, 
           "Values" -> {{0.5844366191789032, 0.1401210988747775, 
            4.67395815368755, 0.6196078431372549, 0.012848434193929035`, 
            179557.26526421332`, 41584.309090885974`, 0.584496306198611, 
            0.13536558948856112`}}, "ID" -> 6072081202834183359]], 
        Association[
        "ExampleNumber" -> 1, "ExampleWeights" -> 1, "RawExample" -> False]], 
      "TrainingTime" -> 3.3624818409778574`, "MaxTrainingMemory" -> 3679040, 
      "DataMemory" -> 65632, "FunctionMemory" -> 254768, 
      "LanguageVersion" -> {11.3, 0}, "Date" -> 
      DateObject[{2018, 12, 12, 17, 3, 32.4303649`9.26352673717439}, 
        "Instant", "Gregorian", -6.], "ProcessorCount" -> 4, "ProcessorType" -> 
      "x86-64", "OperatingSystem" -> "Windows", "SystemWordLength" -> 64, 
      "Evaluations" -> {}]]],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{
  3.7530696503723373`*^9, 3.753114488472117*^9, {3.753117076248904*^9, 
   3.7531170818529444`*^9}, {3.7531319536771173`*^9, 3.7531319619750304`*^9}, 
   3.7531370339836597`*^9, 3.7536303044114494`*^9, 3.7536446124902053`*^9},
 CellLabel->"Out[73]=",ExpressionUUID->"81690813-c6ae-4258-9efb-4bc8703846bc"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Segmentation Based Feature Classification Accuracy: 95.24%", \
"Subsubsection",
 CellChangeTimes->{{3.7536404368948765`*^9, 
  3.753640452423401*^9}},ExpressionUUID->"a195ecc1-8c08-40dc-a217-\
eb80d2665b69"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"labelTestStat", " ", "=", " ", 
   RowBox[{"ConstantArray", "[", 
    RowBox[{"0", ",", 
     RowBox[{"Length", "[", "testFiles", "]"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"correctLabelsStat", " ", "=", " ", "0"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"For", "[", 
  RowBox[{
   RowBox[{"i", "=", "1"}], ",", 
   RowBox[{"i", "\[LessEqual]", 
    RowBox[{"Length", "[", "testFiles", "]"}]}], ",", 
   RowBox[{"i", "++"}], ",", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"labelTestStat", "[", 
      RowBox[{"[", "i", "]"}], "]"}], " ", "=", " ", 
     RowBox[{"cStat", "[", 
      RowBox[{"featMatrixTestingStat", "[", 
       RowBox[{"[", "i", "]"}], "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
    " ", 
    RowBox[{"If", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"labelTestStat", "[", 
        RowBox[{"[", "i", "]"}], "]"}], " ", "\[Equal]", " ", 
       RowBox[{"classTest", "[", 
        RowBox[{"[", "i", "]"}], "]"}]}], ",", 
      RowBox[{"correctLabelsStat", " ", "=", " ", 
       RowBox[{"correctLabelsStat", "+", "1"}]}], ",", 
      RowBox[{"correctLabelsStat", " ", "=", " ", "correctLabelsStat"}]}], 
     "]"}], ";"}]}], "]"}], "\[IndentingNewLine]", 
 RowBox[{"N", "[", 
  RowBox[{"correctLabelsStat", "/", 
   RowBox[{"Length", "[", "classTest", "]"}]}], "]"}]}], "Input",
 CellChangeTimes->{{3.7530694192518644`*^9, 3.753069456715652*^9}, {
  3.753069712554164*^9, 3.7530697138065352`*^9}, {3.7531143897805147`*^9, 
  3.753114390188424*^9}},
 CellLabel->"In[74]:=",ExpressionUUID->"2e3e6c20-e0b6-434b-8dd0-7bbc671762f3"],

Cell[BoxData["0.9523809523809523`"], "Output",
 CellChangeTimes->{{3.7530696902102385`*^9, 3.7530697352830896`*^9}, {
   3.7531144909225655`*^9, 3.7531144935385747`*^9}, {3.753117078226618*^9, 
   3.7531170833928103`*^9}, {3.7531319561854825`*^9, 3.7531319641590705`*^9}, 
   3.753137036157442*^9, 3.7536303180868893`*^9, 3.7536446166151724`*^9},
 CellLabel->"Out[77]=",ExpressionUUID->"22b0ad33-5904-4da0-a3ee-96d16c6028aa"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ClassifierInformation", "[", "cStat", "]"}]], "Input",
 CellChangeTimes->{{3.7532153128920393`*^9, 3.753215317753625*^9}, {
  3.7536275732405357`*^9, 3.7536276083167453`*^9}, {3.7536303227773533`*^9, 
  3.753630345332114*^9}},
 CellLabel->"In[78]:=",ExpressionUUID->"80ca6dee-d351-455f-8f9a-c7b80656e510"],

Cell[BoxData[
 TagBox[
  StyleBox[
   FrameBox[GridBox[{
      {
       ItemBox[
        FrameBox[
         StyleBox["\<\"Classifier information\"\>", "SuggestionsBarText",
          StripOnInput->False,
          FontSize->12,
          FontWeight->Bold],
         FrameMargins->{{10, 5}, {-5, 5}},
         FrameStyle->None,
         StripOnInput->False],
        Alignment->{Left, Bottom},
        Background->RGBColor[0.93119, 0.93119, 0.93119],
        Frame->{{False, False}, {True, False}},
        FrameStyle->Opacity[0.1],
        ItemSize->{Automatic, 1},
        StripOnInput->False]},
      {
       ItemBox[
        TagBox[
         FrameBox[
          TagBox[GridBox[{
             {
              
              TemplateBox[{
               TemplateBox[{5}, "Spacer1"],StyleBox["\"Input type\"", 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], 
              TemplateBox[{"\"NumericalVector\"",StyleBox[
                 TemplateBox[{"\" (length: \"", "9", "\")\""}, "RowDefault"], 
                 GrayLevel[0.5], StripOnInput -> False]},
               "RowDefault"]},
             {
              
              TemplateBox[{
               TemplateBox[{5}, "Spacer1"],StyleBox["\"Number of classes\"", 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], 
              TagBox[
               TooltipBox["6",
                TagBox[
                 RowBox[{"{", 
                   
                   RowBox[{
                    "1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6"}], 
                   "}"}], Short[#, 1]& ]],
               Annotation[#, 
                Short[{1, 2, 3, 4, 5, 6}, 1], "Tooltip"]& ]},
             {
              TemplateBox[{TemplateBox[{5}, "Spacer1"],StyleBox["\"Method\"", 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], 
              TagBox[
               TooltipBox["\<\"LogisticRegression\"\>",
                TemplateBox[{
                  TagBox[
                   
                   DynamicModuleBox[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$ = 
                    Data`UnorderedAssociation[
                    "RowCount" -> 20, "Length" -> 3, "InitialType" -> 
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], 
                    TypeSystem`Atom[String]}], "Shape" -> 
                    TypeSystem`PackageScope`DocumentShape[
                    
                    Association[{"L1Regularization"} -> 
                    TypeSystem`PackageScope`AtomShape[34], {
                    "L2Regularization"} -> 
                    TypeSystem`PackageScope`AtomShape[60], {
                    "OptimizationMethod"} -> 
                    TypeSystem`PackageScope`AtomShape[48.00000000000001]], 1],
                     "InitialData" -> 
                    TypeSystem`PackageScope`CacheHandle[1671926789], "Type" -> 
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], 
                    TypeSystem`Atom[String]}], "HandleQ" -> True, "RowTarget" -> 
                    20, "Data" -> 
                    TypeSystem`PackageScope`CacheHandle[1671926789]], 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$ = 1, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
                    DynamicModule[{
                    TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
                    Style[
                    Grid[{{
                    Item[
                    Annotation[
                    EventHandler[
                    MouseAppearance[
                    Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"L1Regularization\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"L1Regularization\"", FontColor -> 
                    RGBColor[0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 692556065][{
                    Key["L1Regularization"]}]], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    692556065][
                    GeneralUtilities`Slice[
                    Key["L1Regularization"]]], "Mouse"], Background -> 
                    GrayLevel[0.95], Alignment -> {Left, Baseline}], 
                    Pane[
                    Annotation[
                    RawBoxes["0"], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    692556065][
                    GeneralUtilities`Slice[
                    Key["L1Regularization"]]], "Mouse"], 
                    ImageSize -> {{34, Full}, Automatic}, 
                    Alignment -> {Left, Baseline}]}, {
                    Item[
                    Annotation[
                    EventHandler[
                    MouseAppearance[
                    Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"L2Regularization\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"L2Regularization\"", FontColor -> 
                    RGBColor[0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 692556065][{
                    Key["L2Regularization"]}]], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    692556065][
                    GeneralUtilities`Slice[
                    Key["L2Regularization"]]], "Mouse"], Background -> 
                    GrayLevel[0.95], Alignment -> {Left, Baseline}], 
                    Pane[
                    Annotation[
                    RawBoxes["0.01"], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    692556065][
                    GeneralUtilities`Slice[
                    Key["L2Regularization"]]], "Mouse"], 
                    ImageSize -> {{60, Full}, Automatic}, 
                    Alignment -> {Left, Baseline}]}, {
                    Item[
                    Annotation[
                    EventHandler[
                    MouseAppearance[
                    Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"OptimizationMethod\"", FontColor -> 
                    GrayLevel[0.4]]], {{20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"OptimizationMethod\"", FontColor -> 
                    RGBColor[0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 692556065][{
                    Key["OptimizationMethod"]}]], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    692556065][
                    GeneralUtilities`Slice[
                    Key["OptimizationMethod"]]], "Mouse"], Background -> 
                    GrayLevel[0.95], Alignment -> {Left, Baseline}], 
                    Pane[
                    Annotation["LBFGS", 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    692556065][
                    GeneralUtilities`Slice[
                    Key["OptimizationMethod"]]], "Mouse"], 
                    ImageSize -> {{48.00000000000001, Full}, Automatic}, 
                    Alignment -> {Left, Baseline}]}}, 
                    BaseStyle -> {ContextMenu -> {
                    MenuItem["Copy position to clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], 
                    MenuItem["Copy data to clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], Delimiter, 
                    MenuItem["Paste position in new cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], 
                    MenuItem["Paste data in new cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic]}, FontFamily -> "Verdana", 
                    FontSize -> 12}, Alignment -> Left, RowMinHeight -> 1.5, 
                    Dividers -> All, FrameStyle -> GrayLevel[0.85], 
                    BaseStyle -> {FontFamily -> "Verdana", FontSize -> 12}], 
                    LineBreakWithin -> False, ContextMenu -> {}, NumberMarks -> 
                    False, ShowAutoStyles -> False]], 
                    TypeSystem`NestedGrid`PackagePrivate`initialQ = True, 
                    TypeSystem`NestedGrid`PackagePrivate`self = $Failed}, 
                    Dynamic[
                    TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
                    Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
                    
                    Module[{
                    TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
                    TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
                    TypeSystem`NestedGrid`PackagePrivate`LookupCacheValue[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$["Data"]]}, 
                    TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = 
                    If[TypeSystem`NestedGrid`PackagePrivate`tmpData$ === 
                    TypeSystem`NestedGrid`PackagePrivate`$NotCached, 
                    TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
                    TypeSystem`NestedGrid`PackagePrivate`renderGrid[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 692556065][
                    TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
                    Not[
                    FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
                    TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
                    TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
                    TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$; If[
                    FailureQ[
                    TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
                    TypeSystem`SparseGrid[
                    TypeSystem`H["(data no longer present)"]], 
                    If[GeneralUtilities`$DebugMode, 
                    Row[{TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
                    "  ", 
                    TypeSystem`NestedGrid`PackagePrivate`formatState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$]}], 
                    TypeSystem`NestedGrid`PackagePrivate`renderedGrid]]], 
                    TrackedSymbols :> {
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$}], 
                    DynamicModuleValues :> {}], 
                    TypeSystem`NestedGrid`PackagePrivate`$posCell$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
                    TypeSystem`NestedGrid`PackagePrivate`alignBar[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$][
                    TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
                    TypeSystem`PackageScope`Pathbar[
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    692556065]]]], 
                    TrackedSymbols :> {
                    TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
                    TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Framed[
                    Dynamic[
                    Replace[
                    MouseAnnotation[Null], {
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    692556065][Null] -> "", 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    692556065][
                    Pattern[TypeSystem`NestedGrid`PackagePrivate`path, 
                    Blank[]]] :> (
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
                    TypeSystem`NestedGrid`PackagePrivate`path; 
                    TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
                    TypeSystem`NestedGrid`PackagePrivate`path, 
                    TypeSystem`NestedGrid`PackagePrivate`makePathElements]), 
                    Null :> Spacer[10], Blank[] :> Spacer[10]}], 
                    TrackedSymbols :> {}], FrameStyle -> None, ImageMargins -> 
                    0, FrameMargins -> 0, Alignment -> Top, 
                    ImageSize -> {Automatic, 14}]}, 
                    DynamicBox[
                    ToBoxes[
                    Column[
                    If[TypeSystem`NestedGrid`PackagePrivate`$path$$ == {}, {
                    TypeSystem`NestedGrid`PackagePrivate`displayScrollBar[
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$], 
                    TypeSystem`NestedGrid`PackagePrivate`onDesktopShow[
                    TypeSystem`NestedGrid`PackagePrivate`alignBar[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$][
                    TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$]]}, {
                    TypeSystem`NestedGrid`PackagePrivate`$topBar$$, 
                    TypeSystem`NestedGrid`PackagePrivate`displayScrollBar[
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$], 
                    TypeSystem`NestedGrid`PackagePrivate`onDesktopShow[
                    TypeSystem`NestedGrid`PackagePrivate`alignBar[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$][
                    TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$]]}], 
                    Spacings -> 
                    If[TypeSystem`NestedGrid`PackagePrivate`$path$$ == {}, 
                    0, {{}, {0, 0.05, 0}}]], StandardForm], 
                    TrackedSymbols :> {
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
                    Initialization :> Block[{$ContextPath = $ContextPath}, 
                    Needs["TypeSystem`"]], DynamicModuleValues :> {}, 
                    BaseStyle -> {LineBreakWithin -> False}, Deinitialization :> 
                    TypeSystem`NestedGrid`PackagePrivate`deleteState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]], Deploy, 
                   DefaultBaseStyle -> "Deploy"]}, "CopyTag", 
                 DisplayFunction -> (#& ), 
                 InterpretationFunction -> ("Dataset[<>]"& )]],
               Annotation[#, 
                Dataset[
                 Association[
                 "L1Regularization" -> 0, "L2Regularization" -> 0.01, 
                  "OptimizationMethod" -> "LBFGS"], 
                 
                 TypeSystem`Struct[{
                  "L1Regularization", "L2Regularization", 
                   "OptimizationMethod"}, {
                   TypeSystem`Atom[Integer], 
                   TypeSystem`Atom[Real], 
                   TypeSystem`Atom[String]}], 
                 Association["ID" -> 273911695402220]], "Tooltip"]& ]},
             {
              
              TemplateBox[{
               TemplateBox[{5}, "Spacer1"],StyleBox["\"Accuracy\"", 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], 
              TagBox[
               TooltipBox[
                
                TemplateBox[{
                 TemplateBox[{
                   "90.4167130807171162132`3.", "\"%\"", "percent", 
                    "\"Percent\""}, "QuantityPostfix", SyntaxForm -> Mod],
                  StyleBox[
                   TemplateBox[{"\" \[PlusMinus] \"", 
                    
                    TemplateBox[{
                    "3.6347930428302075434`2.", "\"%\"", "percent", 
                    "\"Percent\""}, "QuantityPostfix", SyntaxForm -> Mod]}, 
                    "RowDefault"], {10, 
                    Opacity[0.5]}, StripOnInput -> False]},
                 "RowDefault"],
                
                TemplateBox[{
                 "\"95% confidence interval: [\"", "0.8314712699505669713`3.",
                   "\", \"", "0.9768629916637753263`3.", "\"]\""}, 
                 "RowDefault"],
                TooltipStyle->{}],
               Annotation[#, 
                
                Row[{"95% confidence interval: [", 0.8314712699505669713`3., 
                  ", ", 0.9768629916637753263`3., "]"}], "Tooltip"]& ]},
             {
              TemplateBox[{TemplateBox[{5}, "Spacer1"],StyleBox[
                 TagBox[
                  TooltipBox[
                  "\"Loss\"", "\"Mean cross entropy\"", LabelStyle -> 
                   "TextStyling"], 
                  Annotation[#, "Mean cross entropy", "Tooltip"]& ], 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], 
              TagBox[
               TooltipBox[
                TemplateBox[{"0.2514445704018450356`3.",StyleBox[
                   
                   TemplateBox[{
                    "\" \[PlusMinus] \"", "0.0974077535053469862`2."}, 
                    "RowDefault"], {10, 
                    Opacity[0.5]}, StripOnInput -> False]},
                 "RowDefault"],
                
                TemplateBox[{
                 "\"95% confidence interval: [\"", "0.0566290633911510632`3.",
                   "\", \"", "0.4462600774125390357`3.", "\"]\""}, 
                 "RowDefault"],
                TooltipStyle->{}],
               Annotation[#, 
                
                Row[{"95% confidence interval: [", 0.0566290633911510632`3., 
                  ", ", 0.4462600774125390357`3., "]"}], "Tooltip"]& ]},
             {
              
              TemplateBox[{
               TemplateBox[{5}, "Spacer1"],StyleBox[
                "\"Single evaluation time\"", 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], 
              
              TemplateBox[{
               "1.53`",
                RowBox[{
                 "\"ms\"", "\[InvisibleSpace]", "\"/\"", "\[InvisibleSpace]", 
                  "\"example\""}],"milliseconds per example",FractionBox[
                "\"Milliseconds\"", "\"Examples\""]},
               "Quantity"]},
             {
              
              TemplateBox[{
               TemplateBox[{5}, "Spacer1"],StyleBox[
                "\"Batch evaluation speed\"", 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], 
              
              TemplateBox[{
               "282.`",
                RowBox[{
                 "\"examples\"", "\[InvisibleSpace]", "\"/\"", 
                  "\[InvisibleSpace]", "\"ms\""}],"examples per millisecond",
                FractionBox["\"Examples\"", "\"Milliseconds\""]},
               "Quantity"]},
             {
              
              TemplateBox[{
               TemplateBox[{5}, "Spacer1"],StyleBox["\"Classifier memory\"", 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], 
              TemplateBox[{"257.`","\"kB\"","kilobytes","\"Kilobytes\""},
               "Quantity"]},
             {
              
              TemplateBox[{
               TemplateBox[{5}, "Spacer1"],StyleBox[
                "\"Training examples used\"", 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], 
              TemplateBox[{"195","\"examples\"","examples","\"Examples\""},
               "Quantity"]},
             {
              
              TemplateBox[{
               TemplateBox[{5}, "Spacer1"],StyleBox["\"Training time\"", 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], 
              TemplateBox[{"3.36`","\"s\"","seconds","\"Seconds\""},
               "Quantity"]},
             {
              ItemBox[
               
               DynamicModuleBox[{
                MachineLearning`file4Automation`PackagePrivate`pos$$ = 1}, 
                DynamicBox[ToBoxes[
                  Show[
                   Part[{
                    Graphics[{{{{}, {{{}, {}, {
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.1972245773362196`, -0.1887943233287564}, {
                    3.6888794541139363`, -1.1273637992370085`}, {
                    5.049856007249537, -1.3805327097496352`}}]}, {
                    Hue[0.9060679774997897, 0.6, 0.6], 
                    Directive[
                    Opacity[0]], 
                    
                    Line[{{2.1972245773362196`, -0.371115880122711}, {
                    2.1972245773362196`, -1.1982111529556805`}}]}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6], 
                    AbsolutePointSize[6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 8.96], {0., 0.}], {{{
                    2.1972245773362196`, -0.1887943233287564}}, {{
                    3.6888794541139363`, -1.1273637992370085`}}, {{
                    5.049856007249537, -1.3805327097496352`}}}]}, {
                    Directive[
                    Opacity[0]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledSquare]", FontSize -> 8.96], {0., 0.}], {{{
                    2.1972245773362196`, -0.371115880122711}}, {{
                    2.1972245773362196`, -1.1982111529556805`}}}]}, {}}}, {}, \
{}, {}, {}}}, {{{}, {{{}, {}, {
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    
                    Line[{{2.1972245773362196`, -0.5865770181937513}, {
                    2.1972245773362196`, 0.095024296243923}}]}, {
                    Hue[0.9060679774997897, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    
                    Line[{{3.6888794541139363`, -1.4454637616066262`}, {
                    3.6888794541139363`, -0.8864039521959739}}]}, {
                    Hue[0.1421359549995791, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    
                    Line[{{5.049856007249537, -1.8705636343848864`}, {
                    5.049856007249537, -1.0531065869960556`}}]}}}, {}, {}, \
{}, {}}}}, {DisplayFunction -> Identity, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& }, 
                    DisplayFunction -> Identity, DisplayFunction -> Identity, 
                    DisplayFunction -> Identity, PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.02], 
                    Scaled[0.05]}}, 
                    AxesOrigin -> {2.086414691506906, -1.4670298506995378`}, 
                    PlotRange -> {{2.1344536593519843`, 
                    Log[195]}, {-1.4467403978841284`, -0.1887943233287564}}, 
                    PlotRangeClipping -> True, 
                    ImagePadding -> {{30, 10}, {37, 0}}, DisplayFunction -> 
                    Identity, AspectRatio -> GoldenRatio^(-1), 
                    Axes -> {True, True}, AxesLabel -> {None, None}, 
                    AxesOrigin -> {2.086414691506906, -1.4670298506995378`}, 
                    DisplayFunction :> Identity, 
                    Frame -> {{True, True}, {True, True}}, 
                    FrameLabel -> {{None, None}, {
                    "training examples used", None}}, FrameTicks -> {{
                    Charting`ScaledTicks[{Log, Exp}], {}}, {
                    Charting`ScaledTicks[{Log, Exp}], {}}}, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& }, 
                    GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], ImageMargins -> 0, 
                    ImagePadding -> {{30, 10}, {37, 0}}, ImageSize -> 330, 
                    LabelStyle -> 10, 
                    Method -> {
                    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Exp[#]& )[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Exp[#]& )[
                    Part[#, 2]]}& )}}, PlotRange -> {{2.1344536593519843`, 
                    Log[195]}, {-1.4467403978841284`, -0.1887943233287564}}, 
                    PlotRangeClipping -> True, PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.02], 
                    Scaled[0.05]}}, Ticks -> {
                    Charting`ScaledTicks[{Log, Exp}], 
                    Charting`ScaledTicks[{Log, Exp}]}}], 
                    Graphics[{{{}, {{{}, {}, {
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.1972245773362196`, 0.7429294791733442}, {
                    3.6888794541139363`, 0.8543025312978362}, {
                    5.049856007249537, 0.9041671308071711}}]}, {
                    Hue[0.9060679774997897, 0.6, 0.6], 
                    Directive[
                    Opacity[0]], 
                    
                    Line[{{2.1972245773362196`, 0.753472609005976}, {
                    2.1972245773362196`, 0.891515375008013}}]}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6], 
                    AbsolutePointSize[6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 8.96], {0., 0.}], {{{
                    2.1972245773362196`, 0.7429294791733442}}, {{
                    3.6888794541139363`, 0.8543025312978362}}, {{
                    5.049856007249537, 0.9041671308071711}}}]}, {
                    Directive[
                    Opacity[0]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledSquare]", FontSize -> 8.96], {0., 0.}], {{{
                    2.1972245773362196`, 0.753472609005976}}, {{
                    2.1972245773362196`, 
                    0.891515375008013}}}]}, {}}}, {}, {}, {}, {}}}, {
                    DisplayFunction -> Identity, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Identity, Identity}][#, #2, {6,
                     6}]& }, DisplayFunction -> Identity, DisplayFunction -> 
                    Identity, DisplayFunction -> Identity, 
                    PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.05], 0}}, 
                    AxesOrigin -> {2.086414691506906, 0.7307524545026078}, 
                    PlotRange -> {{2.1344536593519843`, 
                    Log[195]}, {0.7429294791733442, 1}}, PlotRangeClipping -> 
                    True, ImagePadding -> {{30, 10}, {37, 0}}, 
                    DisplayFunction -> Identity, AspectRatio -> 
                    GoldenRatio^(-1), Axes -> {True, True}, 
                    AxesLabel -> {None, None}, 
                    AxesOrigin -> {2.086414691506906, 0.7307524545026078}, 
                    DisplayFunction :> Identity, 
                    Frame -> {{True, True}, {True, True}}, 
                    FrameLabel -> {{None, None}, {
                    "training examples used", None}}, 
                    FrameTicks -> {{Automatic, None}, {
                    Charting`ScaledTicks[{Log, Exp}], {}}}, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Identity, Identity}][#, #2, {6,
                     6}]& }, GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], ImageMargins -> 0, 
                    ImagePadding -> {{30, 10}, {37, 0}}, ImageSize -> 330, 
                    LabelStyle -> 10, 
                    Method -> {
                    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Identity[#]& )[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Identity[#]& )[
                    Part[#, 2]]}& )}}, PlotRange -> {{2.1344536593519843`, 
                    Log[195]}, {0.7429294791733442, 1}}, PlotRangeClipping -> 
                    True, PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.05], 0}}, Ticks -> {
                    Charting`ScaledTicks[{Log, Exp}], Automatic}}], 
                    Graphics[{{{{}, {{{}, {}, 
                    Tooltip[{
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.1972245773362196`, 0.5771677678178925}, {
                    3.6888794541139363`, 0.5583174044541934}, {
                    5.049856007249537, 0.4941594074496034}}]}, 
                    "LogisticRegression"], 
                    Tooltip[{
                    Hue[0.9060679774997897, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.1972245773362196`, 1.4092722098980732`}, {
                    3.6888794541139363`, 0.9742837542898647}, {
                    5.049856007249537, 0.08238053286223235}}]}, "NaiveBayes"], 
                    Tooltip[{
                    Hue[0.1421359549995791, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.560181, 0.691569, 0.194885], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.1972245773362196`, 0.3901228839373885}, {
                    3.6888794541139363`, 0.01996738453028974}, {
                    5.049856007249537, -0.28150188375449886`}}]}, 
                    "DecisionTree"], 
                    Tooltip[{
                    Hue[0.37820393249936934`, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.922526, 0.385626, 0.209179], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.1972245773362196`, 0.1718215624360039}, {
                    3.6888794541139363`, -0.5753144088568956}, {
                    5.049856007249537, -0.9163407022973336}}]}, 
                    "NearestNeighbors"], 
                    Tooltip[{
                    Hue[0.6142719099991583, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.528488, 0.470624, 0.701351], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.1972245773362196`, 0.5826256655621678}, {
                    3.6888794541139363`, 0.09300262852786165}, {
                    5.049856007249537, -0.42405412673140014`}}]}, 
                    "RandomForest"], 
                    Tooltip[{
                    Hue[0.8503398874989481, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.772079, 0.431554, 0.102387], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.1972245773362196`, 1.0720085926903555`}, {
                    3.6888794541139363`, 0.9332966615656086}, {
                    5.049856007249537, 0.3123723296492492}}]}, 
                    "LogisticRegression"], 
                    Tooltip[{
                    Hue[0.08640786499873876, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.363898, 0.618501, 0.782349], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.1972245773362196`, 0.5831913303027962}, {
                    3.6888794541139363`, 0.5831715533730872}, {
                    5.049856007249537, 0.5830950125900226}}]}, 
                    "LogisticRegression"], 
                    Tooltip[{
                    Hue[0.3224758424985268, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[1, 0.75, 0], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.1972245773362196`, -0.1887943233287564}, {
                    3.6888794541139363`, -1.1273637992370085`}, {
                    5.049856007249537, -1.3805327097496352`}}]}, 
                    "LogisticRegression"], 
                    Tooltip[{
                    Hue[0.5585438199983166, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.647624, 0.37816, 0.614037], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.1972245773362196`, -0.10530089894860592`}, {
                    3.6888794541139363`, -0.595079351005644}, {
                    5.049856007249537, -0.85880301495752}}]}, 
                    "LogisticRegression"], 
                    Tooltip[{
                    Hue[0.7946117974981064, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.571589, 0.586483, 0.], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.1972245773362196`, 0.5825887716422534}, {
                    3.6888794541139363`, 0.5806271426816964}, {
                    5.049856007249537, 0.5731825378510422}}]}, 
                    "LogisticRegression"], 
                    Tooltip[{
                    Hue[0.030679774997896203`, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.915, 0.3325, 0.2125], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.1972245773362196`, 0.5831974230481883}, {
                    3.6888794541139363`, 0.5831973483242965}, {
                    5.049856007249537, 0.43525568874446524`}}]}, 
                    "GradientBoostedTrees"], 
                    Tooltip[{
                    Hue[0.266747752497686, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.40082222609352647`, 0.5220066643438841, 0.85], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{3.6888794541139363`, 1.55093498431304}, {
                    5.049856007249537, 0.34072955684317313`}}]}, 
                    "LogisticRegression"]}}, {}, {}, {}, {}}}}, {
                    DisplayFunction -> Identity, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& }, 
                    DisplayFunction -> Identity, DisplayFunction -> Identity, 
                    DisplayFunction -> Identity, PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.02], 
                    Scaled[0.05]}}, 
                    AxesOrigin -> {2.086414691506906, -1.5933005262541844`}, 
                    PlotRange -> {{2.1344536593519843`, 
                    Log[195]}, {-1.5433920260864507`, 1.55093498431304}}, 
                    PlotRangeClipping -> True, 
                    ImagePadding -> {{30, 10}, {37, 0}}, DisplayFunction -> 
                    Identity, AspectRatio -> GoldenRatio^(-1), 
                    Axes -> {True, True}, AxesLabel -> {None, None}, 
                    AxesOrigin -> {2.086414691506906, -1.5933005262541844`}, 
                    DisplayFunction :> Identity, 
                    Frame -> {{True, True}, {True, True}}, 
                    FrameLabel -> {{None, None}, {
                    "training examples used", None}}, FrameTicks -> {{
                    Charting`ScaledTicks[{Log, Exp}], {}}, {
                    Charting`ScaledTicks[{Log, Exp}], {}}}, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& }, 
                    GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], ImageMargins -> 0, 
                    ImagePadding -> {{30, 10}, {37, 0}}, ImageSize -> 330, 
                    LabelStyle -> 10, 
                    Method -> {
                    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Exp[#]& )[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Exp[#]& )[
                    Part[#, 2]]}& )}}, PlotRange -> {{2.1344536593519843`, 
                    Log[195]}, {-1.5433920260864507`, 1.55093498431304}}, 
                    PlotRangeClipping -> True, PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.02], 
                    Scaled[0.05]}}, Ticks -> {
                    Charting`ScaledTicks[{Log, Exp}], 
                    Charting`ScaledTicks[{Log, Exp}]}}]}, 
                    MachineLearning`file4Automation`PackagePrivate`pos$$], 
                   PlotLabel -> Grid[{{
                    Button[
                    Deploy[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{
                    GrayLevel[0.25], 
                    Line[{{0, 0.8}, {-1, 0}, {0, -0.8}}]}, 
                    ImageSize -> {Automatic, 10}, 
                    ImagePadding -> {{1, 1}, {1, 1}}, BaselinePosition -> 
                    Scaled[0.1]], 
                    Graphics[{
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098], 
                    Line[{{0, 0.8}, {-1, 0}, {0, -0.8}}]}, 
                    ImageSize -> {Automatic, 10}, 
                    ImagePadding -> {{1, 1}, {1, 1}}, BaselinePosition -> 
                    Scaled[0.1]]], "LinkHand"]], 
                    MachineLearning`file4Automation`PackagePrivate`pos$$ = 
                    Max[MachineLearning`file4Automation`PackagePrivate`pos$$ - 
                    1, 1], Appearance -> "Frameless"], 
                    Part[{
                    Tooltip[
                    "Learning curve", 
                    "mean cross entropy for best algorithm at each training \
size"], "Accuracy", 
                    Tooltip[
                    "Learning curves for all algorithms", 
                    "mean cross entropy at each training size"]}, 
                    MachineLearning`file4Automation`PackagePrivate`pos$$], 
                    Button[
                    Deploy[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{
                    GrayLevel[0.25], 
                    Line[{{0, 0.8}, {1, 0}, {0, -0.8}}]}, 
                    ImageSize -> {Automatic, 10}, 
                    ImagePadding -> {{1, 1}, {1, 1}}, BaselinePosition -> 
                    Scaled[0.1]], 
                    Graphics[{
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098], 
                    Line[{{0, 0.8}, {1, 0}, {0, -0.8}}]}, 
                    ImageSize -> {Automatic, 10}, 
                    ImagePadding -> {{1, 1}, {1, 1}}, BaselinePosition -> 
                    Scaled[0.1]]], "LinkHand"]], 
                    MachineLearning`file4Automation`PackagePrivate`pos$$ = 
                    Min[MachineLearning`file4Automation`PackagePrivate`pos$$ + 
                    1, 
                    Length[{
                    Graphics[{{{{}, {{{}, {}, {
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.1972245773362196`, -0.1887943233287564}, {
                    3.6888794541139363`, -1.1273637992370085`}, {
                    5.049856007249537, -1.3805327097496352`}}]}, {
                    Hue[0.9060679774997897, 0.6, 0.6], 
                    Directive[
                    Opacity[0]], 
                    
                    Line[{{2.1972245773362196`, -0.371115880122711}, {
                    2.1972245773362196`, -1.1982111529556805`}}]}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6], 
                    AbsolutePointSize[6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 8.96], {0., 0.}], {{{
                    2.1972245773362196`, -0.1887943233287564}}, {{
                    3.6888794541139363`, -1.1273637992370085`}}, {{
                    5.049856007249537, -1.3805327097496352`}}}]}, {
                    Directive[
                    Opacity[0]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledSquare]", FontSize -> 8.96], {0., 0.}], {{{
                    2.1972245773362196`, -0.371115880122711}}, {{
                    2.1972245773362196`, -1.1982111529556805`}}}]}, {}}}, {}, \
{}, {}, {}}}, {{{}, {{{}, {}, {
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    
                    Line[{{2.1972245773362196`, -0.5865770181937513}, {
                    2.1972245773362196`, 0.095024296243923}}]}, {
                    Hue[0.9060679774997897, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    
                    Line[{{3.6888794541139363`, -1.4454637616066262`}, {
                    3.6888794541139363`, -0.8864039521959739}}]}, {
                    Hue[0.1421359549995791, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    
                    Line[{{5.049856007249537, -1.8705636343848864`}, {
                    5.049856007249537, -1.0531065869960556`}}]}}}, {}, {}, \
{}, {}}}}, {DisplayFunction -> Identity, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& }, 
                    DisplayFunction -> Identity, DisplayFunction -> Identity, 
                    DisplayFunction -> Identity, PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.02], 
                    Scaled[0.05]}}, 
                    AxesOrigin -> {2.086414691506906, -1.4670298506995378`}, 
                    PlotRange -> {{2.1344536593519843`, 
                    Log[195]}, {-1.4467403978841284`, -0.1887943233287564}}, 
                    PlotRangeClipping -> True, 
                    ImagePadding -> {{30, 10}, {37, 0}}, DisplayFunction -> 
                    Identity, AspectRatio -> GoldenRatio^(-1), 
                    Axes -> {True, True}, AxesLabel -> {None, None}, 
                    AxesOrigin -> {2.086414691506906, -1.4670298506995378`}, 
                    DisplayFunction :> Identity, 
                    Frame -> {{True, True}, {True, True}}, 
                    FrameLabel -> {{None, None}, {
                    "training examples used", None}}, FrameTicks -> {{
                    Charting`ScaledTicks[{Log, Exp}], {}}, {
                    Charting`ScaledTicks[{Log, Exp}], {}}}, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& }, 
                    GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], ImageMargins -> 0, 
                    ImagePadding -> {{30, 10}, {37, 0}}, ImageSize -> 330, 
                    LabelStyle -> 10, 
                    Method -> {
                    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Exp[#]& )[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Exp[#]& )[
                    Part[#, 2]]}& )}}, PlotRange -> {{2.1344536593519843`, 
                    Log[195]}, {-1.4467403978841284`, -0.1887943233287564}}, 
                    PlotRangeClipping -> True, PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.02], 
                    Scaled[0.05]}}, Ticks -> {
                    Charting`ScaledTicks[{Log, Exp}], 
                    Charting`ScaledTicks[{Log, Exp}]}}], 
                    Graphics[{{{}, {{{}, {}, {
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.1972245773362196`, 0.7429294791733442}, {
                    3.6888794541139363`, 0.8543025312978362}, {
                    5.049856007249537, 0.9041671308071711}}]}, {
                    Hue[0.9060679774997897, 0.6, 0.6], 
                    Directive[
                    Opacity[0]], 
                    
                    Line[{{2.1972245773362196`, 0.753472609005976}, {
                    2.1972245773362196`, 0.891515375008013}}]}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6], 
                    AbsolutePointSize[6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 8.96], {0., 0.}], {{{
                    2.1972245773362196`, 0.7429294791733442}}, {{
                    3.6888794541139363`, 0.8543025312978362}}, {{
                    5.049856007249537, 0.9041671308071711}}}]}, {
                    Directive[
                    Opacity[0]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledSquare]", FontSize -> 8.96], {0., 0.}], {{{
                    2.1972245773362196`, 0.753472609005976}}, {{
                    2.1972245773362196`, 
                    0.891515375008013}}}]}, {}}}, {}, {}, {}, {}}}, {
                    DisplayFunction -> Identity, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Identity, Identity}][#, #2, {6,
                     6}]& }, DisplayFunction -> Identity, DisplayFunction -> 
                    Identity, DisplayFunction -> Identity, 
                    PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.05], 0}}, 
                    AxesOrigin -> {2.086414691506906, 0.7307524545026078}, 
                    PlotRange -> {{2.1344536593519843`, 
                    Log[195]}, {0.7429294791733442, 1}}, PlotRangeClipping -> 
                    True, ImagePadding -> {{30, 10}, {37, 0}}, 
                    DisplayFunction -> Identity, AspectRatio -> 
                    GoldenRatio^(-1), Axes -> {True, True}, 
                    AxesLabel -> {None, None}, 
                    AxesOrigin -> {2.086414691506906, 0.7307524545026078}, 
                    DisplayFunction :> Identity, 
                    Frame -> {{True, True}, {True, True}}, 
                    FrameLabel -> {{None, None}, {
                    "training examples used", None}}, 
                    FrameTicks -> {{Automatic, None}, {
                    Charting`ScaledTicks[{Log, Exp}], {}}}, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Identity, Identity}][#, #2, {6,
                     6}]& }, GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], ImageMargins -> 0, 
                    ImagePadding -> {{30, 10}, {37, 0}}, ImageSize -> 330, 
                    LabelStyle -> 10, 
                    Method -> {
                    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Identity[#]& )[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Identity[#]& )[
                    Part[#, 2]]}& )}}, PlotRange -> {{2.1344536593519843`, 
                    Log[195]}, {0.7429294791733442, 1}}, PlotRangeClipping -> 
                    True, PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.05], 0}}, Ticks -> {
                    Charting`ScaledTicks[{Log, Exp}], Automatic}}], 
                    Graphics[{{{{}, {{{}, {}, 
                    Tooltip[{
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.1972245773362196`, 0.5771677678178925}, {
                    3.6888794541139363`, 0.5583174044541934}, {
                    5.049856007249537, 0.4941594074496034}}]}, 
                    "LogisticRegression"], 
                    Tooltip[{
                    Hue[0.9060679774997897, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.1972245773362196`, 1.4092722098980732`}, {
                    3.6888794541139363`, 0.9742837542898647}, {
                    5.049856007249537, 0.08238053286223235}}]}, "NaiveBayes"], 
                    Tooltip[{
                    Hue[0.1421359549995791, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.560181, 0.691569, 0.194885], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.1972245773362196`, 0.3901228839373885}, {
                    3.6888794541139363`, 0.01996738453028974}, {
                    5.049856007249537, -0.28150188375449886`}}]}, 
                    "DecisionTree"], 
                    Tooltip[{
                    Hue[0.37820393249936934`, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.922526, 0.385626, 0.209179], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.1972245773362196`, 0.1718215624360039}, {
                    3.6888794541139363`, -0.5753144088568956}, {
                    5.049856007249537, -0.9163407022973336}}]}, 
                    "NearestNeighbors"], 
                    Tooltip[{
                    Hue[0.6142719099991583, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.528488, 0.470624, 0.701351], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.1972245773362196`, 0.5826256655621678}, {
                    3.6888794541139363`, 0.09300262852786165}, {
                    5.049856007249537, -0.42405412673140014`}}]}, 
                    "RandomForest"], 
                    Tooltip[{
                    Hue[0.8503398874989481, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.772079, 0.431554, 0.102387], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.1972245773362196`, 1.0720085926903555`}, {
                    3.6888794541139363`, 0.9332966615656086}, {
                    5.049856007249537, 0.3123723296492492}}]}, 
                    "LogisticRegression"], 
                    Tooltip[{
                    Hue[0.08640786499873876, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.363898, 0.618501, 0.782349], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.1972245773362196`, 0.5831913303027962}, {
                    3.6888794541139363`, 0.5831715533730872}, {
                    5.049856007249537, 0.5830950125900226}}]}, 
                    "LogisticRegression"], 
                    Tooltip[{
                    Hue[0.3224758424985268, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[1, 0.75, 0], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.1972245773362196`, -0.1887943233287564}, {
                    3.6888794541139363`, -1.1273637992370085`}, {
                    5.049856007249537, -1.3805327097496352`}}]}, 
                    "LogisticRegression"], 
                    Tooltip[{
                    Hue[0.5585438199983166, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.647624, 0.37816, 0.614037], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.1972245773362196`, -0.10530089894860592`}, {
                    3.6888794541139363`, -0.595079351005644}, {
                    5.049856007249537, -0.85880301495752}}]}, 
                    "LogisticRegression"], 
                    Tooltip[{
                    Hue[0.7946117974981064, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.571589, 0.586483, 0.], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.1972245773362196`, 0.5825887716422534}, {
                    3.6888794541139363`, 0.5806271426816964}, {
                    5.049856007249537, 0.5731825378510422}}]}, 
                    "LogisticRegression"], 
                    Tooltip[{
                    Hue[0.030679774997896203`, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.915, 0.3325, 0.2125], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.1972245773362196`, 0.5831974230481883}, {
                    3.6888794541139363`, 0.5831973483242965}, {
                    5.049856007249537, 0.43525568874446524`}}]}, 
                    "GradientBoostedTrees"], 
                    Tooltip[{
                    Hue[0.266747752497686, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.40082222609352647`, 0.5220066643438841, 0.85], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{3.6888794541139363`, 1.55093498431304}, {
                    5.049856007249537, 0.34072955684317313`}}]}, 
                    "LogisticRegression"]}}, {}, {}, {}, {}}}}, {
                    DisplayFunction -> Identity, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& }, 
                    DisplayFunction -> Identity, DisplayFunction -> Identity, 
                    DisplayFunction -> Identity, PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.02], 
                    Scaled[0.05]}}, 
                    AxesOrigin -> {2.086414691506906, -1.5933005262541844`}, 
                    PlotRange -> {{2.1344536593519843`, 
                    Log[195]}, {-1.5433920260864507`, 1.55093498431304}}, 
                    PlotRangeClipping -> True, 
                    ImagePadding -> {{30, 10}, {37, 0}}, DisplayFunction -> 
                    Identity, AspectRatio -> GoldenRatio^(-1), 
                    Axes -> {True, True}, AxesLabel -> {None, None}, 
                    AxesOrigin -> {2.086414691506906, -1.5933005262541844`}, 
                    DisplayFunction :> Identity, 
                    Frame -> {{True, True}, {True, True}}, 
                    FrameLabel -> {{None, None}, {
                    "training examples used", None}}, FrameTicks -> {{
                    Charting`ScaledTicks[{Log, Exp}], {}}, {
                    Charting`ScaledTicks[{Log, Exp}], {}}}, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& }, 
                    GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], ImageMargins -> 0, 
                    ImagePadding -> {{30, 10}, {37, 0}}, ImageSize -> 330, 
                    LabelStyle -> 10, 
                    Method -> {
                    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Exp[#]& )[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Exp[#]& )[
                    Part[#, 2]]}& )}}, PlotRange -> {{2.1344536593519843`, 
                    Log[195]}, {-1.5433920260864507`, 1.55093498431304}}, 
                    PlotRangeClipping -> True, PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.02], 
                    Scaled[0.05]}}, Ticks -> {
                    Charting`ScaledTicks[{Log, Exp}], 
                    Charting`ScaledTicks[{Log, Exp}]}}]}]], Appearance -> 
                    "Frameless"]}}, Alignment -> {Center, Baseline}, 
                    ItemSize -> {{3, 20, 3}, {2}}]], StandardForm],
                 ImageSizeCache->{297., {106., 111.}}],
                DynamicModuleValues:>{}],
               Alignment->Center,
               StripOnInput->False], "\[SpanFromLeft]"}
            },
            AutoDelete->False,
            ColumnsEqual->False,
            
            GridBoxAlignment->{
             "Columns" -> {Right, {Left}}, "ColumnsIndexed" -> {}, 
              "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
            GridBoxDividers->{"Columns" -> {False, {
                 Opacity[0.15]}, False}},
            
            GridBoxItemSize->{
             "Columns" -> {Automatic, {Automatic}}, "ColumnsIndexed" -> {}, 
              "Rows" -> {{1.}}, "RowsIndexed" -> {}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], 
                Offset[1.1199999999999999`], {
                 Offset[1.75]}, 
                Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
                Offset[0.2], {
                 Offset[0.8]}, 
                Offset[0.2]}, "RowsIndexed" -> {}}],
           "Grid"],
          FrameMargins->{{10, 10}, {10, 5}},
          FrameStyle->None,
          StripOnInput->False],
         Deploy,
         DefaultBaseStyle->"Deploy"],
        Alignment->Center,
        BaseStyle->{
         FontWeight -> "Light", FontSize -> 12, FontFamily -> "Segoe UI", 
          NumberMarks -> False, Deployed -> False},
        StripOnInput->False]}
     },
     DefaultBaseStyle->"Column",
     GridBoxAlignment->{
      "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
       "RowsIndexed" -> {}},
     GridBoxDividers->{
      "Columns" -> {{False}}, "ColumnsIndexed" -> {}, "Rows" -> {{False}}, 
       "RowsIndexed" -> {}},
     GridBoxItemSize->{
      "Columns" -> {{Automatic}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.}}, 
       "RowsIndexed" -> {}},
     GridBoxSpacings->{"Columns" -> {
         Offset[0.27999999999999997`], {
          Offset[0.5599999999999999]}, 
         Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
         Offset[0.2], 
         Offset[1.2], {
          Offset[0.4]}, 
         Offset[0.2]}, "RowsIndexed" -> {}}],
    Background->RGBColor[0.9802, 0.9802, 0.9802],
    FrameMargins->{{0, 0}, {0, 0}},
    FrameStyle->GrayLevel[0.85],
    RoundingRadius->5,
    StripOnInput->False],
   StripOnInput->False,
   LineBreakWithin->False],
  Deploy,
  DefaultBaseStyle->"Deploy"]], "Output",
 CellChangeTimes->{
  3.753215318200387*^9, {3.7536276026060004`*^9, 3.7536276129334335`*^9}, 
   3.7536303464490824`*^9, 3.75364462023549*^9},
 CellLabel->"Out[78]=",ExpressionUUID->"9759bf21-7bc9-499f-aa47-45ca1c018412"]
}, Open  ]],

Cell["\<\
Logistic regression is well-established method for multi-label \
classification. The accuracy for the testing set has jumped to 95%. \
\>", "Text",
 CellChangeTimes->{{3.7536422157399597`*^9, 
  3.7536422828934326`*^9}},ExpressionUUID->"888ffccc-edd1-4b08-92b2-\
d77505c1baa1"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Combined: Stat+Seg", "Section",
 CellChangeTimes->{{3.753074571765786*^9, 3.7530745752474923`*^9}, {
  3.753482277085703*^9, 
  3.7534822809344826`*^9}},ExpressionUUID->"1e6117d7-7638-4d53-95c6-\
93d328f852f1"],

Cell["\<\
The concatenation of the statistical and segmentation features form a new \
feature set. The accuracy is now 85%. This shows that the segmentation and \
statistical feature set don\[CloseCurlyQuote]t quite agree with each other \
and need additional features for better accuracy. Statistical method clearly \
outperforms the segmentation method as depicted in the previous sections. \
\>", "Text",
 CellChangeTimes->{{3.753641134327426*^9, 3.753641142889212*^9}, {
  3.75364229179088*^9, 3.753642372574323*^9}, {3.7536459789596233`*^9, 
  3.7536459886058607`*^9}},ExpressionUUID->"717cb869-3bec-4c9d-9d78-\
37effdbc0ab2"],

Cell[CellGroupData[{

Cell["\<\
Segmentation + Statistical Based Feature Classification Accuracy : 85.71 %\
\>", "Subsubsection",
 CellChangeTimes->{{3.7536406610317883`*^9, 
  3.7536406629947033`*^9}},ExpressionUUID->"a738c30e-d79e-4cba-8153-\
c4cd4d7ee98b"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"featMatrixTrainingOverall", " ", "=", " ", 
   RowBox[{"Join", "[", 
    RowBox[{
    "featMatrixTrainingSeg", ",", "featMatrixTrainingStat", ",", "2"}], 
    "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"featMatrixTestingOverall", " ", "=", " ", 
   RowBox[{"Join", "[", 
    RowBox[{
    "featMatrixTestingSeg", ",", " ", "featMatrixTestingStat", ",", "2"}], 
    "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"trainingSetOverall", " ", "=", " ", 
   RowBox[{"Thread", "[", 
    RowBox[{"featMatrixTrainingOverall", "\[Rule]", "classes"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"cOverall", " ", "=", " ", 
  RowBox[{
  "Classify", "[", "trainingSetOverall", "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"labelTestOverall", " ", "=", " ", 
   RowBox[{"ConstantArray", "[", 
    RowBox[{"0", ",", 
     RowBox[{"Length", "[", "testFiles", "]"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"correctLabelsOverall", " ", "=", " ", "0"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"For", "[", 
  RowBox[{
   RowBox[{"i", "=", "1"}], ",", 
   RowBox[{"i", "\[LessEqual]", 
    RowBox[{"Length", "[", "testFiles", "]"}]}], ",", 
   RowBox[{"i", "++"}], ",", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"labelTestOverall", "[", 
      RowBox[{"[", "i", "]"}], "]"}], " ", "=", " ", 
     RowBox[{"cOverall", "[", 
      RowBox[{"featMatrixTestingOverall", "[", 
       RowBox[{"[", "i", "]"}], "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
    " ", 
    RowBox[{"If", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"labelTestOverall", "[", 
        RowBox[{"[", "i", "]"}], "]"}], " ", "\[Equal]", " ", 
       RowBox[{"classTest", "[", 
        RowBox[{"[", "i", "]"}], "]"}]}], ",", 
      RowBox[{"correctLabelsOverall", " ", "=", " ", 
       RowBox[{"correctLabelsOverall", "+", "1"}]}], ",", 
      RowBox[{
      "correctLabelsOverall", " ", "=", " ", "correctLabelsOverall"}]}], 
     "]"}], ";"}]}], "]"}], "\[IndentingNewLine]", 
 RowBox[{"N", "[", 
  RowBox[{"correctLabelsOverall", "/", 
   RowBox[{"Length", "[", "classTest", "]"}]}], "]"}], "\[IndentingNewLine]", 
 RowBox[{"ClassifierInformation", "[", "cOverall", "]"}]}], "Input",
 CellChangeTimes->{{3.7530697571179857`*^9, 3.753069791206822*^9}, {
   3.753070775052042*^9, 3.753070814588317*^9}, {3.753070950322361*^9, 
   3.7530709763457675`*^9}, {3.753074620643093*^9, 3.753074690517252*^9}, 
   3.7531129181425853`*^9, {3.753114273806491*^9, 3.7531143356451964`*^9}, {
   3.7532154248807116`*^9, 3.753215425197875*^9}, {3.7532190742869854`*^9, 
   3.7532190749472218`*^9}, {3.753630720998928*^9, 3.7536307215913506`*^9}, {
   3.753631280702304*^9, 3.753631282407709*^9}, {3.753638856968093*^9, 
   3.753638866802808*^9}, {3.7536406714230127`*^9, 3.75364068006488*^9}},
 CellLabel->"In[79]:=",ExpressionUUID->"827a0fc5-af5c-4b82-ac16-3301944fac0e"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["ClassifierFunction",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    TemplateBox[{PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquarePlusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              Evaluator -> Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{{
               PointSize[0.13], 
               GrayLevel[0.45], 
               
               PointBox[{{0.9821769431797024, -0.440194219686987}, {
                1.1339776261519132`, 0.8056918676854272}, {0.5279892326667741,
                 0.6574306661126254}, {0.022147046479890797`, 
                1.4937877187998898`}}], 
               GrayLevel[0.7], 
               
               PointBox[{{-0.9815166384819979, 
                0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
               GrayLevel[0.55], 
               AbsoluteThickness[1.5], 
               LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
             Axes -> {False, False}, AxesLabel -> {None, None}, 
              AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
              Frame -> {{True, True}, {True, True}}, 
              FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
              Directive[
                Thickness[Tiny], 
                GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, 
              GridLines -> {None, None}, 
              LabelStyle -> {FontFamily -> "Arial"}, 
              Method -> {"ScalingFunctions" -> None}, 
              PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> True,
               PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
              Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
             ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], Frame -> True, FrameTicks -> None, 
             FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
             GrayLevel[0.94]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TagBox[
                   TooltipBox[
                    TemplateBox[{"\"Mixed\"", 
                    StyleBox[
                    
                    TemplateBox[{"\" (number: \"", "33", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    TagBox[
                    RowBox[{"{", 
                    
                    RowBox[{
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\""}], "}"}], Short[#, 10]& ]], Annotation[#, 
                    
                    Short[{"Numerical", "Numerical", "Numerical", "Numerical",
                     "Numerical", "Numerical", "Numerical", "Numerical", 
                    "Numerical", "Numerical", "Numerical", "Numerical", 
                    "Numerical", "Numerical", "Numerical", "Numerical", 
                    "Numerical", "Numerical", "Numerical", "Numerical", 
                    "Numerical", "Numerical", "Numerical", "Numerical", 
                    "Numerical", "Numerical", "Numerical", "Numerical", 
                    "Numerical", "Numerical", "Numerical", "Numerical", 
                    "Numerical"}, 10], "Tooltip"]& ], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Number of classes: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TagBox[
                   TooltipBox["6", 
                    TagBox[
                    RowBox[{"{", 
                    
                    RowBox[{
                    "1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6"}], 
                    "}"}], Short[#, 1]& ]], Annotation[#, 
                    Short[{1, 2, 3, 4, 5, 6}, 1], "Tooltip"]& ], 
                  "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquareMinusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              Evaluator -> Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{{
               PointSize[0.13], 
               GrayLevel[0.45], 
               
               PointBox[{{0.9821769431797024, -0.440194219686987}, {
                1.1339776261519132`, 0.8056918676854272}, {0.5279892326667741,
                 0.6574306661126254}, {0.022147046479890797`, 
                1.4937877187998898`}}], 
               GrayLevel[0.7], 
               
               PointBox[{{-0.9815166384819979, 
                0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
               GrayLevel[0.55], 
               AbsoluteThickness[1.5], 
               LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
             Axes -> {False, False}, AxesLabel -> {None, None}, 
              AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
              Frame -> {{True, True}, {True, True}}, 
              FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
              Directive[
                Thickness[Tiny], 
                GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, 
              GridLines -> {None, None}, 
              LabelStyle -> {FontFamily -> "Arial"}, 
              Method -> {"ScalingFunctions" -> None}, 
              PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> True,
               PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
              Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
             ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], Frame -> True, FrameTicks -> None, 
             FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
             GrayLevel[0.94]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TagBox[
                   TooltipBox[
                    TemplateBox[{"\"Mixed\"", 
                    StyleBox[
                    
                    TemplateBox[{"\" (number: \"", "33", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    TagBox[
                    RowBox[{"{", 
                    
                    RowBox[{
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\""}], "}"}], Short[#, 10]& ]], Annotation[#, 
                    
                    Short[{"Numerical", "Numerical", "Numerical", "Numerical",
                     "Numerical", "Numerical", "Numerical", "Numerical", 
                    "Numerical", "Numerical", "Numerical", "Numerical", 
                    "Numerical", "Numerical", "Numerical", "Numerical", 
                    "Numerical", "Numerical", "Numerical", "Numerical", 
                    "Numerical", "Numerical", "Numerical", "Numerical", 
                    "Numerical", "Numerical", "Numerical", "Numerical", 
                    "Numerical", "Numerical", "Numerical", "Numerical", 
                    "Numerical"}, 10], "Tooltip"]& ], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Number of classes: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TagBox[
                   TooltipBox["6", 
                    TagBox[
                    RowBox[{"{", 
                    
                    RowBox[{
                    "1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6"}], 
                    "}"}], Short[#, 1]& ]], Annotation[#, 
                    Short[{1, 2, 3, 4, 5, 6}, 1], "Tooltip"]& ], 
                  "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Method: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"LogisticRegression\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox[
                 "\"Number of training examples: \"", 
                  "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                 TagBox["195", "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  ClassifierFunction[
   Association[
   "ExampleNumber" -> 195, "ClassNumber" -> 6, "Input" -> 
    Association["Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
        Association[
        "Input" -> Association[
          "f1" -> Association["Type" -> "Numerical"], "f2" -> 
           Association["Type" -> "Numerical"], "f3" -> 
           Association["Type" -> "Numerical"], "f4" -> 
           Association["Type" -> "Numerical"], "f5" -> 
           Association["Type" -> "Numerical"], "f6" -> 
           Association["Type" -> "Numerical"], "f7" -> 
           Association["Type" -> "Numerical"], "f8" -> 
           Association["Type" -> "Numerical"], "f9" -> 
           Association["Type" -> "Numerical"], "f10" -> 
           Association["Type" -> "Numerical"], "f11" -> 
           Association["Type" -> "Numerical"], "f12" -> 
           Association["Type" -> "Numerical"], "f13" -> 
           Association["Type" -> "Numerical"], "f14" -> 
           Association["Type" -> "Numerical"], "f15" -> 
           Association["Type" -> "Numerical"], "f16" -> 
           Association["Type" -> "Numerical"], "f17" -> 
           Association["Type" -> "Numerical"], "f18" -> 
           Association["Type" -> "Numerical"], "f19" -> 
           Association["Type" -> "Numerical"], "f20" -> 
           Association["Type" -> "Numerical"], "f21" -> 
           Association["Type" -> "Numerical"], "f22" -> 
           Association["Type" -> "Numerical"], "f23" -> 
           Association["Type" -> "Numerical"], "f24" -> 
           Association["Type" -> "Numerical"], "f25" -> 
           Association["Type" -> "Numerical"], "f26" -> 
           Association["Type" -> "Numerical"], "f27" -> 
           Association["Type" -> "Numerical"], "f28" -> 
           Association["Type" -> "Numerical"], "f29" -> 
           Association["Type" -> "Numerical"], "f30" -> 
           Association["Type" -> "Numerical"], "f31" -> 
           Association["Type" -> "Numerical"], "f32" -> 
           Association["Type" -> "Numerical"], "f33" -> 
           Association["Type" -> "Numerical"]], "Output" -> 
         Association[
          "f1" -> Association["Type" -> "Numerical", "Weight" -> 1], "f2" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f3" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f4" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f5" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f6" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f7" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f8" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f9" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f10" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f11" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f12" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f13" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f14" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f15" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f16" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f17" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f18" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f19" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f20" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f21" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f22" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f23" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f24" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f25" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f26" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f27" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f28" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f29" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f30" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f31" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f32" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f33" -> 
           Association["Type" -> "Numerical", "Weight" -> 1]], "Preprocessor" -> 
         MachineLearning`MLProcessor["Sequence", 
           Association["Processors" -> {
              MachineLearning`MLProcessor["Transpose", 
               Association["FeatureNumber" -> 33]], 
              MachineLearning`MLProcessor["WrapMLDataset", 
               Association[
               "FeatureTypes" -> {
                 "Numerical", "Numerical", "Numerical", "Numerical", 
                  "Numerical", "Numerical", "Numerical", "Numerical", 
                  "Numerical", "Numerical", "Numerical", "Numerical", 
                  "Numerical", "Numerical", "Numerical", "Numerical", 
                  "Numerical", "Numerical", "Numerical", "Numerical", 
                  "Numerical", "Numerical", "Numerical", "Numerical", 
                  "Numerical", "Numerical", "Numerical", "Numerical", 
                  "Numerical", "Numerical", "Numerical", "Numerical", 
                  "Numerical"}, 
                "FeatureKeys" -> {
                 "f1", "f2", "f3", "f4", "f5", "f6", "f7", "f8", "f9", "f10", 
                  "f11", "f12", "f13", "f14", "f15", "f16", "f17", "f18", 
                  "f19", "f20", "f21", "f22", "f23", "f24", "f25", "f26", 
                  "f27", "f28", "f29", "f30", "f31", "f32", "f33"}, 
                "FeatureWeights" -> Automatic, "ExampleWeights" -> Automatic, 
                "RawExample" -> Missing["KeyAbsent", "RawExample"]]]}]], 
         "ScalarFeature" -> False, "Invertibility" -> "Perfect", "Missing" -> 
         "Allowed"]], "Processor" -> MachineLearning`MLProcessor["Sequence", 
        Association[
        "Input" -> Association[
          "f1" -> Association["Type" -> "Numerical", "Weight" -> 1], "f2" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f3" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f4" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f5" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f6" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f7" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f8" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f9" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f10" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f11" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f12" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f13" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f14" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f15" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f16" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f17" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f18" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f19" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f20" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f21" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f22" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f23" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f24" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f25" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f26" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f27" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f28" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f29" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f30" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f31" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f32" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f33" -> 
           Association["Type" -> "Numerical", "Weight" -> 1]], "Output" -> 
         Association[
          "(f1f2f3f4f5f6f7f8f9f10f11f12f13f14f15f16f17f18f19f20f21f22f23f24f25\
f26f27f28f29f30f31f32f33)" -> 
           Association["Type" -> "NumericalVector", "Weight" -> 33]], 
         "Processors" -> {
           MachineLearning`MLProcessor["ToVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
             Association[
              "f1" -> Association["Type" -> "Numerical", "Weight" -> 1], "f2" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f3" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f4" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f5" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f6" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f7" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f8" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f9" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f10" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f11" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f12" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f13" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f14" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f15" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f16" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f17" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f18" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f19" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f20" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f21" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f22" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f23" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f24" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f25" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f26" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f27" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f28" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f29" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f30" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f31" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f32" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f33" -> 
               Association["Type" -> "Numerical", "Weight" -> 1]], "Output" -> 
             Association[
              "(f1f2f3f4f5f6f7f8f9f10f11f12f13f14f15f16f17f18f19f20f21f22f23f2\
4f25f26f27f28f29f30f31f32f33)" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 33]], 
             "Version" -> {11.3, 0}, "ID" -> 131408574721192939]], 
           MachineLearning`MLProcessor["ImputeMissing", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Imputed", "Input" -> 
             Association[
              "(f1f2f3f4f5f6f7f8f9f10f11f12f13f14f15f16f17f18f19f20f21f22f23f2\
4f25f26f27f28f29f30f31f32f33)" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 33]], 
             "Imputer" -> (DimensionReducerFunction[
               Association[
               "ExampleNumber" -> 195, "Imputer" -> 
                MachineLearning`MLProcessor["ImputeMissing", 
                  Association[
                  "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                   "Input" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                   "Fill" -> {0.6005034564894642, -1.0289952106540994`, 
                    553.6328238672897, 213.91950569982757`, 81195.38595816356,
                     2203.790905195023, 81661.71872864607, 0., 
                    0.5083586185290612, 0.6414498322094291, 276.8164119336449,
                     106.95975284991378`, 0.1065130063688495, 
                    0.5247830768944663, 80.31028921307265, 41.38058456178675, 
                    16411.52217618273, 409.1379652358299, 16660.566005308712`,
                     0., 0.0786635152383648, 0.07354687522592859, 
                    40.155144606536325`, 20.690292280893374`, 
                    0.45952995498682975`, 0.16593597891729997`, 
                    4.818815382788861, 0.46531925590749096`, 
                    0.011371367289333939`, 141162.7082221702, 
                    32701.4348313918, 0.4595140241607108, 
                    0.10644998317510337`}, "Method" -> "Naive", 
                   "VectorLength" -> 33, "Output" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Type" -> 
                   "NumericalVector"]], "RandomImputer" -> 
                MachineLearning`MLProcessor["ImputeMissing", 
                  Association[
                  "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                   "Input" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                   "Mean" -> {0.6005034564894642, -1.0289952106540994`, 
                    553.6328238672897, 213.91950569982757`, 81195.38595816356,
                     2203.790905195023, 81661.71872864607, 0., 
                    0.5083586185290612, 0.6414498322094291, 276.8164119336449,
                     106.95975284991378`, 0.1065130063688495, 
                    0.5247830768944663, 80.31028921307265, 41.38058456178675, 
                    16411.52217618273, 409.1379652358299, 16660.566005308712`,
                     0., 0.0786635152383648, 0.07354687522592859, 
                    40.155144606536325`, 20.690292280893374`, 
                    0.45952995498682975`, 0.16593597891729997`, 
                    4.818815382788861, 0.46531925590749096`, 
                    0.011371367289333939`, 141162.7082221702, 
                    32701.4348313918, 0.4595140241607108, 
                    0.10644998317510337`}, 
                   "StandardDeviation" -> {0.17909504674600157`, 
                    1.7394119521941984`, 100.10152442847547`, 
                    116.34056005105496`, 57862.368820519005`, 732.24915951163,
                     58370.94814282587, 1., 0.11356345537365015`, 
                    0.11378065021694322`, 50.050762214237736`, 
                    58.17028002552748, 0.08442411233940529, 
                    0.9909154765613413, 67.58388179713928, 35.26838656130087, 
                    14253.383647324345`, 320.64575578095804`, 
                    14536.692973103574`, 1., 0.05403586317436101, 
                    0.051107116689023444`, 33.79194089856964, 
                    17.634193280650436`, 0.07702644275723788, 
                    0.03888059408891359, 0.36556260949185765`, 
                    0.10524545595252087`, 0.005502775157907179, 
                    23660.76217470466, 5481.678770176637, 0.07702071020411537,
                     0.01784400641333647}, "Method" -> "NaiveSampler", 
                   "VectorLength" -> 33, "Output" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Type" -> 
                   "NumericalVector"]], "Preprocessor" -> 
                MachineLearning`MLProcessor["ToMLDataset", 
                  Association[
                  "Input" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Length" -> 33]], "Output" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                   "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
                    Association["Processors" -> {
                    MachineLearning`MLProcessor["List"], 
                    MachineLearning`MLProcessor["WrapMLDataset", 
                    Association[
                    "FeatureTypes" -> {"NumericalVector"}, 
                    "FeatureKeys" -> {"f1"}, "FeatureWeights" -> Automatic, 
                    "ExampleWeights" -> Automatic, "RawExample" -> 
                    Missing["KeyAbsent", "RawExample"]]]}]], "ScalarFeature" -> 
                   True, "Invertibility" -> "Perfect", "Missing" -> 
                   "Allowed"]], "Processor" -> 
                MachineLearning`MLProcessor["Identity"], "Padder" -> 
                MachineLearning`MLProcessor["Identity"], "PostProcessor" -> 
                MachineLearning`MLProcessor["FromMLDataset", 
                  Association[
                  "DatasetFormat" -> Automatic, "Input" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Output" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Length" -> 12]], 
                   "InversePreprocessor" -> 
                   MachineLearning`MLProcessor["Sequence", 
                    Association["Processors" -> {
                    MachineLearning`MLProcessor["List"], 
                    MachineLearning`MLProcessor["WrapMLDataset", 
                    Association[
                    "FeatureTypes" -> {"NumericalVector"}, 
                    "FeatureKeys" -> {"f1"}, "FeatureWeights" -> {1}, 
                    "ExampleWeights" -> 1]]}]], "ScalarFeature" -> True, 
                   "Invertibility" -> "Perfect", "Missing" -> "Allowed"]], 
                "Model" -> Association["Matrix" -> CompressedData["
1:eJy11HswlPsfwHEqiShJRUUUWlJupRQ+bmUjt3SiGzl1SJK7dJJLW7nlUjZJ
RkqxWy4by8rts1isO2fdjsSmjpw6KFSo9DOzz/z+aObM/P75PTPf+fz1zLzn
eV7fj9Kv3gd/WyAkJKQ0fyTmDzliGdMpqBE9XXLiYhnVUMuU2ddgWA+vJQ96
kMI5wJ3TrfZrbMKQF1/f0Xd04ey1/ukJp+dwY98eLvgWwqlvFsrykaVgI3GG
9s8MAze/GpI/Kf4QaZF20a6ZMaC2r2HO2DADvnlt2th8IRV+bzBf+tTtGQYm
bFLXSGGhwZXtFwe6O7DGow4XVddCr7qrrW37G6ibfC3qEFuLabZlwZHCpSDb
ax/HCeiDq+mhfTd2dIF+/N7OwToeQNoruU8dXAh/c7yvW6UKyuzWng1Zycaq
yJ0pExp34Hs/gxrH6MdUfd/BYjIP+6h5/p8CAnEFZ+vJnBe14DCa6fd0DxPW
B3Gk12umoNagfdQlUjpeUCM1M/AZPoxqC2Gb/AEVdka31ixiYQS9vP+vE1yk
SI7wl3izcXB0oUinwlOo5uy0inbggKHzAzfFpmJ0rrT8pKqcgbP+kz6hLQz8
xyTMfmFTNnQs+MG0SEuB7g9LhBbkJuOtX1wujrbzgFdWTjFPysbPrmorYx/W
IvutccMiLMAOuc4ipeU01HNrk+2JYYBJRh3LwZ2Og5tColdcZsHuuD7+lZAC
XBtg07ru4iMgr/jo4jJ6DJISqBs8jZIxWGsXEzlcOPcj9pvzySi8SKU+e7a+
Dg9GPK+O1+AhZ4vj9EHdZrQbHwpTcIsCa2+apl59A5qc79h3aJCHdVOBj9Ri
iiBhpYohXSQRZfJklcx0DsHoAUexw5JlqJ6gct6xmQdGJhn64pLZaPc+ScOv
shYrfCLzu9wKcX/7uPSEJQ1jLV66JYkzwDQOFzmW0dFO1nskAouBH6F6THRb
IQ5oBMsp5jwEat+wnreuK6pab6PuaruDQv/nx2xIK0xpRxVE7NHesv19ER6W
rj58N6kQjS1Imbe0O8F2nLVw4RgHKI0ub80jWfC22TBN6g0XlM/2/CbWMgCJ
6k3e43vqcSo45DHbuRSMDa+ynumkwug02X86vwko9LCesC9NcNdPoS4tOBEO
D8Ze6jfNx3Gbw+Hyrg3wIAw4+pQKWFfSah41U4X2l2wf5CU8h5YWbtwPl06w
br7mdYvOw6h6sXXDmRyQWLxZ9EAkG2PWblvPX92MRj/5f074zyT8zxL+7xD+
0wn/koR/a8L/ZsK/7L/4Lyf8hxP+rxH+ewn/SPg3IvzbEf7nCP/ThP9Rwj+P
8F8tlf7jg0kLrqrbqLVzORXVZD63RE624Zq9F2diknOwf+Ivr72zueD0UnSp
qW0dhB5Zu3l143M0N3z7Pf5EPSiSiygizs3ge7Rcc9lYJ5gs8aFbzfszPHP5
grA2CzuEn3zTHS7C3RNKlf4y6Tj8uq8i60Mprrn5Pk75dA2md+T/uphKQ5cP
5rKHdrXD0zTLqPaGIRhO/1rzp2o28N/z7lPJLpg8urwpSfRP1A10fFxcwUPE
msIjo3zkFf/dc7m/Fdl8V945VQYse/h+Uti8GMmvQn8XbWMgl/1+T6Z8O95+
qpfbY9YNCZtEfutz5aK3UodUt34XdKq1Blldy4EnVWRGunIJPllD2k5eWgoz
B+R0csQKQGbnE+ORTg6q7762nO1yBweq5lIpQT3IvxtHLXIxAt1jlJkSSg14
fbpjMrOOi3rlIe80mbfg5MfRunMWsfgyLuJee1k7kGi5k7E6899JWazDZ0Mj
5vOHu4QaojEgV9peRA2xQ3KrrjIzHR18423ju3tx76ljhR5u18GCHKVld5UN
lgwp+kohLpqJ/XO5yCoPfAp6JxO2XYBEX8e98QeL8YYZRcRNuguzpUiMspvd
QDfVDGlPLYamJodgodb59x7aXRgKTYMx3vNuMWYDyo+e2Eq6z8R5B7WvlnFR
1a61dJB0D6z9ndaUDaeiFNtuU6NUI7pPB8AB5kvM2szJijxWgJ9F5E8P0Xsw
g7srM2u4A0otZ3/4R1SiiHDCd5pJGqb53BnXm+jFpVuN04PjA+HmsmtTHbfZ
8O3j7amjbVzc+FpviIt5wH9lIHr6ozeKtdqUuDmX4tbVgfpztC7s2pDZ9G2u
E0iigSRebSkItoTibsG02/2/bZUMA8H0IWbiTzOZmCnlI4qppMbEZvS3ulp/
KuYJDDu+GDsxXIZ/y3fUjGiyICgtSCWSVY8KTe4VNdNhaJap4mraScXjR7RX
xozUINNH2vGY/Ctkb3apzpq/B6Jz4vmq8/tIfsY91PVjFtzI9Iz3LWjGtmNK
32+LpILJ6yShJUGPkTR5Ys+ddoQx2pPM5k0FeHrzj3UqDoEoUenxqCSpEs/l
/1FFaWMhpdPN10CmFY0uUVQ/szvBa5VvkWfeSxj7/eH+mvHX//WPP/nfT/iv
J/zfJfwnEf59CP9zhP8Swv8Dwv8Ca4H/lYT/LT/5pyUL/GsR/n0I/wqEf2PC
f/+/+KcQ/kkfYh5bjtDQYO1qc/HoXkwNut7KlMuCxPqLB1pC7+N0c/QtTj0L
aSI9Bn56BZgSJJeYUGWEjIVvooU9HoHWfWbP2SAKhqtwppoCz0D4+oBpTQdv
UOz0aHelnsGBPm3FVaZFuPH7kgf0XCa05ERW5n9nw93FGZemyH0YQnewMlEr
BOPLPaJyzg1oqpHyh8htX+zr+2uJdk87uFzRkxBuYOJXvo3WM08m3ONfj/ec
LMTyaZHMiCMZMOi1vqx3PA9l/NOEDTYVAk1rQYj1YCmUSsiTs/MHUPxvhcf9
NZXQNGvpZJtfg5Lk43YSZvlQf0XSCxprQf3yrHKQJxsL3XIPh0cUgrmL2tIb
ZBa0fhI/ZyQRDQuy9+4PuJaDmRFOOjqWvai1fKl2/9LHwP/c3X1+IA2lvozs
kGYXoWqzWfmJgifI2XBUNa/6EApVVbx7KnIXgtmDlaqyN+F2lWnbRG46pJku
7rt5PhqNX+R62pS5wxvlLRe4Y3RQWuFh+I5ShGQLTQrzRzHq5+//LLp7AG4U
H9nuWsLG2S0je1/4VkM0SX37oug8nEv1k7ziU4M3qZkyyqPVkLI6L+ElrQQV
fonW1ugtwamtR3V1Pp8CKZXvh/lvaUhtSApfPf9/jV5p0W1WZQGNfVysJ/w+
Bp81sGc0sjB42kohQ6cAaecNKRl+ezAjWUJMyvsRCNUZbBNZTMES3Wyndr47
GKtfHO074wMBWmdKk496IFt/uf74vB+Xg897vkT1It/3QtNihSyYPmsfGnT5
Pp60jtw3zmFhgJP9Ie3dBXjS7J6MtoMJvtFb9VXx1CP4JvlgxcsxCo7c0q7Z
v8EDTsbZB2mwvIC94wuNX+6OPkS/RKOgv5LoP1Ql6J8l+l8Q/WHugv4aon97
vaD/l12CfjE1Qb+ErqBfepegv81O0B/rI+iX9BD0z1gJ+m0cBf2T+wT9FTsE
/RYSgv68JEF/c4ygf0BP0P8fKaEYdg==
                   "], "Processor" -> 
                  MachineLearning`MLProcessor["Standardize", 
                    Association[
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Mean" -> {0.6005034564894642, -1.0289952106540994`, 
                    553.6328238672897, 213.91950569982757`, 81195.38595816356,
                     2203.790905195023, 81661.71872864607, 0., 
                    0.5083586185290612, 0.6414498322094291, 276.8164119336449,
                     106.95975284991378`, 0.1065130063688495, 
                    0.5247830768944663, 80.31028921307265, 41.38058456178675, 
                    16411.52217618273, 409.1379652358299, 16660.566005308712`,
                     0., 0.0786635152383648, 0.07354687522592859, 
                    40.155144606536325`, 20.690292280893374`, 
                    0.45952995498682975`, 0.16593597891729997`, 
                    4.818815382788861, 0.46531925590749096`, 
                    0.011371367289333939`, 141162.7082221702, 
                    32701.4348313918, 0.4595140241607108, 
                    0.10644998317510337`}, 
                    "StandardDeviation" -> {0.17909504674600157`, 
                    1.7394119521941984`, 100.10152442847547`, 
                    116.34056005105496`, 57862.368820519005`, 732.24915951163,
                     58370.94814282587, 1., 0.11356345537365015`, 
                    0.11378065021694322`, 50.050762214237736`, 
                    58.17028002552748, 0.08442411233940529, 
                    0.9909154765613413, 67.58388179713928, 35.26838656130087, 
                    14253.383647324345`, 320.64575578095804`, 
                    14536.692973103574`, 1., 0.05403586317436101, 
                    0.051107116689023444`, 33.79194089856964, 
                    17.634193280650436`, 0.07702644275723788, 
                    0.03888059408891359, 0.36556260949185765`, 
                    0.10524545595252087`, 0.005502775157907179, 
                    23660.76217470466, 5481.678770176637, 0.07702071020411537,
                     0.01784400641333647}, "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]]]], 
                  "FinalDimension" -> 12, "Method" -> "Linear"], 
                "PerformanceGoal" -> Automatic, "Invertibility" -> 
                "Approximate", "Log" -> 
                Association[
                 "TrainingTime" -> 0.012436038603536499`, "MaxTrainingMemory" -> 
                  213064, "DataMemory" -> 53368, "FunctionMemory" -> 28160, 
                  "LanguageVersion" -> {11.3, 0}, "Date" -> 
                  DateObject[{
                    2018, 12, 12, 17, 3, 50.8202141`9.458611343136802}, 
                    "Instant", "Gregorian", -6.], "ProcessorCount" -> 4, 
                  "ProcessorType" -> "x86-64", "OperatingSystem" -> "Windows",
                   "SystemWordLength" -> 64, "Evaluations" -> {}]]][#, 
               "ImputedVectors", PerformanceGoal -> "Quality"]& ), "Method" -> 
             "DimensionReduction", "VectorLength" -> 33, "Output" -> 
             Association[
              "(f1f2f3f4f5f6f7f8f9f10f11f12f13f14f15f16f17f18f19f20f21f22f23f2\
4f25f26f27f28f29f30f31f32f33)" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 33]], 
             "Type" -> "NumericalVector", "Version" -> {11.3, 0}, "ID" -> 
             4665271693032350131]], 
           MachineLearning`MLProcessor["Standardize", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
             Association[
              "(f1f2f3f4f5f6f7f8f9f10f11f12f13f14f15f16f17f18f19f20f21f22f23f2\
4f25f26f27f28f29f30f31f32f33)" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 33]], 
             "Mean" -> {0.6005034564894642, -1.0289952106540994`, 
              553.6328238672897, 213.91950569982757`, 81195.38595816356, 
              2203.790905195023, 81661.71872864607, 0., 0.5083586185290612, 
              0.6414498322094291, 276.8164119336449, 106.95975284991378`, 
              0.1065130063688495, 0.5247830768944663, 80.31028921307265, 
              41.38058456178675, 16411.52217618273, 409.1379652358299, 
              16660.566005308712`, 0., 0.0786635152383648, 
              0.07354687522592859, 40.155144606536325`, 20.690292280893374`, 
              0.45952995498682975`, 0.16593597891729997`, 4.818815382788861, 
              0.46531925590749096`, 0.011371367289333939`, 141162.7082221702, 
              32701.4348313918, 0.4595140241607108, 0.10644998317510337`}, 
             "StandardDeviation" -> {0.17909504674600157`, 
              1.7394119521941984`, 100.10152442847547`, 116.34056005105496`, 
              57862.368820519005`, 732.24915951163, 58370.94814282587, 1., 
              0.11356345537365015`, 0.11378065021694322`, 50.050762214237736`,
               58.17028002552748, 0.08442411233940529, 0.9909154765613413, 
              67.58388179713928, 35.26838656130087, 14253.383647324345`, 
              320.64575578095804`, 14536.692973103574`, 1., 
              0.05403586317436101, 0.051107116689023444`, 33.79194089856964, 
              17.634193280650436`, 0.07702644275723788, 0.03888059408891359, 
              0.36556260949185765`, 0.10524545595252087`, 
              0.005502775157907179, 23660.76217470466, 5481.678770176637, 
              0.07702071020411537, 0.01784400641333647}, "Output" -> 
             Association[
              "(f1f2f3f4f5f6f7f8f9f10f11f12f13f14f15f16f17f18f19f20f21f22f23f2\
4f25f26f27f28f29f30f31f32f33)" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 33]], 
             "Version" -> {11.3, 0}, "ID" -> 7176549461854214335]]}, 
         "Invertibility" -> "Perfect", "Missing" -> "Imputed"]]], "Output" -> 
    Association["Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
        Association[
        "Input" -> Association["f1" -> Association["Type" -> "Nominal"]], 
         "Output" -> 
         Association["f1" -> Association["Type" -> "Nominal", "Weight" -> 1]],
          "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
           Association["Processors" -> {
              MachineLearning`MLProcessor["List"], 
              MachineLearning`MLProcessor["WrapMLDataset", 
               Association[
               "FeatureTypes" -> {"Nominal"}, "FeatureKeys" -> {"f1"}, 
                "FeatureWeights" -> Automatic, "ExampleWeights" -> Automatic, 
                "RawExample" -> Missing["KeyAbsent", "RawExample"]]]}]], 
         "ScalarFeature" -> True, "Invertibility" -> "Perfect", "Missing" -> 
         "Allowed"]], "Processor" -> MachineLearning`MLProcessor["Sequence", 
        Association[
        "Input" -> Association[
          "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], "Output" -> 
         Association["f1" -> Association["Type" -> "Nominal", "Weight" -> 1]],
          "Processors" -> {
           MachineLearning`MLProcessor["ToVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
             Association[
              "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
             "Output" -> 
             Association[
              "f1" -> Association["Type" -> "NominalVector", "Weight" -> 1]], 
             "Version" -> {11.3, 0}, "ID" -> 5813914443883813252]], 
           MachineLearning`MLProcessor["IntegerEncodeNominalVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
             Association[
              "f1" -> Association["Type" -> "NominalVector", "Weight" -> 1]], 
             "Index" -> {
               Association[1 -> 1, 2 -> 2, 3 -> 3, 4 -> 4, 5 -> 5, 6 -> 6]}, 
             "MissingCode" -> 0, "Version" -> {11.3, 0}, "ID" -> 
             8597679346940496678, "Output" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NominalVector", "Weight" -> 1]]]], 
           MachineLearning`MLProcessor["FromVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
             Association[
              "f1" -> Association["Type" -> "NominalVector", "Weight" -> 1]], 
             "Output" -> 
             Association[
              "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
             "Version" -> {11.3, 0}, "ID" -> 5560749736656336423]], 
           MachineLearning`MLProcessor["FirstValues", 
            Association[
            "Info" -> Association[
              "Type" -> "Nominal", "Weight" -> 1, "SetSize" -> 6], "Key" -> 
             "f1", "Invertibility" -> "Perfect", "Missing" -> "Allowed"]]}, 
         "Invertibility" -> "Perfect", "Missing" -> "Allowed"]], 
      "ProbabilityPostprocessor" -> Identity, "Name" -> "class", "Marginal" -> 
      Association[
       1 -> 0.1691542288557214, 2 -> 0.16417910447761194`, 3 -> 
        0.1691542288557214, 4 -> 0.16417910447761194`, 5 -> 
        0.16417910447761194`, 6 -> 0.1691542288557214]], "Prior" -> Automatic,
     "Utility" -> 
    SparseArray[
     Automatic, {6, 7}, 0., {
      1, {{0, 1, 2, 3, 4, 5, 6}, {{2}, {3}, {4}, {5}, {6}, {7}}}, {1., 1., 1.,
        1., 1., 1.}}], "Threshold" -> 0, "TieBreaker" -> RandomChoice, 
    "PerformanceGoal" -> Automatic, "BatchProcessing" -> Automatic, "Model" -> 
    Association["LogProbabilitiesFunction" -> LinearLayer[
        Association[
        "Type" -> "Linear", "Arrays" -> 
         Association["Weights" -> CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBbCBOamKOsVEOSJIViBWBmHNHi91O
ndv7lky/ZBcwIXTPs+x6uyRH0X0sMiF2QGmG1MS7dpdfFcPlJ25T2fvE2N+u
OCzfbnesud3dk9l7r1/33yde1LgPpP6rite+Vws2weWP/Szcr+wvZG9x5Mb+
TOP7e704l9q/OlO430itaD+MXhfzel/516Q9KReS7Oy8ltlFn5a3f8WUsvfP
dh17kJnsahdsS4o698HkN2yq3vuUSd9ei63HbpM3p92zlDd25Rd22R1ROAl2
8wnfo/uiIpfbwuQl+cX2T+I8vV9p/Yr9f5g22p7O22U3Z6vo/vXpYvthtOn7
3fte1Vjui97lZneaNcdu/r5Qu5TboXYGt3TBZvJ4TrV3q+K1gcmLxE7e41Pz
3+6grJqdYO4ru11iYbZHXkjs/3s9dS9I/YzeDXZCBzXh8p9Fdu9TfS+0//Fq
5QOWKz/aH1bUcGibvGvfra7d+2B03qJg2xnXPfcvUnpqV/Wjz26tg5j9r9CG
/Qpr2MHhwGKQbi81q2QvTL4+0n9v/gN3myj7m3tUTKJsJ4jttdvRu9jOsl0S
7Oa09rC9Nr8U7GDyvq0O+y7tW7H/7hqfA7PdPPdvaRJ10HN02Jf4wmEfjDYx
td83/UjD/qyMm7b2f5fZ7YtWsr9YvnLvp/kiYDc0v5tsp27CDZdXNe2yk35/
ye7R0iS734FldrZ2aXZvgjbukYgysgGpXyn1cy/7trx9MHnOBUfskip32K+U
e7qfLf+YveDJnfZJWkftjosDxaE0AG7LLcQ=
            "], "Biases" -> 
           RawArray["Real32",{-0.6909408569335938, 0.3789137303829193, 
             0.7256603240966797, -0.4746560752391815, -0.8490126729011536}]], 
         "Parameters" -> 
         Association[
          "OutputDimensions" -> {5}, "$OutputSize" -> 5, "$InputSize" -> 33, 
           "$InputDimensions" -> {33}], "Inputs" -> 
         Association[
          "Input" -> NeuralNetworks`TensorT[{33}, NeuralNetworks`RealT]], 
         "Outputs" -> 
         Association[
          "Output" -> NeuralNetworks`TensorT[{5}, NeuralNetworks`RealT]]], 
        Association["Version" -> "11.3.5"]], "Processor" -> 
      MachineLearning`MLProcessor["FirstValues", 
        Association[
        "Info" -> Association["Weight" -> 33, "Type" -> "NumericalVector"], 
         "Key" -> 
         "(f1f2f3f4f5f6f7f8f9f10f11f12f13f14f15f16f17f18f19f20f21f22f23f24f25f\
26f27f28f29f30f31f32f33)", "Invertibility" -> "Perfect", "Missing" -> 
         "Allowed"]], "Method" -> "LogisticRegression", "Options" -> 
      Association[
       "L1Regularization" -> 
        Association["Value" -> 0, "Options" -> Association[]], 
        "L2Regularization" -> 
        Association["Value" -> 1., "Options" -> Association[]], 
        "OptimizationMethod" -> 
        Association["Value" -> "LBFGS", "Options" -> Association[]], 
        MaxIterations -> 
        Association["Value" -> 30, "Options" -> Association[]]]], 
    "TrainingInformation" -> 
    Association[
     "LossName" -> "MeanCrossEntropy", "BestModelInformation" -> Dataset[
        Association[
        "MeanCrossEntropy" -> 
         PlusMinus[0.5158253322414154, 0.09459210520071067], "Accuracy" -> 
         PlusMinus[0.8316693390485722, 0.05081942285260608], "EvaluationTime" -> 
         9.802209858344754*^-6, "TestSize" -> 78, "TrainingSize" -> 156, 
         "TrainingTime" -> 0.03261752772731463, "TrainingMemory" -> 242464., 
         "ModelMemory" -> 9984., "ExperimentCount" -> 2, "ModelUtility" -> 
         0.807749983011578, "MeanCrossEntropyHistory" -> {
           PlusMinus[0.5239890487198626, 0.11519408216201556`], 
           PlusMinus[0.49974828659816767`, 0.16165507164106738`]}, 
         "AccuracyHistory" -> {
           PlusMinus[0.8041671308071714, 0.06595968273784553], 
           PlusMinus[0.8541671308071713, 0.05965745485569516]}, 
         "Configuration" -> {
          "LogisticRegression", "L1Regularization" -> 0, "L2Regularization" -> 
           1., "OptimizationMethod" -> Automatic, MaxIterations -> 30}, 
         "FinalTrainingSize" -> 195], 
        TypeSystem`Struct[{
         "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
          "TrainingSize", "TrainingTime", "TrainingMemory", "ModelMemory", 
          "ExperimentCount", "ModelUtility", "MeanCrossEntropyHistory", 
          "AccuracyHistory", "Configuration", "FinalTrainingSize"}, {
         TypeSystem`AnyType, TypeSystem`AnyType, 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Real], 
          TypeSystem`Vector[TypeSystem`AnyType, 2], 
          TypeSystem`Vector[TypeSystem`AnyType, 2], 
          TypeSystem`Tuple[{
            TypeSystem`Atom[String], TypeSystem`AnyType, TypeSystem`AnyType, 
            TypeSystem`AnyType, TypeSystem`AnyType}], 
          TypeSystem`Atom[Integer]}], 
        Association["ID" -> 59219165177082]], "Configurations" -> Dataset[
        Association[
        Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 1000.], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[1.7779831283986036`, 0.006804572961847963], 
              "Accuracy" -> 
              PlusMinus[0.4991032071912501, 0.02717221832906922], 
              "EvaluationTime" -> 5.403113681478693*^-6, "TestSize" -> 372, 
              "TrainingSize" -> 9, "TrainingTime" -> 0.010178134052737329`, 
              "TrainingMemory" -> 98869.33333333333, "ModelMemory" -> 9984., 
              "ExperimentCount" -> 2, "ModelUtility" -> 0.24275196313513558`, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[1.7779293523782016`, 0.009624646456976395], 
                PlusMinus[1.778036863597802, 0.009620992744387217]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.49112744877033715`, 0.036730328398674995`], 
                PlusMinus[0.5070821137658461, 0.036737576694340676`]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[1.732942221603309, 0.01575019061136155], "Accuracy" -> 
              PlusMinus[0.620800977879887, 0.05536426916276028], 
              "EvaluationTime" -> 6.294696532448017*^-6, "TestSize" -> 155, 
              "TrainingSize" -> 40, "TrainingTime" -> 0.01221602270893028, 
              "TrainingMemory" -> 124568, "ModelMemory" -> 9984, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.24879971483314692`, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[1.732942221603309, 0.011137066586274445`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.620800977879887, 0.03914845016042505]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[1.5856248999172233`, 0.04835933290452735], "Accuracy" -> 
              PlusMinus[0.5541671308071716, 0.11343737375280584`], 
              "EvaluationTime" -> 0.00001289093846901995, "TestSize" -> 39, 
              "TrainingSize" -> 156, "TrainingTime" -> 0.0174239223076583, 
              "TrainingMemory" -> 217160, "ModelMemory" -> 9984, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.2707579337998295, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[1.5856248999172233`, 0.034195212230449024`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.5541671308071716, 0.08021233622060188]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.00001289093846901995, "MeanCrossEntropy" -> 
             PlusMinus[1.5856248999172233`, 0.04835933290452735], 
             "ModelMemory" -> 9984, "TrainingMemory" -> 217160, 
             "TrainingTime" -> 0.031958036937310204`], "Index" -> 1], 
         Association[
          "Value" -> "NaiveBayes", "Options" -> 
           Association["SmoothingParameter" -> Association["Value" -> 0.2]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[10.035210498997035`, 2.177017584627495], "Accuracy" -> 
              PlusMinus[0.3418374607591344, 0.10977658760057489`], 
              "EvaluationTime" -> 0.00002262766892488997, "TestSize" -> 372, 
              "TrainingSize" -> 9, "TrainingTime" -> 0.007564674220545714, 
              "TrainingMemory" -> 69728., "ModelMemory" -> 44648., 
              "ExperimentCount" -> 2, "ModelUtility" -> 0.041252357156798584`,
               "MeanCrossEntropyHistory" -> {
                PlusMinus[12.301792328668117`, 0.9412921267087286], 
                PlusMinus[8.137363689547175, 0.8613294602092387]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.2502249736248641, 0.03164125547206154], 
                PlusMinus[0.4644938560861089, 0.03661183269110097]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[6.110605555902394, 1.2186399736528581`], "Accuracy" -> 
              PlusMinus[0.6263193057585741, 0.055318341578741506`], 
              "EvaluationTime" -> 0.00002642910256431941, "TestSize" -> 155, 
              "TrainingSize" -> 40, "TrainingTime" -> 0.007841407608231885, 
              "TrainingMemory" -> 113560, "ModelMemory" -> 55912, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.06797517592550424, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[6.110605555902394, 0.8617085891949315]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.6263193057585741, 0.03911597445432186]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[2.9017654963370747`, 1.1942881406117134`], "Accuracy" -> 
              PlusMinus[0.6541671308071715, 0.109322305390355], 
              "EvaluationTime" -> 0.0000352985002249851, "TestSize" -> 39, 
              "TrainingSize" -> 156, "TrainingTime" -> 0.06523625491822914, 
              "TrainingMemory" -> 350808, "ModelMemory" -> 78440, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.13753188053683554`, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[2.9017654963370747`, 0.8444892429172155]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.6541671308071715, 0.07730254347646667]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.0000352985002249851, "MeanCrossEntropy" -> 
             PlusMinus[2.9017654963370747`, 1.1942881406117134`], 
             "ModelMemory" -> 78440, "TrainingMemory" -> 350808, 
             "TrainingTime" -> 0.08910999286833213], "Index" -> 2], 
         Association[
          "Value" -> "DecisionTree", "Options" -> 
           Association[
            "DistributionSmoothing" -> Association["Value" -> 1], 
             "FeatureFraction" -> Association["Value" -> 1]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[1.8239046023844792`, 0.04455328706030524], "Accuracy" -> 
              PlusMinus[0.22618673475317144`, 0.022928662086860074`], 
              "EvaluationTime" -> 0.000010463523477277921`, "TestSize" -> 558,
               "TrainingSize" -> 9, "TrainingTime" -> 0.006149007306789547, 
              "TrainingMemory" -> 72140., "ModelMemory" -> 5744., 
              "ExperimentCount" -> 3, "ModelUtility" -> 0.23566994449659606`, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[1.8575860793335779`, 0.03887978236474191], 
                PlusMinus[1.744164132486628, 0.03131883494067372], 
                PlusMinus[1.8723711187553924`, 0.028657773638383895`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.2404522395276422, 0.0310789100211742], 
                PlusMinus[0.24479922180860209`, 0.031401428315758644`], 
                PlusMinus[0.19839260947704931`, 0.02874196638005821]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[1.223847900080879, 0.09919505536438142], "Accuracy" -> 
              PlusMinus[0.6264326210077236, 0.055299753088893185`], 
              "EvaluationTime" -> 9.521640539862095*^-6, "TestSize" -> 155, 
              "TrainingSize" -> 40, "TrainingTime" -> 0.009543960512287477, 
              "TrainingMemory" -> 91864, "ModelMemory" -> 5744, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.3473056338229817, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[1.223847900080879, 0.07014149630832911]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.6264326210077236, 0.039102830407098096`]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.8181199969117283, 0.24743710787827863`], "Accuracy" -> 
              PlusMinus[0.7541671308071713, 0.10017332553025447`], 
              "EvaluationTime" -> 0.000016766128560933924`, "TestSize" -> 39, 
              "TrainingSize" -> 156, "TrainingTime" -> 0.014784759684040725`, 
              "TrainingMemory" -> 174312, "ModelMemory" -> 5872, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.4978512771860333, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.8181199969117283, 0.17496445689791812`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.7541671308071713, 0.07083323777645044]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.000016766128560933924`, "MeanCrossEntropy" -> 
             PlusMinus[0.8181199969117283, 0.24743710787827863`], 
             "ModelMemory" -> 5872, "TrainingMemory" -> 174312, 
             "TrainingTime" -> 0.024629956911840452`], "Index" -> 3], 
         Association[
          "Value" -> "NearestNeighbors", "Options" -> 
           Association[
            "NeighborsNumber" -> Association["Value" -> Automatic], 
             "DistributionSmoothing" -> Association["Value" -> 0.5], 
             "NearestMethod" -> Association["Value" -> Automatic]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[1.6897399397216464`, 0.06199064282219913], "Accuracy" -> 
              PlusMinus[0.48910879776616045`, 0.02819911287198207], 
              "EvaluationTime" -> 0.000011103329521913376`, "TestSize" -> 558,
               "TrainingSize" -> 9, "TrainingTime" -> 0.004529474419039806, 
              "TrainingMemory" -> 61420., "ModelMemory" -> 8784., 
              "ExperimentCount" -> 3, "ModelUtility" -> 0.25376279718769806`, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[1.6732762482030288`, 0.10803120395303548`], 
                PlusMinus[1.6584552091191762`, 0.0960725998128631], 
                PlusMinus[1.7340652135123757`, 0.09609432152820215]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.5230936286505875, 0.03670772431879301], 
                PlusMinus[0.4857917148866705, 0.036712460524060894`], 
                PlusMinus[0.45877720288951584`, 0.03650548159410482]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.8849658834064102, 0.0881151018222117], "Accuracy" -> 
              PlusMinus[0.7091384141552974, 0.052149982032003495`], 
              "EvaluationTime" -> 9.86987190756865*^-6, "TestSize" -> 155, 
              "TrainingSize" -> 40, "TrainingTime" -> 0.003947434707198941, 
              "TrainingMemory" -> 110152, "ModelMemory" -> 17776, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.478555479664638, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.8849658834064102, 0.062306786023429005`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.7091384141552974, 0.036875605933586277`]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.6524582591642527, 0.14331497358263606`], "Accuracy" -> 
              PlusMinus[0.7343344285822554, 0.07136290110504355], 
              "EvaluationTime" -> 0.000014604457897417287`, "TestSize" -> 78, 
              "TrainingSize" -> 156, "TrainingTime" -> 0.006123604381263555, 
              "TrainingMemory" -> 541666.6666666666, "ModelMemory" -> 54768., 
              "ExperimentCount" -> 2, "ModelUtility" -> 0.6341558146439878, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.8774060822934764, 0.1936254387718325], 
                PlusMinus[0.6229323395680256, 0.07014928259370375]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.6791671308071715, 0.07604586980515154], 
                PlusMinus[0.7791671308071713, 0.06855391061337202]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.000014604457897417287`, "MeanCrossEntropy" -> 
             PlusMinus[0.6524582591642527, 0.14331497358263606`], 
             "ModelMemory" -> 54768., "TrainingMemory" -> 541666.6666666666, 
             "TrainingTime" -> 0.01218397989561925], "Index" -> 4], 
         Association[
          "Value" -> "RandomForest", "Options" -> 
           Association[
            "FeatureFraction" -> Association["Value" -> Automatic], 
             "LeafSize" -> Association["Value" -> Automatic], "TreeNumber" -> 
             Association["Value" -> Automatic], "DistributionSmoothing" -> 
             Association["Value" -> 0.5], "Implementation" -> 
             Association["Value" -> Automatic]]] -> Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[1.758650514363234, 0.011973962669030395`], "Accuracy" -> 
              PlusMinus[0.3511802245807132, 0.028306369273959874`], 
              "EvaluationTime" -> 0.00004218098919619367, "TestSize" -> 286, 
              "TrainingSize" -> 9, "TrainingTime" -> 0.012949923080112858`, 
              "TrainingMemory" -> 152741.3333333333, "ModelMemory" -> 
              86333.33333333333, "ExperimentCount" -> 2, "ModelUtility" -> 
              0.245272170336658, "MeanCrossEntropyHistory" -> {
                PlusMinus[1.747086623629162, 0.018655897192565326`], 
                PlusMinus[1.762381179787584, 0.010596374556627788`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.34818500229986993`, 0.04761756750473044], 
                PlusMinus[0.3528003136014915, 0.03502048180398099]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[1.2363339364593298`, 0.04166295808232253], "Accuracy" -> 
              PlusMinus[0.7442246062602669, 0.062352245255318725`], 
              "EvaluationTime" -> 0.00005147755066791273, "TestSize" -> 100, 
              "TrainingSize" -> 40, "TrainingTime" -> 0.0100693255690341, 
              "TrainingMemory" -> 169824, "ModelMemory" -> 87512, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.34702896836802777`, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[1.2363339364593298`, 0.02946016018430114]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.7442246062602669, 0.0440896954422426]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.7747528026076822, 0.14166503278556217`], "Accuracy" -> 
              PlusMinus[0.8291671308071713, 0.08911196141223997], 
              "EvaluationTime" -> 0.00010430060951467778`, "TestSize" -> 39, 
              "TrainingSize" -> 156, "TrainingTime" -> 0.016772099517095955`, 
              "TrainingMemory" -> 244904, "ModelMemory" -> 93080, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.5378441923320983, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.7747528026076822, 0.10017230533968559`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.8291671308071713, 0.06301167219942883]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.00010430060951467778`, "MeanCrossEntropy" -> 
             PlusMinus[0.7747528026076822, 0.14166503278556217`], 
             "ModelMemory" -> 93080, "TrainingMemory" -> 244904, 
             "TrainingTime" -> 0.0339150474764828], "Index" -> 5], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 0.00001], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[2.803673580702073, 0.6049912408334174], "Accuracy" -> 
              PlusMinus[0.4751113627341948, 0.030440060739978844`], 
              "EvaluationTime" -> 5.718180157022719*^-6, "TestSize" -> 372, 
              "TrainingSize" -> 9, "TrainingTime" -> 0.029455913029978707`, 
              "TrainingMemory" -> 145874.66666666666`, "ModelMemory" -> 9984.,
               "ExperimentCount" -> 2, "ModelUtility" -> 0.14768811157860726`,
               "MeanCrossEntropyHistory" -> {
                PlusMinus[3.624280062930892, 0.390678165949354], 
                PlusMinus[2.4867542857259823`, 0.2427873244564086]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.49112744877033715`, 0.036730328398674995`], 
                PlusMinus[0.4592158507469213, 0.03659180856535088]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[4.755198747465707, 1.1061257205207322`], "Accuracy" -> 
              PlusMinus[0.6841208124561856, 0.05326096224224237], 
              "EvaluationTime" -> 0.000015534435488928614`, "TestSize" -> 155,
               "TrainingSize" -> 40, "TrainingTime" -> 0.026063658617580504`, 
              "TrainingMemory" -> 164008, "ModelMemory" -> 9984, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.08679711868686762, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[4.755198747465707, 0.7821489978250655]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.6841208124561856, 0.03766118757401024]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[4.4394831268777075`, 3.082657754893362], "Accuracy" -> 
              PlusMinus[0.7791671308071713, 0.09694987014314357], 
              "EvaluationTime" -> 8.15898866290731*^-6, "TestSize" -> 39, 
              "TrainingSize" -> 156, "TrainingTime" -> 0.025002647387516876`, 
              "TrainingMemory" -> 242408, "ModelMemory" -> 9984, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.08543077618628044, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[4.4394831268777075`, 2.179768202562394]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.7791671308071713, 0.06855391061337202]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 8.15898866290731*^-6, "MeanCrossEntropy" -> 
             PlusMinus[4.4394831268777075`, 3.082657754893362], "ModelMemory" -> 
             9984, "TrainingMemory" -> 242408, "TrainingTime" -> 
             0.0607092222643748], "Index" -> 6], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 1.*^6], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[1.7917442651220203`, 0.0068578204246362235`], 
              "Accuracy" -> 
              PlusMinus[0.4991032071912501, 0.02717221832906922], 
              "EvaluationTime" -> 5.73384135609947*^-6, "TestSize" -> 372, 
              "TrainingSize" -> 9, "TrainingTime" -> 0.008598097787812148, 
              "TrainingMemory" -> 84512., "ModelMemory" -> 9984., 
              "ExperimentCount" -> 2, "ModelUtility" -> 0.24088753908164987`, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[1.7917442305544258`, 0.009698422294416711], 
                PlusMinus[1.79174429968962, 0.009698423011016442]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.49112744877033715`, 0.036730328398674995`], 
                PlusMinus[0.5070821137658461, 0.036737576694340676`]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[1.7916961409679402`, 0.015822328907632122`], 
              "Accuracy" -> PlusMinus[0.607750717740466, 0.05571146666573462],
               "EvaluationTime" -> 5.0609625440019355`*^-6, "TestSize" -> 155,
               "TrainingSize" -> 40, "TrainingTime" -> 0.007764299233954004, 
              "TrainingMemory" -> 106640, "ModelMemory" -> 9984, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.24065337333293432`, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[1.7916961409679402`, 0.011188076064750613`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.607750717740466, 0.03939395586918924]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[1.7915026650116128`, 0.045395660470231164`], 
              "Accuracy" -> 
              PlusMinus[0.5541671308071716, 0.11343737375280584`], 
              "EvaluationTime" -> 0.000012548234583340484`, "TestSize" -> 39, 
              "TrainingSize" -> 156, "TrainingTime" -> 0.011291750329252758`, 
              "TrainingMemory" -> 185104, "ModelMemory" -> 9984, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.239888716600895, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[1.7915026650116128`, 0.03209957935494255]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.5541671308071716, 0.08021233622060188]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.000012548234583340484`, "MeanCrossEntropy" -> 
             PlusMinus[1.7915026650116128`, 0.045395660470231164`], 
             "ModelMemory" -> 9984, "TrainingMemory" -> 185104, 
             "TrainingTime" -> 0.022712785699378096`], "Index" -> 7], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 0.01], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[1.6618923024236008`, 0.22146263238634345`], 
              "Accuracy" -> 
              PlusMinus[0.47783262318616243`, 0.026079567096562364`], 
              "EvaluationTime" -> 6.833810279490017*^-6, "TestSize" -> 372, 
              "TrainingSize" -> 9, "TrainingTime" -> 0.026178635771225964`, 
              "TrainingMemory" -> 145728., "ModelMemory" -> 9984., 
              "ExperimentCount" -> 2, "ModelUtility" -> 0.25316088362428507`, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[1.9330615946941603`, 0.19016244323207301`], 
                PlusMinus[1.5430522549466765`, 0.12588845486761807`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.4804896137594745, 0.03670070264068], 
                PlusMinus[0.47517861852946297`, 0.036680074783736014`]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[1.7930693309179975`, 0.40155362740573236`], 
              "Accuracy" -> 
              PlusMinus[0.6901447303873319, 0.05302790893716556], 
              "EvaluationTime" -> 6.3776087628543386`*^-6, "TestSize" -> 155, 
              "TrainingSize" -> 40, "TrainingTime" -> 0.0273780993711041, 
              "TrainingMemory" -> 164304, "ModelMemory" -> 9984, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.23056680764403087`, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[1.7930693309179975`, 0.2839412929486496]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.6901447303873319, 0.03749639400161249]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.505837151664035, 0.4074969403260993], "Accuracy" -> 
              PlusMinus[0.8541671308071713, 0.08436838175358476], 
              "EvaluationTime" -> 8.053541313467475*^-6, "TestSize" -> 39, 
              "TrainingSize" -> 156, "TrainingTime" -> 0.026737585808769174`, 
              "TrainingMemory" -> 258952, "ModelMemory" -> 9984, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.7354203751449818, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.505837151664035, 0.2881438498173547]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.8541671308071713, 0.05965745485569516]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 8.053541313467475*^-6, "MeanCrossEntropy" -> 
             PlusMinus[0.505837151664035, 0.4074969403260993], "ModelMemory" -> 
             9984, "TrainingMemory" -> 258952, "TrainingTime" -> 
             0.059600618032187434`], "Index" -> 8], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 1.], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[1.2800242282147987`, 0.08389716125492339], "Accuracy" -> 
              PlusMinus[0.4875393280887341, 0.021691126926941747`], 
              "EvaluationTime" -> 7.706000881014305*^-6, "TestSize" -> 558, 
              "TrainingSize" -> 9, "TrainingTime" -> 0.028617230945749632`, 
              "TrainingMemory" -> 145756., "ModelMemory" -> 9984., 
              "ExperimentCount" -> 3, "ModelUtility" -> 0.333079919267823, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[1.2307242819337614`, 0.07607357038479975], 
                PlusMinus[1.222316682419801, 0.06136692557384703], 
                PlusMinus[1.4452630822168433`, 0.08324919471247423]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.4857917148866705, 0.036712460524060894`], 
                PlusMinus[0.4804520911550765, 0.03667841100888294], 
                PlusMinus[0.49636653136047915`, 0.03666925923816177]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.7812563263332842, 0.1122757647202832], "Accuracy" -> 
              PlusMinus[0.7133223684418069, 0.05164045754941714], 
              "EvaluationTime" -> 6.533483756018225*^-6, "TestSize" -> 155, 
              "TrainingSize" -> 40, "TrainingTime" -> 0.02846429933676517, 
              "TrainingMemory" -> 164352, "ModelMemory" -> 9984, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.5374307449596164, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.7812563263332842, 0.07939095459661757]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.7133223684418069, 0.0365153177167689]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.5158253322414154, 0.09459210520071067], "Accuracy" -> 
              PlusMinus[0.8316693390485722, 0.05081942285260608], 
              "EvaluationTime" -> 9.802209858344754*^-6, "TestSize" -> 78, 
              "TrainingSize" -> 156, "TrainingTime" -> 0.03261752772731463, 
              "TrainingMemory" -> 242464., "ModelMemory" -> 9984., 
              "ExperimentCount" -> 2, "ModelUtility" -> 0.807749983011578, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.5239890487198626, 0.11519408216201556`], 
                PlusMinus[0.49974828659816767`, 0.16165507164106738`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.8041671308071714, 0.06595968273784553], 
                PlusMinus[0.8541671308071713, 0.05965745485569516]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 9.802209858344754*^-6, "MeanCrossEntropy" -> 
             PlusMinus[0.5158253322414154, 0.09459210520071067], 
             "ModelMemory" -> 9984., "TrainingMemory" -> 242464., 
             "TrainingTime" -> 0.06938914060489293], "Index" -> 9], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 10000.], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[1.7903582330248096`, 0.006848119866758586], 
              "Accuracy" -> 
              PlusMinus[0.4991032071912501, 0.02717221832906922], 
              "EvaluationTime" -> 6.238684714573524*^-6, "TestSize" -> 372, 
              "TrainingSize" -> 9, "TrainingTime" -> 0.011428317827696025`, 
              "TrainingMemory" -> 96405.33333333333, "ModelMemory" -> 9984., 
              "ExperimentCount" -> 2, "ModelUtility" -> 0.2410741438667017, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[1.7903545846512445`, 0.00968468821358589], 
                PlusMinus[1.7903618814200801`, 0.009684717022320759]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.49112744877033715`, 0.036730328398674995`], 
                PlusMinus[0.5070821137658461, 0.036737576694340676`]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[1.785589144958949, 0.0157287585820799], "Accuracy" -> 
              PlusMinus[0.607750717740466, 0.05571146666573462], 
              "EvaluationTime" -> 7.329441167918924*^-6, "TestSize" -> 155, 
              "TrainingSize" -> 40, "TrainingTime" -> 0.011775476863889326`, 
              "TrainingMemory" -> 113640, "ModelMemory" -> 9984, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.24147751547735555`, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[1.785589144958949, 0.011121911853034802`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.607750717740466, 0.03939395586918924]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[1.766900198771998, 0.04437504018580292], "Accuracy" -> 
              PlusMinus[0.5541671308071716, 0.11343737375280584`], 
              "EvaluationTime" -> 7.789922939867884*^-6, "TestSize" -> 39, 
              "TrainingSize" -> 156, "TrainingTime" -> 0.013705756499978924`, 
              "TrainingMemory" -> 199336, "ModelMemory" -> 9984, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.24323982947934658`, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[1.766900198771998, 0.031377891830806796`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.5541671308071716, 0.08021233622060188]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 7.789922939867884*^-6, "MeanCrossEntropy" -> 
             PlusMinus[1.766900198771998, 0.04437504018580292], "ModelMemory" -> 
             9984, "TrainingMemory" -> 199336, "TrainingTime" -> 
             0.028560513452669682`], "Index" -> 10], 
         Association[
          "Value" -> "GradientBoostedTrees", "Options" -> 
           Association[
            "BoostingMethod" -> Association["Value" -> "Gradient"], 
             MaxTrainingRounds -> Association["Value" -> 50], "LeavesNumber" -> 
             Association["Value" -> 13], "LearningRate" -> 
             Association["Value" -> 0.2], ValidationSet -> 
             Association["Value" -> Automatic], "MaxBinNumber" -> 
             Association["Value" -> 255], "ThreadNumber" -> 
             Association["Value" -> 4], "MaxDepth" -> 
             Association["Value" -> 6], "LeafSize" -> 
             Association["Value" -> 15], "FeatureFraction" -> 
             Association["Value" -> 1], "BaggingFraction" -> 
             Association["Value" -> 1], "BaggingFrequency" -> 
             Association["Value" -> 0], "MinGainToSplit" -> 
             Association["Value" -> 0], "L1Regularization" -> 
             Association["Value" -> 0], "L2Regularization" -> 
             Association["Value" -> 0], "LossFunction" -> 
             Association["Value" -> Automatic]]] -> Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.9638941086540673, 0.15682266885514498`], "Accuracy" -> 
              PlusMinus[0.6452147052701677, 0.0680582274422052], 
              "EvaluationTime" -> 0.0008602518667937413, "TestSize" -> 100, 
              "TrainingSize" -> 40, "TrainingTime" -> 0.1803940135114434, 
              "TrainingMemory" -> 2073008, "ModelMemory" -> 559040, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.4339688839243735, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.9638941086540673, 0.11089037259124539`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.6452147052701677, 0.048124434139919674`]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.5984866608940249, 0.2829946558409406], "Accuracy" -> 
              PlusMinus[0.8041671308071714, 0.09328107789768768], 
              "EvaluationTime" -> 0.0008472958145864421, "TestSize" -> 39, 
              "TrainingSize" -> 156, "TrainingTime" -> 0.5169926294675307, 
              "TrainingMemory" -> 2837552, "ModelMemory" -> 579184, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.6593188435794999, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.5984866608940249, 0.20010744018468227`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.8041671308071714, 0.06595968273784553]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[1.791758290726476, 0.006857923490034339], "Accuracy" -> 
              PlusMinus[0.1692502560135636, 0.01954221813611477], 
              "EvaluationTime" -> 0.000011409644150914514`, "TestSize" -> 372,
               "TrainingSize" -> 9, "TrainingTime" -> 0.01825857762123064, 
              "TrainingMemory" -> 57970.666666666664`, "ModelMemory" -> 
              21272., "ExperimentCount" -> 2, "ModelUtility" -> 
              0.24088533421084016`, "MeanCrossEntropyHistory" -> {
                PlusMinus[1.7917582907264757`, 0.009698568409323592], 
                PlusMinus[1.7917582907264757`, 0.009698568409323592]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.16660560462006804`, 0.027202152025271525`], 
                PlusMinus[0.17196359132315528`, 0.027553119768810315`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.000011409644150914514`, "MeanCrossEntropy" -> 
             PlusMinus[1.791758290726476, 0.006857923490034339], 
             "ModelMemory" -> 21272., "TrainingMemory" -> 57970.666666666664`,
              "TrainingTime" -> 0.21599823987284317`], "Index" -> 11]], 
        TypeSystem`Assoc[
         TypeSystem`Struct[{"Value", "Options"}, {
           TypeSystem`Atom[
            TypeSystem`Enumeration[
            "DecisionTree", "GradientBoostedTrees", "LogisticRegression", 
             "NaiveBayes", "NearestNeighbors", "RandomForest"]], 
           TypeSystem`Assoc[TypeSystem`AnyType, 
            TypeSystem`Struct[{"Value"}, {TypeSystem`AnyType}], 
            TypeSystem`AnyLength]}], 
         TypeSystem`Struct[{"Experiments", "PredictedPerformances", "Index"}, {
           TypeSystem`Tuple[{
             
             TypeSystem`Struct[{
              "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
               "TrainingSize", "TrainingTime", "TrainingMemory", 
               "ModelMemory", "ExperimentCount", "ModelUtility", 
               "MeanCrossEntropyHistory", "AccuracyHistory"}, {
              TypeSystem`AnyType, TypeSystem`AnyType, 
               TypeSystem`Atom[Real], 
               TypeSystem`Atom[Integer], 
               TypeSystem`Atom[Integer], 
               TypeSystem`Atom[Real], 
               TypeSystem`Atom[Real], 
               TypeSystem`Atom[Real], 
               TypeSystem`Atom[Integer], 
               TypeSystem`Atom[Real], 
               TypeSystem`Vector[TypeSystem`AnyType, TypeSystem`AnyLength], 
               TypeSystem`Vector[TypeSystem`AnyType, TypeSystem`AnyLength]}], 
             
             TypeSystem`Struct[{
              "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
               "TrainingSize", "TrainingTime", "TrainingMemory", 
               "ModelMemory", "ExperimentCount", "ModelUtility", 
               "MeanCrossEntropyHistory", "AccuracyHistory"}, {
              TypeSystem`AnyType, TypeSystem`AnyType, 
               TypeSystem`Atom[Real], 
               TypeSystem`Atom[Integer], 
               TypeSystem`Atom[Integer], 
               TypeSystem`Atom[Real], 
               TypeSystem`Atom[Integer], 
               TypeSystem`Atom[Integer], 
               TypeSystem`Atom[Integer], 
               TypeSystem`Atom[Real], 
               TypeSystem`Vector[TypeSystem`AnyType, 1], 
               TypeSystem`Vector[TypeSystem`AnyType, 1]}], 
             
             TypeSystem`Struct[{
              "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
               "TrainingSize", "TrainingTime", "TrainingMemory", 
               "ModelMemory", "ExperimentCount", "ModelUtility", 
               "MeanCrossEntropyHistory", "AccuracyHistory"}, {
              TypeSystem`AnyType, TypeSystem`AnyType, 
               TypeSystem`Atom[Real], 
               TypeSystem`Atom[Integer], 
               TypeSystem`Atom[Integer], 
               TypeSystem`Atom[Real], 
               TypeSystem`Atom[Real], 
               TypeSystem`Atom[Real], 
               TypeSystem`Atom[Integer], 
               TypeSystem`Atom[Real], 
               TypeSystem`Vector[TypeSystem`AnyType, TypeSystem`AnyLength], 
               TypeSystem`Vector[
               TypeSystem`AnyType, TypeSystem`AnyLength]}]}], 
           
           TypeSystem`Struct[{
            "EvaluationTime", "MeanCrossEntropy", "ModelMemory", 
             "TrainingMemory", "TrainingTime"}, {
             TypeSystem`Atom[Real], TypeSystem`AnyType, 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Real]}], 
           TypeSystem`Atom[Integer]}], 11], 
        Association["ID" -> 59214870209786]], "MaxTrainingSize" -> 195, 
      "LastReportingTime" -> 3.7536230336482439`17.327025644598493*^9, 
      "PreprocessorEvaluationTime" -> 6.0833286425739`2.*^-6, 
      "PreprocessorMemory" -> 87672, "RoundPartitioning" -> Dataset[{
         Association[
         "TrainingSizes" -> 9, "TimeBudgets" -> 0.64, "ElapsedTimes" -> 
          0.6522474000000001, "ExperimentCounts" -> 25], 
         Association[
         "TrainingSizes" -> 40, "TimeBudgets" -> 0.7999999999999999, 
          "ElapsedTimes" -> 0.9708761, "ExperimentCounts" -> 11], 
         Association[
         "TrainingSizes" -> 156, "TimeBudgets" -> 1., "ElapsedTimes" -> 
          0.9755123, "ExperimentCounts" -> 13]}, 
        TypeSystem`Vector[
         TypeSystem`Struct[{
          "TrainingSizes", "TimeBudgets", "ElapsedTimes", 
           "ExperimentCounts"}, {
           TypeSystem`Atom[Integer], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Integer]}], 3], 
        Association[
        "Origin" -> HoldComplete[GeneralUtilities`AssociationTranspose, 
           Dataset`DatasetHandle[59223460144378]], "ID" -> 59227755111674]]], 
    "Log" -> Association["Example" -> MachineLearning`MLDataset[
        Association[
        "f1" -> Association[
          "Type" -> "Numerical", "Weight" -> 1, 
           "Values" -> {0.5751080171622525}, "ID" -> 532656395546884122], 
         "f2" -> Association[
          "Type" -> "Numerical", "Weight" -> 1, 
           "Values" -> {-1.5939195907581027`}, "ID" -> 1512662462484881115], 
         "f3" -> Association[
          "Type" -> "Numerical", "Weight" -> 1, 
           "Values" -> {363.2981912283439}, "ID" -> 2265425440888091006], 
         "f4" -> Association[
          "Type" -> "Numerical", "Weight" -> 1, 
           "Values" -> {125.42818406136767`}, "ID" -> 8785436215182638421], 
         "f5" -> Association[
          "Type" -> "Numerical", "Weight" -> 1, 
           "Values" -> {25064.089285714286`}, "ID" -> 8792747564531684129], 
         "f6" -> Association[
          "Type" -> "Numerical", "Weight" -> 1, "Values" -> {1408.}, "ID" -> 
           1657481655600114802], "f7" -> 
         Association[
          "Type" -> "Numerical", "Weight" -> 1, 
           "Values" -> {25208.85714285714}, "ID" -> 4947308378699460124], 
         "f8" -> Association[
          "Type" -> "Numerical", "Weight" -> 1, "Values" -> {0.}, "ID" -> 
           3627401267395692630], "f9" -> 
         Association[
          "Type" -> "Numerical", "Weight" -> 1, 
           "Values" -> {0.4411607268297044}, "ID" -> 7024776114777820182], 
         "f10" -> Association[
          "Type" -> "Numerical", "Weight" -> 1, 
           "Values" -> {0.5999900643046382}, "ID" -> 5185332897161133215], 
         "f11" -> Association[
          "Type" -> "Numerical", "Weight" -> 1, 
           "Values" -> {181.64909561417196`}, "ID" -> 1645269388433298527], 
         "f12" -> Association[
          "Type" -> "Numerical", "Weight" -> 1, 
           "Values" -> {62.714092030683844`}, "ID" -> 143622985837093338], 
         "f13" -> Association[
          "Type" -> "Numerical", "Weight" -> 1, 
           "Values" -> {0.28748526861309515`}, "ID" -> 8604520302049650615], 
         "f14" -> 
         Association[
          "Type" -> "Numerical", "Weight" -> 1, 
           "Values" -> {0.14058423644064247`}, "ID" -> 5971001243224412581], 
         "f15" -> Association[
          "Type" -> "Numerical", "Weight" -> 1, 
           "Values" -> {132.7168182566525}, "ID" -> 1684265572825689022], 
         "f16" -> Association[
          "Type" -> "Numerical", "Weight" -> 1, 
           "Values" -> {70.01391302957524}, "ID" -> 5416421608108403223], 
         "f17" -> Association[
          "Type" -> "Numerical", "Weight" -> 1, 
           "Values" -> {9416.707011265238}, "ID" -> 3254245573824490003], 
         "f18" -> Association[
          "Type" -> "Numerical", "Weight" -> 1, 
           "Values" -> {363.2317900918549}, "ID" -> 2704360040894194566], 
         "f19" -> Association[
          "Type" -> "Numerical", "Weight" -> 1, 
           "Values" -> {9604.723810510663}, "ID" -> 7457278327987325598], 
         "f20" -> Association[
          "Type" -> "Numerical", "Weight" -> 1, "Values" -> {0.}, "ID" -> 
           7287513382915239316], "f21" -> 
         Association[
          "Type" -> "Numerical", "Weight" -> 1, 
           "Values" -> {0.08079650141827124}, "ID" -> 33829344163640969], 
         "f22" -> Association[
          "Type" -> "Numerical", "Weight" -> 1, 
           "Values" -> {0.11550593113568483`}, "ID" -> 8931075607384670542], 
         "f23" -> Association[
          "Type" -> "Numerical", "Weight" -> 1, 
           "Values" -> {66.35840912832624}, "ID" -> 8169572539092510429], 
         "f24" -> Association[
          "Type" -> "Numerical", "Weight" -> 1, 
           "Values" -> {35.00695651478762}, "ID" -> 960959000226848024], 
         "f25" -> Association[
          "Type" -> "Numerical", "Weight" -> 1, 
           "Values" -> {0.4294309895833126}, "ID" -> 8688867028182764608], 
         "f26" -> Association[
          "Type" -> "Numerical", "Weight" -> 1, 
           "Values" -> {0.11834359042656506`}, "ID" -> 3062647377442166267], 
         "f27" -> Association[
          "Type" -> "Numerical", "Weight" -> 1, 
           "Values" -> {4.476954622141765}, "ID" -> 3574222223543296784], 
         "f28" -> Association[
          "Type" -> "Numerical", "Weight" -> 1, 
           "Values" -> {0.4470588235294118}, "ID" -> 2993645291390475894], 
         "f29" -> Association[
          "Type" -> "Numerical", "Weight" -> 1, 
           "Values" -> {0.01699476718902588}, "ID" -> 4288989773998687356], 
         "f30" -> Association[
          "Type" -> "Numerical", "Weight" -> 1, 
           "Values" -> {131912.63800013132`}, "ID" -> 6066354679487432318], 
         "f31" -> Association[
          "Type" -> "Numerical", "Weight" -> 1, 
           "Values" -> {30560.33745585181}, "ID" -> 1129857976052173812], 
         "f32" -> Association[
          "Type" -> "Numerical", "Weight" -> 1, 
           "Values" -> {0.42940311849001084`}, "ID" -> 8368074980103677551], 
         "f33" -> Association[
          "Type" -> "Numerical", "Weight" -> 1, 
           "Values" -> {0.09948026515576762}, "ID" -> 2963394705821937346]], 
        Association[
        "ExampleNumber" -> 1, "ExampleWeights" -> 1, "RawExample" -> False]], 
      "TrainingTime" -> 3.2773300351511376`, "MaxTrainingMemory" -> 3303272, 
      "DataMemory" -> 181072, "FunctionMemory" -> 362912, 
      "LanguageVersion" -> {11.3, 0}, "Date" -> 
      DateObject[{2018, 12, 12, 17, 3, 54.0551561`9.48541196771084}, 
        "Instant", "Gregorian", -6.], "ProcessorCount" -> 4, "ProcessorType" -> 
      "x86-64", "OperatingSystem" -> "Windows", "SystemWordLength" -> 64, 
      "Evaluations" -> {}]]],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{
  3.7532154346515555`*^9, {3.7532190426874504`*^9, 3.7532191107555027`*^9}, 
   3.753630367370611*^9, 3.7536312857457786`*^9, {3.7536388387427998`*^9, 
   3.7536388704180975`*^9}, 3.7536404821230006`*^9, 3.75364068306485*^9, 
   3.7536446341209803`*^9},
 CellLabel->"Out[82]=",ExpressionUUID->"4d15d246-d9fc-4607-aad9-b47719f0e7d9"],

Cell[BoxData["0.8571428571428571`"], "Output",
 CellChangeTimes->{
  3.7532154346515555`*^9, {3.7532190426874504`*^9, 3.7532191107555027`*^9}, 
   3.753630367370611*^9, 3.7536312857457786`*^9, {3.7536388387427998`*^9, 
   3.7536388704180975`*^9}, 3.7536404821230006`*^9, 3.75364068306485*^9, 
   3.7536446342506347`*^9},
 CellLabel->"Out[86]=",ExpressionUUID->"1dff0761-4398-4746-8c38-6cab509d0e92"],

Cell[BoxData[
 TagBox[
  StyleBox[
   FrameBox[GridBox[{
      {
       ItemBox[
        FrameBox[
         StyleBox["\<\"Classifier information\"\>", "SuggestionsBarText",
          StripOnInput->False,
          FontSize->12,
          FontWeight->Bold],
         FrameMargins->{{10, 5}, {-5, 5}},
         FrameStyle->None,
         StripOnInput->False],
        Alignment->{Left, Bottom},
        Background->RGBColor[0.93119, 0.93119, 0.93119],
        Frame->{{False, False}, {True, False}},
        FrameStyle->Opacity[0.1],
        ItemSize->{Automatic, 1},
        StripOnInput->False]},
      {
       ItemBox[
        TagBox[
         FrameBox[
          TagBox[GridBox[{
             {
              
              TemplateBox[{
               TemplateBox[{5}, "Spacer1"],StyleBox["\"Input type\"", 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], 
              TagBox[
               TooltipBox[
                TemplateBox[{"\"Mixed\"",StyleBox[
                   
                   TemplateBox[{"\" (number: \"", "33", "\")\""}, 
                    "RowDefault"], 
                   GrayLevel[0.5], StripOnInput -> False]},
                 "RowDefault"],
                TagBox[
                 RowBox[{"{", 
                   
                   RowBox[{
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\""}], "}"}], Short[#, 10]& ]],
               Annotation[#, 
                
                Short[{"Numerical", "Numerical", "Numerical", "Numerical", 
                  "Numerical", "Numerical", "Numerical", "Numerical", 
                  "Numerical", "Numerical", "Numerical", "Numerical", 
                  "Numerical", "Numerical", "Numerical", "Numerical", 
                  "Numerical", "Numerical", "Numerical", "Numerical", 
                  "Numerical", "Numerical", "Numerical", "Numerical", 
                  "Numerical", "Numerical", "Numerical", "Numerical", 
                  "Numerical", "Numerical", "Numerical", "Numerical", 
                  "Numerical"}, 10], "Tooltip"]& ]},
             {
              
              TemplateBox[{
               TemplateBox[{5}, "Spacer1"],StyleBox["\"Number of classes\"", 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], 
              TagBox[
               TooltipBox["6",
                TagBox[
                 RowBox[{"{", 
                   
                   RowBox[{
                    "1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6"}], 
                   "}"}], Short[#, 1]& ]],
               Annotation[#, 
                Short[{1, 2, 3, 4, 5, 6}, 1], "Tooltip"]& ]},
             {
              TemplateBox[{TemplateBox[{5}, "Spacer1"],StyleBox["\"Method\"", 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], 
              TagBox[
               TooltipBox["\<\"LogisticRegression\"\>",
                TemplateBox[{
                  TagBox[
                   
                   DynamicModuleBox[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$ = 
                    Data`UnorderedAssociation[
                    "RowCount" -> 20, "Length" -> 3, "InitialType" -> 
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], 
                    TypeSystem`Atom[String]}], "Shape" -> 
                    TypeSystem`PackageScope`DocumentShape[
                    
                    Association[{"L1Regularization"} -> 
                    TypeSystem`PackageScope`AtomShape[34], {
                    "L2Regularization"} -> 
                    TypeSystem`PackageScope`AtomShape[60], {
                    "OptimizationMethod"} -> 
                    TypeSystem`PackageScope`AtomShape[48.00000000000001]], 1],
                     "InitialData" -> 
                    TypeSystem`PackageScope`CacheHandle[653432852], "Type" -> 
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], 
                    TypeSystem`Atom[String]}], "HandleQ" -> True, "RowTarget" -> 
                    20, "Data" -> 
                    TypeSystem`PackageScope`CacheHandle[653432852]], 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$ = 1, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
                    DynamicModule[{
                    TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
                    Style[
                    Grid[{{
                    Item[
                    Annotation[
                    EventHandler[
                    MouseAppearance[
                    Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"L1Regularization\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"L1Regularization\"", FontColor -> 
                    RGBColor[0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 1749649364][{
                    Key["L1Regularization"]}]], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    1749649364][
                    GeneralUtilities`Slice[
                    Key["L1Regularization"]]], "Mouse"], Background -> 
                    GrayLevel[0.95], Alignment -> {Left, Baseline}], 
                    Pane[
                    Annotation[
                    RawBoxes["0"], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    1749649364][
                    GeneralUtilities`Slice[
                    Key["L1Regularization"]]], "Mouse"], 
                    ImageSize -> {{34, Full}, Automatic}, 
                    Alignment -> {Left, Baseline}]}, {
                    Item[
                    Annotation[
                    EventHandler[
                    MouseAppearance[
                    Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"L2Regularization\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"L2Regularization\"", FontColor -> 
                    RGBColor[0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 1749649364][{
                    Key["L2Regularization"]}]], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    1749649364][
                    GeneralUtilities`Slice[
                    Key["L2Regularization"]]], "Mouse"], Background -> 
                    GrayLevel[0.95], Alignment -> {Left, Baseline}], 
                    Pane[
                    Annotation[
                    RawBoxes["1."], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    1749649364][
                    GeneralUtilities`Slice[
                    Key["L2Regularization"]]], "Mouse"], 
                    ImageSize -> {{60, Full}, Automatic}, 
                    Alignment -> {Left, Baseline}]}, {
                    Item[
                    Annotation[
                    EventHandler[
                    MouseAppearance[
                    Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"OptimizationMethod\"", FontColor -> 
                    GrayLevel[0.4]]], {{20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"OptimizationMethod\"", FontColor -> 
                    RGBColor[0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 1749649364][{
                    Key["OptimizationMethod"]}]], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    1749649364][
                    GeneralUtilities`Slice[
                    Key["OptimizationMethod"]]], "Mouse"], Background -> 
                    GrayLevel[0.95], Alignment -> {Left, Baseline}], 
                    Pane[
                    Annotation["LBFGS", 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    1749649364][
                    GeneralUtilities`Slice[
                    Key["OptimizationMethod"]]], "Mouse"], 
                    ImageSize -> {{48.00000000000001, Full}, Automatic}, 
                    Alignment -> {Left, Baseline}]}}, 
                    BaseStyle -> {ContextMenu -> {
                    MenuItem["Copy position to clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], 
                    MenuItem["Copy data to clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], Delimiter, 
                    MenuItem["Paste position in new cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], 
                    MenuItem["Paste data in new cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic]}, FontFamily -> "Verdana", 
                    FontSize -> 12}, Alignment -> Left, RowMinHeight -> 1.5, 
                    Dividers -> All, FrameStyle -> GrayLevel[0.85], 
                    BaseStyle -> {FontFamily -> "Verdana", FontSize -> 12}], 
                    LineBreakWithin -> False, ContextMenu -> {}, NumberMarks -> 
                    False, ShowAutoStyles -> False]], 
                    TypeSystem`NestedGrid`PackagePrivate`initialQ = True, 
                    TypeSystem`NestedGrid`PackagePrivate`self = $Failed}, 
                    Dynamic[
                    TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
                    Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
                    
                    Module[{
                    TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
                    TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
                    TypeSystem`NestedGrid`PackagePrivate`LookupCacheValue[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$["Data"]]}, 
                    TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = 
                    If[TypeSystem`NestedGrid`PackagePrivate`tmpData$ === 
                    TypeSystem`NestedGrid`PackagePrivate`$NotCached, 
                    TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
                    TypeSystem`NestedGrid`PackagePrivate`renderGrid[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 1749649364][
                    TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
                    Not[
                    FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
                    TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
                    TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
                    TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$; If[
                    FailureQ[
                    TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
                    TypeSystem`SparseGrid[
                    TypeSystem`H["(data no longer present)"]], 
                    If[GeneralUtilities`$DebugMode, 
                    
                    Row[{TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
                    "  ", 
                    TypeSystem`NestedGrid`PackagePrivate`formatState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$]}], 
                    TypeSystem`NestedGrid`PackagePrivate`renderedGrid]]], 
                    TrackedSymbols :> {
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$}], 
                    DynamicModuleValues :> {}], 
                    TypeSystem`NestedGrid`PackagePrivate`$posCell$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
                    TypeSystem`NestedGrid`PackagePrivate`alignBar[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$][
                    TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
                    TypeSystem`PackageScope`Pathbar[
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    1749649364]]]], 
                    TrackedSymbols :> {
                    TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
                    TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Framed[
                    Dynamic[
                    Replace[
                    MouseAnnotation[Null], {
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    1749649364][Null] -> "", 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    1749649364][
                    Pattern[TypeSystem`NestedGrid`PackagePrivate`path, 
                    Blank[]]] :> (
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
                    TypeSystem`NestedGrid`PackagePrivate`path; 
                    TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
                    TypeSystem`NestedGrid`PackagePrivate`path, 
                    TypeSystem`NestedGrid`PackagePrivate`makePathElements]), 
                    Null :> Spacer[10], Blank[] :> Spacer[10]}], 
                    TrackedSymbols :> {}], FrameStyle -> None, ImageMargins -> 
                    0, FrameMargins -> 0, Alignment -> Top, 
                    ImageSize -> {Automatic, 14}]}, 
                    DynamicBox[
                    ToBoxes[
                    Column[
                    If[TypeSystem`NestedGrid`PackagePrivate`$path$$ == {}, {
                    TypeSystem`NestedGrid`PackagePrivate`displayScrollBar[
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$], 
                    TypeSystem`NestedGrid`PackagePrivate`onDesktopShow[
                    TypeSystem`NestedGrid`PackagePrivate`alignBar[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$][
                    TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$]]}, {
                    TypeSystem`NestedGrid`PackagePrivate`$topBar$$, 
                    TypeSystem`NestedGrid`PackagePrivate`displayScrollBar[
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$], 
                    TypeSystem`NestedGrid`PackagePrivate`onDesktopShow[
                    TypeSystem`NestedGrid`PackagePrivate`alignBar[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$][
                    TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$]]}], 
                    Spacings -> 
                    If[TypeSystem`NestedGrid`PackagePrivate`$path$$ == {}, 
                    0, {{}, {0, 0.05, 0}}]], StandardForm], 
                    TrackedSymbols :> {
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
                    Initialization :> Block[{$ContextPath = $ContextPath}, 
                    Needs["TypeSystem`"]], DynamicModuleValues :> {}, 
                    BaseStyle -> {LineBreakWithin -> False}, Deinitialization :> 
                    TypeSystem`NestedGrid`PackagePrivate`deleteState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]], Deploy, 
                   DefaultBaseStyle -> "Deploy"]}, "CopyTag", 
                 DisplayFunction -> (#& ), 
                 InterpretationFunction -> ("Dataset[<>]"& )]],
               Annotation[#, 
                Dataset[
                 Association[
                 "L1Regularization" -> 0, "L2Regularization" -> 1., 
                  "OptimizationMethod" -> "LBFGS"], 
                 
                 TypeSystem`Struct[{
                  "L1Regularization", "L2Regularization", 
                   "OptimizationMethod"}, {
                   TypeSystem`Atom[Integer], 
                   TypeSystem`Atom[Real], 
                   TypeSystem`Atom[String]}], 
                 Association["ID" -> 134960913442042]], "Tooltip"]& ]},
             {
              
              TemplateBox[{
               TemplateBox[{5}, "Spacer1"],StyleBox["\"Accuracy\"", 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], 
              TagBox[
               TooltipBox[
                
                TemplateBox[{
                 TemplateBox[{
                   "83.1669339048572169304`3.", "\"%\"", "percent", 
                    "\"Percent\""}, "QuantityPostfix", SyntaxForm -> Mod],
                  StyleBox[
                   TemplateBox[{"\" \[PlusMinus] \"", 
                    
                    TemplateBox[{
                    "5.0819422852606077612`2.", "\"%\"", "percent", 
                    "\"Percent\""}, "QuantityPostfix", SyntaxForm -> Mod]}, 
                    "RowDefault"], {10, 
                    Opacity[0.5]}, StripOnInput -> False]},
                 "RowDefault"],
                
                TemplateBox[{
                 "\"95% confidence interval: [\"", "0.7300304933433600096`3.",
                   "\", \"", "0.9333081847537844089`3.", "\"]\""}, 
                 "RowDefault"],
                TooltipStyle->{}],
               Annotation[#, 
                
                Row[{"95% confidence interval: [", 0.7300304933433600096`3., 
                  ", ", 0.9333081847537844089`3., "]"}], "Tooltip"]& ]},
             {
              TemplateBox[{TemplateBox[{5}, "Spacer1"],StyleBox[
                 TagBox[
                  TooltipBox[
                  "\"Loss\"", "\"Mean cross entropy\"", LabelStyle -> 
                   "TextStyling"], 
                  Annotation[#, "Mean cross entropy", "Tooltip"]& ], 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], 
              TagBox[
               TooltipBox[
                TemplateBox[{"0.5158253322414153574`3.",StyleBox[
                   
                   TemplateBox[{
                    "\" \[PlusMinus] \"", "0.0945921052007106661`2."}, 
                    "RowDefault"], {10, 
                    Opacity[0.5]}, StripOnInput -> False]},
                 "RowDefault"],
                
                TemplateBox[{
                 "\"95% confidence interval: [\"", "0.326641121839994053`3.", 
                  "\", \"", "0.7050095426428366618`3.", "\"]\""}, 
                 "RowDefault"],
                TooltipStyle->{}],
               Annotation[#, 
                Row[{
                 "95% confidence interval: [", 0.326641121839994053`3., ", ", 
                  0.7050095426428366618`3., "]"}], "Tooltip"]& ]},
             {
              
              TemplateBox[{
               TemplateBox[{5}, "Spacer1"],StyleBox[
                "\"Single evaluation time\"", 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], 
              
              TemplateBox[{
               "2.03`",
                RowBox[{
                 "\"ms\"", "\[InvisibleSpace]", "\"/\"", "\[InvisibleSpace]", 
                  "\"example\""}],"milliseconds per example",FractionBox[
                "\"Milliseconds\"", "\"Examples\""]},
               "Quantity"]},
             {
              
              TemplateBox[{
               TemplateBox[{5}, "Spacer1"],StyleBox[
                "\"Batch evaluation speed\"", 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], 
              
              TemplateBox[{
               "219.`",
                RowBox[{
                 "\"examples\"", "\[InvisibleSpace]", "\"/\"", 
                  "\[InvisibleSpace]", "\"ms\""}],"examples per millisecond",
                FractionBox["\"Examples\"", "\"Milliseconds\""]},
               "Quantity"]},
             {
              
              TemplateBox[{
               TemplateBox[{5}, "Spacer1"],StyleBox["\"Classifier memory\"", 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], 
              TemplateBox[{"362.`","\"kB\"","kilobytes","\"Kilobytes\""},
               "Quantity"]},
             {
              
              TemplateBox[{
               TemplateBox[{5}, "Spacer1"],StyleBox[
                "\"Training examples used\"", 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], 
              TemplateBox[{"195","\"examples\"","examples","\"Examples\""},
               "Quantity"]},
             {
              
              TemplateBox[{
               TemplateBox[{5}, "Spacer1"],StyleBox["\"Training time\"", 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], 
              TemplateBox[{"3.27`","\"s\"","seconds","\"Seconds\""},
               "Quantity"]},
             {
              ItemBox[
               
               DynamicModuleBox[{
                MachineLearning`file4Automation`PackagePrivate`pos$$ = 1}, 
                DynamicBox[ToBoxes[
                  Show[
                   Part[{
                    Graphics[{{{{}, {{{}, {}, {
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.1972245773362196`, 0.24687900604519938`}, {
                    3.6888794541139363`, -0.24685198025770821`}, {
                    5.049856007249537, -0.6619870742138951}}]}, {
                    Hue[0.9060679774997897, 0.6, 0.6], 
                    Directive[
                    Opacity[0]], 
                    
                    Line[{{2.1972245773362196`, 0.06455744925124475}, {
                    2.1972245773362196`, -0.4796655174199405}}]}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6], 
                    AbsolutePointSize[6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 8.96], {0., 0.}], {{{
                    2.1972245773362196`, 0.24687900604519938`}}, {{
                    3.6888794541139363`, -0.24685198025770821`}}, {{
                    5.049856007249537, -0.6619870742138951}}}]}, {
                    Directive[
                    Opacity[0]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledSquare]", FontSize -> 8.96], {0., 0.}], {{{
                    2.1972245773362196`, 0.06455744925124475}}, {{
                    2.1972245773362196`, -0.4796655174199405}}}]}, {}}}, {}, \
{}, {}, {}}}, {{{}, {{{}, {}, {
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    
                    Line[{{2.1972245773362196`, 0.17908889316251045`}, {
                    2.1972245773362196`, 0.3103639254068862}}]}, {
                    Hue[0.9060679774997897, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    
                    Line[{{3.6888794541139363`, -0.40200027516094033`}, {
                    3.6888794541139363`, -0.11257302890723386`}}]}, {
                    Hue[0.1421359549995791, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    
                    Line[{{5.049856007249537, -0.864568615222342}, {
                    5.049856007249537, -0.49361223218184225`}}]}}}, {}, {}, \
{}, {}}}}, {DisplayFunction -> Identity, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& }, 
                    DisplayFunction -> Identity, DisplayFunction -> Identity, 
                    DisplayFunction -> Identity, PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.02], 
                    Scaled[0.05]}}, 
                    AxesOrigin -> {2.086414691506906, -0.7279531606843135}, 
                    PlotRange -> {{2.1344536593519843`, 
                    Log[195]}, {-0.7124796342282894, 0.24687900604519938`}}, 
                    PlotRangeClipping -> True, 
                    ImagePadding -> {{30, 10}, {37, 0}}, DisplayFunction -> 
                    Identity, AspectRatio -> GoldenRatio^(-1), 
                    Axes -> {True, True}, AxesLabel -> {None, None}, 
                    AxesOrigin -> {2.086414691506906, -0.7279531606843135}, 
                    DisplayFunction :> Identity, 
                    Frame -> {{True, True}, {True, True}}, 
                    FrameLabel -> {{None, None}, {
                    "training examples used", None}}, FrameTicks -> {{
                    Charting`ScaledTicks[{Log, Exp}], {}}, {
                    Charting`ScaledTicks[{Log, Exp}], {}}}, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& }, 
                    GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], ImageMargins -> 0, 
                    ImagePadding -> {{30, 10}, {37, 0}}, ImageSize -> 330, 
                    LabelStyle -> 10, 
                    Method -> {
                    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Exp[#]& )[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Exp[#]& )[
                    Part[#, 2]]}& )}}, PlotRange -> {{2.1344536593519843`, 
                    Log[195]}, {-0.7124796342282894, 0.24687900604519938`}}, 
                    PlotRangeClipping -> True, PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.02], 
                    Scaled[0.05]}}, Ticks -> {
                    Charting`ScaledTicks[{Log, Exp}], 
                    Charting`ScaledTicks[{Log, Exp}]}}], 
                    Graphics[{{{}, {{{}, {}, {
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.1972245773362196`, 0.4875393280887341}, {
                    3.6888794541139363`, 0.7133223684418069}, {
                    5.049856007249537, 0.8316693390485722}}]}, {
                    Hue[0.9060679774997897, 0.6, 0.6], 
                    Directive[
                    Opacity[0]], 
                    
                    Line[{{2.1972245773362196`, 0.6930577825404769}, {
                    2.1972245773362196`, 0.585047193706481}}]}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6], 
                    AbsolutePointSize[6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 8.96], {0., 0.}], {{{
                    2.1972245773362196`, 0.4875393280887341}}, {{
                    3.6888794541139363`, 0.7133223684418069}}, {{
                    5.049856007249537, 0.8316693390485722}}}]}, {
                    Directive[
                    Opacity[0]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledSquare]", FontSize -> 8.96], {0., 0.}], {{{
                    2.1972245773362196`, 0.6930577825404769}}, {{
                    2.1972245773362196`, 
                    0.585047193706481}}}]}, {}}}, {}, {}, {}, {}}}, {
                    DisplayFunction -> Identity, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Identity, Identity}][#, #2, {6,
                     6}]& }, DisplayFunction -> Identity, DisplayFunction -> 
                    Identity, DisplayFunction -> Identity, 
                    PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.05], 0}}, 
                    AxesOrigin -> {2.086414691506906, 0.4632648752087268}, 
                    PlotRange -> {{2.1344536593519843`, 
                    Log[195]}, {0.4875393280887341, 1}}, PlotRangeClipping -> 
                    True, ImagePadding -> {{30, 10}, {37, 0}}, 
                    DisplayFunction -> Identity, AspectRatio -> 
                    GoldenRatio^(-1), Axes -> {True, True}, 
                    AxesLabel -> {None, None}, 
                    AxesOrigin -> {2.086414691506906, 0.4632648752087268}, 
                    DisplayFunction :> Identity, 
                    Frame -> {{True, True}, {True, True}}, 
                    FrameLabel -> {{None, None}, {
                    "training examples used", None}}, 
                    FrameTicks -> {{Automatic, None}, {
                    Charting`ScaledTicks[{Log, Exp}], {}}}, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Identity, Identity}][#, #2, {6,
                     6}]& }, GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], ImageMargins -> 0, 
                    ImagePadding -> {{30, 10}, {37, 0}}, ImageSize -> 330, 
                    LabelStyle -> 10, 
                    Method -> {
                    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Identity[#]& )[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Identity[#]& )[
                    Part[#, 2]]}& )}}, PlotRange -> {{2.1344536593519843`, 
                    Log[195]}, {0.4875393280887341, 1}}, PlotRangeClipping -> 
                    True, PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.05], 0}}, Ticks -> {
                    Charting`ScaledTicks[{Log, Exp}], Automatic}}], 
                    Graphics[{{{{}, {{{}, {}, 
                    Tooltip[{
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.1972245773362196`, 0.5754796479570419}, {
                    3.6888794541139363`, 0.5498206700757188}, {
                    5.049856007249537, 0.4609785882525887}}]}, 
                    "LogisticRegression"], 
                    Tooltip[{
                    Hue[0.9060679774997897, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.1972245773362196`, 2.306099958510315}, {
                    3.6888794541139363`, 1.8100258772581947`}, {
                    5.049856007249537, 1.0653193435942239`}}]}, "NaiveBayes"], 
                    Tooltip[{
                    Hue[0.1421359549995791, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.560181, 0.691569, 0.194885], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.1972245773362196`, 0.600979588960079}, {
                    3.6888794541139363`, 0.20199991172883963`}, {
                    5.049856007249537, -0.20074625764701098`}}]}, 
                    "DecisionTree"], 
                    Tooltip[{
                    Hue[0.37820393249936934`, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.922526, 0.385626, 0.209179], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.1972245773362196`, 0.5245746352724489}, {
                    3.6888794541139363`, -0.12220618454053632`}, {
                    5.049856007249537, -0.42700811246099435`}}]}, 
                    "NearestNeighbors"], 
                    Tooltip[{
                    Hue[0.6142719099991583, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.528488, 0.470624, 0.701351], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.1972245773362196`, 0.5645467617417683}, {
                    3.6888794541139363`, 0.2121504976736789}, {
                    5.049856007249537, -0.2552112648859308}}]}, 
                    "RandomForest"], 
                    Tooltip[{
                    Hue[0.8503398874989481, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.772079, 0.431554, 0.102387], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.1972245773362196`, 1.0309305503781332`}, {
                    3.6888794541139363`, 1.5592384926981406`}, {
                    5.049856007249537, 1.4905379568022488`}}]}, 
                    "LogisticRegression"], 
                    Tooltip[{
                    Hue[0.08640786499873876, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.363898, 0.618501, 0.782349], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.1972245773362196`, 0.5831895951735114}, {
                    3.6888794541139363`, 0.5831627359831081}, {
                    5.049856007249537, 0.5830547453484872}}]}, 
                    "LogisticRegression"], 
                    Tooltip[{
                    Hue[0.3224758424985268, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[1, 0.75, 0], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.1972245773362196`, 0.5079568943478469}, {
                    3.6888794541139363`, 0.5839288614258981}, {
                    5.049856007249537, -0.6815404961506161}}]}, 
                    "LogisticRegression"], 
                    Tooltip[{
                    Hue[0.5585438199983166, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.647624, 0.37816, 0.614037], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.1972245773362196`, 0.24687900604519938`}, {
                    3.6888794541139363`, -0.24685198025770821`}, {
                    5.049856007249537, -0.6619870742138951}}]}, 
                    "LogisticRegression"], 
                    Tooltip[{
                    Hue[0.7946117974981064, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.571589, 0.586483, 0.], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.1972245773362196`, 0.5824157300107482}, {
                    3.6888794541139363`, 0.5797484139743181}, {
                    5.049856007249537, 0.5692267111380546}}]}, 
                    "LogisticRegression"], 
                    Tooltip[{
                    Hue[0.030679774997896203`, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.915, 0.3325, 0.2125], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.1972245773362196`, 0.5831974230481883}, {
                    3.6888794541139363`, -0.036773836199618534`}, {
                    5.049856007249537, -0.5133510417946779}}]}, 
                    "GradientBoostedTrees"]}}, {}, {}, {}, {}}}}, {
                    DisplayFunction -> Identity, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& }, 
                    DisplayFunction -> Identity, DisplayFunction -> Identity, 
                    DisplayFunction -> Identity, PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.02], 
                    Scaled[0.05]}}, 
                    AxesOrigin -> {2.086414691506906, -0.8983853678598773}, 
                    PlotRange -> {{2.1344536593519843`, 
                    Log[195]}, {-0.8475205214095567, 2.306099958510315}}, 
                    PlotRangeClipping -> True, 
                    ImagePadding -> {{30, 10}, {37, 0}}, DisplayFunction -> 
                    Identity, AspectRatio -> GoldenRatio^(-1), 
                    Axes -> {True, True}, AxesLabel -> {None, None}, 
                    AxesOrigin -> {2.086414691506906, -0.8983853678598773}, 
                    DisplayFunction :> Identity, 
                    Frame -> {{True, True}, {True, True}}, 
                    FrameLabel -> {{None, None}, {
                    "training examples used", None}}, FrameTicks -> {{
                    Charting`ScaledTicks[{Log, Exp}], {}}, {
                    Charting`ScaledTicks[{Log, Exp}], {}}}, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& }, 
                    GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], ImageMargins -> 0, 
                    ImagePadding -> {{30, 10}, {37, 0}}, ImageSize -> 330, 
                    LabelStyle -> 10, 
                    Method -> {
                    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Exp[#]& )[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Exp[#]& )[
                    Part[#, 2]]}& )}}, PlotRange -> {{2.1344536593519843`, 
                    Log[195]}, {-0.8475205214095567, 2.306099958510315}}, 
                    PlotRangeClipping -> True, PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.02], 
                    Scaled[0.05]}}, Ticks -> {
                    Charting`ScaledTicks[{Log, Exp}], 
                    Charting`ScaledTicks[{Log, Exp}]}}]}, 
                    MachineLearning`file4Automation`PackagePrivate`pos$$], 
                   PlotLabel -> Grid[{{
                    Button[
                    Deploy[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{
                    GrayLevel[0.25], 
                    Line[{{0, 0.8}, {-1, 0}, {0, -0.8}}]}, 
                    ImageSize -> {Automatic, 10}, 
                    ImagePadding -> {{1, 1}, {1, 1}}, BaselinePosition -> 
                    Scaled[0.1]], 
                    Graphics[{
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098], 
                    Line[{{0, 0.8}, {-1, 0}, {0, -0.8}}]}, 
                    ImageSize -> {Automatic, 10}, 
                    ImagePadding -> {{1, 1}, {1, 1}}, BaselinePosition -> 
                    Scaled[0.1]]], "LinkHand"]], 
                    MachineLearning`file4Automation`PackagePrivate`pos$$ = 
                    Max[MachineLearning`file4Automation`PackagePrivate`pos$$ - 
                    1, 1], Appearance -> "Frameless"], 
                    Part[{
                    Tooltip[
                    "Learning curve", 
                    "mean cross entropy for best algorithm at each training \
size"], "Accuracy", 
                    Tooltip[
                    "Learning curves for all algorithms", 
                    "mean cross entropy at each training size"]}, 
                    MachineLearning`file4Automation`PackagePrivate`pos$$], 
                    Button[
                    Deploy[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{
                    GrayLevel[0.25], 
                    Line[{{0, 0.8}, {1, 0}, {0, -0.8}}]}, 
                    ImageSize -> {Automatic, 10}, 
                    ImagePadding -> {{1, 1}, {1, 1}}, BaselinePosition -> 
                    Scaled[0.1]], 
                    Graphics[{
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098], 
                    Line[{{0, 0.8}, {1, 0}, {0, -0.8}}]}, 
                    ImageSize -> {Automatic, 10}, 
                    ImagePadding -> {{1, 1}, {1, 1}}, BaselinePosition -> 
                    Scaled[0.1]]], "LinkHand"]], 
                    MachineLearning`file4Automation`PackagePrivate`pos$$ = 
                    Min[MachineLearning`file4Automation`PackagePrivate`pos$$ + 
                    1, 
                    Length[{
                    Graphics[{{{{}, {{{}, {}, {
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.1972245773362196`, 0.24687900604519938`}, {
                    3.6888794541139363`, -0.24685198025770821`}, {
                    5.049856007249537, -0.6619870742138951}}]}, {
                    Hue[0.9060679774997897, 0.6, 0.6], 
                    Directive[
                    Opacity[0]], 
                    
                    Line[{{2.1972245773362196`, 0.06455744925124475}, {
                    2.1972245773362196`, -0.4796655174199405}}]}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6], 
                    AbsolutePointSize[6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 8.96], {0., 0.}], {{{
                    2.1972245773362196`, 0.24687900604519938`}}, {{
                    3.6888794541139363`, -0.24685198025770821`}}, {{
                    5.049856007249537, -0.6619870742138951}}}]}, {
                    Directive[
                    Opacity[0]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledSquare]", FontSize -> 8.96], {0., 0.}], {{{
                    2.1972245773362196`, 0.06455744925124475}}, {{
                    2.1972245773362196`, -0.4796655174199405}}}]}, {}}}, {}, \
{}, {}, {}}}, {{{}, {{{}, {}, {
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    
                    Line[{{2.1972245773362196`, 0.17908889316251045`}, {
                    2.1972245773362196`, 0.3103639254068862}}]}, {
                    Hue[0.9060679774997897, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    
                    Line[{{3.6888794541139363`, -0.40200027516094033`}, {
                    3.6888794541139363`, -0.11257302890723386`}}]}, {
                    Hue[0.1421359549995791, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    
                    Line[{{5.049856007249537, -0.864568615222342}, {
                    5.049856007249537, -0.49361223218184225`}}]}}}, {}, {}, \
{}, {}}}}, {DisplayFunction -> Identity, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& }, 
                    DisplayFunction -> Identity, DisplayFunction -> Identity, 
                    DisplayFunction -> Identity, PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.02], 
                    Scaled[0.05]}}, 
                    AxesOrigin -> {2.086414691506906, -0.7279531606843135}, 
                    PlotRange -> {{2.1344536593519843`, 
                    Log[195]}, {-0.7124796342282894, 0.24687900604519938`}}, 
                    PlotRangeClipping -> True, 
                    ImagePadding -> {{30, 10}, {37, 0}}, DisplayFunction -> 
                    Identity, AspectRatio -> GoldenRatio^(-1), 
                    Axes -> {True, True}, AxesLabel -> {None, None}, 
                    AxesOrigin -> {2.086414691506906, -0.7279531606843135}, 
                    DisplayFunction :> Identity, 
                    Frame -> {{True, True}, {True, True}}, 
                    FrameLabel -> {{None, None}, {
                    "training examples used", None}}, FrameTicks -> {{
                    Charting`ScaledTicks[{Log, Exp}], {}}, {
                    Charting`ScaledTicks[{Log, Exp}], {}}}, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& }, 
                    GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], ImageMargins -> 0, 
                    ImagePadding -> {{30, 10}, {37, 0}}, ImageSize -> 330, 
                    LabelStyle -> 10, 
                    Method -> {
                    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Exp[#]& )[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Exp[#]& )[
                    Part[#, 2]]}& )}}, PlotRange -> {{2.1344536593519843`, 
                    Log[195]}, {-0.7124796342282894, 0.24687900604519938`}}, 
                    PlotRangeClipping -> True, PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.02], 
                    Scaled[0.05]}}, Ticks -> {
                    Charting`ScaledTicks[{Log, Exp}], 
                    Charting`ScaledTicks[{Log, Exp}]}}], 
                    Graphics[{{{}, {{{}, {}, {
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.1972245773362196`, 0.4875393280887341}, {
                    3.6888794541139363`, 0.7133223684418069}, {
                    5.049856007249537, 0.8316693390485722}}]}, {
                    Hue[0.9060679774997897, 0.6, 0.6], 
                    Directive[
                    Opacity[0]], 
                    
                    Line[{{2.1972245773362196`, 0.6930577825404769}, {
                    2.1972245773362196`, 0.585047193706481}}]}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6], 
                    AbsolutePointSize[6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 8.96], {0., 0.}], {{{
                    2.1972245773362196`, 0.4875393280887341}}, {{
                    3.6888794541139363`, 0.7133223684418069}}, {{
                    5.049856007249537, 0.8316693390485722}}}]}, {
                    Directive[
                    Opacity[0]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledSquare]", FontSize -> 8.96], {0., 0.}], {{{
                    2.1972245773362196`, 0.6930577825404769}}, {{
                    2.1972245773362196`, 
                    0.585047193706481}}}]}, {}}}, {}, {}, {}, {}}}, {
                    DisplayFunction -> Identity, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Identity, Identity}][#, #2, {6,
                     6}]& }, DisplayFunction -> Identity, DisplayFunction -> 
                    Identity, DisplayFunction -> Identity, 
                    PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.05], 0}}, 
                    AxesOrigin -> {2.086414691506906, 0.4632648752087268}, 
                    PlotRange -> {{2.1344536593519843`, 
                    Log[195]}, {0.4875393280887341, 1}}, PlotRangeClipping -> 
                    True, ImagePadding -> {{30, 10}, {37, 0}}, 
                    DisplayFunction -> Identity, AspectRatio -> 
                    GoldenRatio^(-1), Axes -> {True, True}, 
                    AxesLabel -> {None, None}, 
                    AxesOrigin -> {2.086414691506906, 0.4632648752087268}, 
                    DisplayFunction :> Identity, 
                    Frame -> {{True, True}, {True, True}}, 
                    FrameLabel -> {{None, None}, {
                    "training examples used", None}}, 
                    FrameTicks -> {{Automatic, None}, {
                    Charting`ScaledTicks[{Log, Exp}], {}}}, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Identity, Identity}][#, #2, {6,
                     6}]& }, GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], ImageMargins -> 0, 
                    ImagePadding -> {{30, 10}, {37, 0}}, ImageSize -> 330, 
                    LabelStyle -> 10, 
                    Method -> {
                    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Identity[#]& )[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Identity[#]& )[
                    Part[#, 2]]}& )}}, PlotRange -> {{2.1344536593519843`, 
                    Log[195]}, {0.4875393280887341, 1}}, PlotRangeClipping -> 
                    True, PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.05], 0}}, Ticks -> {
                    Charting`ScaledTicks[{Log, Exp}], Automatic}}], 
                    Graphics[{{{{}, {{{}, {}, 
                    Tooltip[{
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.1972245773362196`, 0.5754796479570419}, {
                    3.6888794541139363`, 0.5498206700757188}, {
                    5.049856007249537, 0.4609785882525887}}]}, 
                    "LogisticRegression"], 
                    Tooltip[{
                    Hue[0.9060679774997897, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.1972245773362196`, 2.306099958510315}, {
                    3.6888794541139363`, 1.8100258772581947`}, {
                    5.049856007249537, 1.0653193435942239`}}]}, "NaiveBayes"], 
                    Tooltip[{
                    Hue[0.1421359549995791, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.560181, 0.691569, 0.194885], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.1972245773362196`, 0.600979588960079}, {
                    3.6888794541139363`, 0.20199991172883963`}, {
                    5.049856007249537, -0.20074625764701098`}}]}, 
                    "DecisionTree"], 
                    Tooltip[{
                    Hue[0.37820393249936934`, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.922526, 0.385626, 0.209179], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.1972245773362196`, 0.5245746352724489}, {
                    3.6888794541139363`, -0.12220618454053632`}, {
                    5.049856007249537, -0.42700811246099435`}}]}, 
                    "NearestNeighbors"], 
                    Tooltip[{
                    Hue[0.6142719099991583, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.528488, 0.470624, 0.701351], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.1972245773362196`, 0.5645467617417683}, {
                    3.6888794541139363`, 0.2121504976736789}, {
                    5.049856007249537, -0.2552112648859308}}]}, 
                    "RandomForest"], 
                    Tooltip[{
                    Hue[0.8503398874989481, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.772079, 0.431554, 0.102387], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.1972245773362196`, 1.0309305503781332`}, {
                    3.6888794541139363`, 1.5592384926981406`}, {
                    5.049856007249537, 1.4905379568022488`}}]}, 
                    "LogisticRegression"], 
                    Tooltip[{
                    Hue[0.08640786499873876, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.363898, 0.618501, 0.782349], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.1972245773362196`, 0.5831895951735114}, {
                    3.6888794541139363`, 0.5831627359831081}, {
                    5.049856007249537, 0.5830547453484872}}]}, 
                    "LogisticRegression"], 
                    Tooltip[{
                    Hue[0.3224758424985268, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[1, 0.75, 0], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.1972245773362196`, 0.5079568943478469}, {
                    3.6888794541139363`, 0.5839288614258981}, {
                    5.049856007249537, -0.6815404961506161}}]}, 
                    "LogisticRegression"], 
                    Tooltip[{
                    Hue[0.5585438199983166, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.647624, 0.37816, 0.614037], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.1972245773362196`, 0.24687900604519938`}, {
                    3.6888794541139363`, -0.24685198025770821`}, {
                    5.049856007249537, -0.6619870742138951}}]}, 
                    "LogisticRegression"], 
                    Tooltip[{
                    Hue[0.7946117974981064, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.571589, 0.586483, 0.], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.1972245773362196`, 0.5824157300107482}, {
                    3.6888794541139363`, 0.5797484139743181}, {
                    5.049856007249537, 0.5692267111380546}}]}, 
                    "LogisticRegression"], 
                    Tooltip[{
                    Hue[0.030679774997896203`, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.915, 0.3325, 0.2125], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.1972245773362196`, 0.5831974230481883}, {
                    3.6888794541139363`, -0.036773836199618534`}, {
                    5.049856007249537, -0.5133510417946779}}]}, 
                    "GradientBoostedTrees"]}}, {}, {}, {}, {}}}}, {
                    DisplayFunction -> Identity, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& }, 
                    DisplayFunction -> Identity, DisplayFunction -> Identity, 
                    DisplayFunction -> Identity, PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.02], 
                    Scaled[0.05]}}, 
                    AxesOrigin -> {2.086414691506906, -0.8983853678598773}, 
                    PlotRange -> {{2.1344536593519843`, 
                    Log[195]}, {-0.8475205214095567, 2.306099958510315}}, 
                    PlotRangeClipping -> True, 
                    ImagePadding -> {{30, 10}, {37, 0}}, DisplayFunction -> 
                    Identity, AspectRatio -> GoldenRatio^(-1), 
                    Axes -> {True, True}, AxesLabel -> {None, None}, 
                    AxesOrigin -> {2.086414691506906, -0.8983853678598773}, 
                    DisplayFunction :> Identity, 
                    Frame -> {{True, True}, {True, True}}, 
                    FrameLabel -> {{None, None}, {
                    "training examples used", None}}, FrameTicks -> {{
                    Charting`ScaledTicks[{Log, Exp}], {}}, {
                    Charting`ScaledTicks[{Log, Exp}], {}}}, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& }, 
                    GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], ImageMargins -> 0, 
                    ImagePadding -> {{30, 10}, {37, 0}}, ImageSize -> 330, 
                    LabelStyle -> 10, 
                    Method -> {
                    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Exp[#]& )[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Exp[#]& )[
                    Part[#, 2]]}& )}}, PlotRange -> {{2.1344536593519843`, 
                    Log[195]}, {-0.8475205214095567, 2.306099958510315}}, 
                    PlotRangeClipping -> True, PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.02], 
                    Scaled[0.05]}}, Ticks -> {
                    Charting`ScaledTicks[{Log, Exp}], 
                    Charting`ScaledTicks[{Log, Exp}]}}]}]], Appearance -> 
                    "Frameless"]}}, Alignment -> {Center, Baseline}, 
                    ItemSize -> {{3, 20, 3}, {2}}]], StandardForm],
                 ImageSizeCache->{297., {106., 111.}}],
                DynamicModuleValues:>{}],
               Alignment->Center,
               StripOnInput->False], "\[SpanFromLeft]"}
            },
            AutoDelete->False,
            ColumnsEqual->False,
            
            GridBoxAlignment->{
             "Columns" -> {Right, {Left}}, "ColumnsIndexed" -> {}, 
              "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
            GridBoxDividers->{"Columns" -> {False, {
                 Opacity[0.15]}, False}},
            
            GridBoxItemSize->{
             "Columns" -> {Automatic, {Automatic}}, "ColumnsIndexed" -> {}, 
              "Rows" -> {{1.}}, "RowsIndexed" -> {}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], 
                Offset[1.1199999999999999`], {
                 Offset[1.75]}, 
                Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
                Offset[0.2], {
                 Offset[0.8]}, 
                Offset[0.2]}, "RowsIndexed" -> {}}],
           "Grid"],
          FrameMargins->{{10, 10}, {10, 5}},
          FrameStyle->None,
          StripOnInput->False],
         Deploy,
         DefaultBaseStyle->"Deploy"],
        Alignment->Center,
        BaseStyle->{
         FontWeight -> "Light", FontSize -> 12, FontFamily -> "Segoe UI", 
          NumberMarks -> False, Deployed -> False},
        StripOnInput->False]}
     },
     DefaultBaseStyle->"Column",
     GridBoxAlignment->{
      "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
       "RowsIndexed" -> {}},
     GridBoxDividers->{
      "Columns" -> {{False}}, "ColumnsIndexed" -> {}, "Rows" -> {{False}}, 
       "RowsIndexed" -> {}},
     GridBoxItemSize->{
      "Columns" -> {{Automatic}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.}}, 
       "RowsIndexed" -> {}},
     GridBoxSpacings->{"Columns" -> {
         Offset[0.27999999999999997`], {
          Offset[0.5599999999999999]}, 
         Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
         Offset[0.2], 
         Offset[1.2], {
          Offset[0.4]}, 
         Offset[0.2]}, "RowsIndexed" -> {}}],
    Background->RGBColor[0.9802, 0.9802, 0.9802],
    FrameMargins->{{0, 0}, {0, 0}},
    FrameStyle->GrayLevel[0.85],
    RoundingRadius->5,
    StripOnInput->False],
   StripOnInput->False,
   LineBreakWithin->False],
  Deploy,
  DefaultBaseStyle->"Deploy"]], "Output",
 CellChangeTimes->{
  3.7532154346515555`*^9, {3.7532190426874504`*^9, 3.7532191107555027`*^9}, 
   3.753630367370611*^9, 3.7536312857457786`*^9, {3.7536388387427998`*^9, 
   3.7536388704180975`*^9}, 3.7536404821230006`*^9, 3.75364068306485*^9, 
   3.753644634658543*^9},
 CellLabel->"Out[87]=",ExpressionUUID->"b3ae3a02-6698-4f44-89a4-dba7348c3533"]
}, Open  ]],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.753642376816541*^9, 
  3.7536423780084267`*^9}},ExpressionUUID->"79be7cf4-9bf8-476b-98d3-\
cc4734a783ad"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["New Features: Co-Occurrence Matrix Diagonal ", "Section",
 CellChangeTimes->{{3.753133071611134*^9, 3.7531330740954905`*^9}, {
  3.7534821992359276`*^9, 
  3.753482216428846*^9}},ExpressionUUID->"f1a64e87-679b-4547-a380-\
125ae801b47e"],

Cell["\<\
For a new feature, we have used the grey-level co-occurrence matrix.(GLCM). \
It has proved to be a classic texture analysis technique in various papers. \
It characterizes the texture of an image by calculating how often pairs of \
pixel with specific values and in a specified spatial relationship occur in \
an image, creating a GLCM, and then we extract statistical measures from this \
matrix. As discussed in the \[OpenCurlyDoubleQuote]Adding GLCM Texture \
Analysis to a Combined Watershed Transform and Graph Cut Model for Image \
Segmentation\[CloseCurlyDoubleQuote] paper from the book \
\[OpenCurlyDoubleQuote]Advanced Concepts for Intelligent Vision Systems: 18th \
International Conference, ACIVS 2017, Antwerp, Belgium, September 18-21, \
2017, Proceedings\[CloseCurlyDoubleQuote], GLCM enhances image segmentation. \
Thus, we can expect the overall accuracy to increase for a random dataset. 

In a GLCM matrix, the top left cell will be filled with the number of times \
the combination 0,0 occurs, i.e. how many time within the image area a pixel \
with grey level 0 (neighbour pixel) falls to the right of another pixel with \
grey level 0(reference pixel). Thus the concentration on diagonal suggests \
that there are gray levels that match the number of neighbours with same grey \
levels. 

We visualized the GLCM matrix using Manipulate and found that all the energy \
is distributed along the diagonal, that too uniquely for each class of \
images. Thus, we have vectorized the diagonal matrix values of length 20 and \
used it as a feature. You can observe this pattern using the Manipulate \
function below: \
\>", "Text",
 CellChangeTimes->{{3.7536411839300957`*^9, 3.75364141632388*^9}, {
  3.7536416025993547`*^9, 3.753641606152463*^9}, {3.7536424779054995`*^9, 
  3.7536426198055305`*^9}, {3.7536431714025145`*^9, 3.753643255950354*^9}, {
  3.753645998254021*^9, 
  3.7536460559786754`*^9}},ExpressionUUID->"1c0ee009-e73b-4339-8c5e-\
317966d1070f"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"iCV", " ", "=", " ", 
   RowBox[{"ConstantArray", "[", 
    RowBox[{"0", ",", 
     RowBox[{"Length", "[", "traFiles", "]"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"For", "[", 
  RowBox[{
   RowBox[{"i", "=", "1"}], ",", 
   RowBox[{"i", "\[LessEqual]", 
    RowBox[{"Length", "[", "traFiles", "]"}]}], ",", 
   RowBox[{"i", "++"}], ",", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"iCV", "[", 
      RowBox[{"[", "i", "]"}], "]"}], " ", "=", 
     RowBox[{"Diagonal", "[", 
      RowBox[{"ImageCooccurrence", "[", 
       RowBox[{
        RowBox[{"traTextures", "[", 
         RowBox[{"[", "i", "]"}], "]"}], ",", "20"}], "]"}], "]"}]}], ";"}]}],
   "]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"iCVTest", " ", "=", " ", 
   RowBox[{"ConstantArray", "[", 
    RowBox[{"0", ",", 
     RowBox[{"Length", "[", "testFiles", "]"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"For", "[", 
  RowBox[{
   RowBox[{"i", "=", "1"}], ",", 
   RowBox[{"i", "\[LessEqual]", 
    RowBox[{"Length", "[", "testFiles", "]"}]}], ",", 
   RowBox[{"i", "++"}], ",", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"iCVTest", "[", 
      RowBox[{"[", "i", "]"}], "]"}], " ", "=", 
     RowBox[{"Diagonal", "[", 
      RowBox[{"ImageCooccurrence", "[", 
       RowBox[{
        RowBox[{"testTextures", "[", 
         RowBox[{"[", "i", "]"}], "]"}], ",", "20"}], "]"}], "]"}]}], ";"}]}],
   "]"}]}], "Input",
 CellChangeTimes->{{3.753133297121567*^9, 3.7531333174302807`*^9}, {
  3.753137106635773*^9, 3.753137247309715*^9}, {3.7531947900487037`*^9, 
  3.7531947904944687`*^9}, {3.753195726962942*^9, 3.753195727097546*^9}, {
  3.7532112220911207`*^9, 3.753211231087068*^9}, {3.753219671947424*^9, 
  3.753219672230667*^9}, {3.7536313504977007`*^9, 3.7536313557018213`*^9}},
 CellLabel->"In[88]:=",ExpressionUUID->"d6ebd5aa-6428-4c50-b2be-8fcc580b241d"],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.7531960268662033`*^9, 3.7531960531402225`*^9}, {
   3.7532112363320866`*^9, 3.7532112442459*^9}, 
   3.753219670403552*^9},ExpressionUUID->"5e48948b-5d26-4edc-a8cb-\
8649344665cd"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"One", " ", "can", " ", "slide", " ", "and", " ", "check", " ", 
  "how", " ", "this", " ", "feature", " ", "vector", " ", "varies", " ", 
  "along", " ", "the", " ", "various", " ", 
  RowBox[{"images", ".", " ", "One"}], " ", "can", " ", "observe", " ", 
  "that", " ", "different", " ", "textures", " ", "exhibit", " ", "different",
   " ", "distributions"}]], "Code",
 CellChangeTimes->{{3.753640496884555*^9, 3.7536405764947615`*^9}, 
   3.753640614586155*^9},
 CellLabel->"In[38]:=",ExpressionUUID->"54497569-389b-4488-b900-9445734d5fb1"],

Cell[BoxData[
 RowBox[{"along", " ", "and", " ", 
  SuperscriptBox["can", "2"], " ", "check", " ", 
  SuperscriptBox["different", "2"], " ", "distributions", " ", "exhibit", " ",
   "feature", " ", "how", " ", "observe", " ", "One", " ", "slide", " ", 
  "textures", " ", "that", " ", "the", " ", "this", " ", "varies", " ", 
  "various", " ", "vector", " ", 
  RowBox[{"images", ".", "One"}]}]], "Output",
 CellChangeTimes->{3.7536433266153526`*^9},
 CellLabel->"Out[38]=",ExpressionUUID->"57ea8fc1-4a4c-4f54-9a57-9f96f93eb8e7"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Manipulate", "[", 
  RowBox[{
   RowBox[{"ListLinePlot", "[", 
    RowBox[{
     RowBox[{"iCV", "[", 
      RowBox[{"[", "i", "]"}], "]"}], ",", 
     RowBox[{"PlotRange", "\[Rule]", "All"}]}], "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"i", ",", "1", ",", "195", ",", "1"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.7531375602276115`*^9, 3.7531375891709023`*^9}, 
   3.7531946988403645`*^9, {3.753194861844305*^9, 3.7531948721650486`*^9}, {
   3.753194915051961*^9, 3.753194946114395*^9}, {3.7531949814942813`*^9, 
   3.7531949817927227`*^9}, {3.7531951030380163`*^9, 3.753195169673193*^9}, {
   3.7532112580220723`*^9, 3.753211260537388*^9}},
 CellLabel->"In[92]:=",ExpressionUUID->"b7dac978-f641-4ac6-9603-6475eb8c257a"],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`i$$ = 60, Typeset`show$$ = True, 
    Typeset`bookmarkList$$ = {}, Typeset`bookmarkMode$$ = "Menu", 
    Typeset`animator$$, Typeset`animvar$$ = 1, Typeset`name$$ = 
    "\"untitled\"", Typeset`specs$$ = {{
      Hold[$CellContext`i$$], 1, 195, 1}}, Typeset`size$$ = {259., {3., 9.}}, 
    Typeset`update$$ = 0, Typeset`initDone$$, Typeset`skipInitDone$$ = 
    True, $CellContext`i$3474263$$ = 0}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     1, StandardForm, "Variables" :> {$CellContext`i$$ = 1}, 
      "ControllerVariables" :> {
        Hold[$CellContext`i$$, $CellContext`i$3474263$$, 0]}, 
      "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$}, "Body" :> ListLinePlot[
        Part[$CellContext`iCV, $CellContext`i$$], PlotRange -> All], 
      "Specifications" :> {{$CellContext`i$$, 1, 195, 1}}, "Options" :> {}, 
      "DefaultOptions" :> {}],
     ImageSizeCache->{306., {47., 53.}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    SynchronousInitialization->True,
    UndoTrackedVariables:>{Typeset`show$$, Typeset`bookmarkMode$$},
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output",
 CellChangeTimes->{{3.7531375660526977`*^9, 3.7531375897064705`*^9}, 
   3.753194699816724*^9, 3.7531947946123896`*^9, {3.753194863729006*^9, 
   3.753194872767288*^9}, 3.753194949056563*^9, 3.7531949854348984`*^9, {
   3.753195108904304*^9, 3.7531951353626633`*^9}, 3.753195170244626*^9, 
   3.753195730156169*^9, 3.7532112613322616`*^9, 3.7536446493323293`*^9},
 CellLabel->"Out[92]=",ExpressionUUID->"b9dbeba1-4628-4e28-a0f6-6851c7471592"],

Cell[BoxData[
 TemplateBox[{
  "Part","partd",
   "\"Part specification \\!\\(\\*RowBox[{\\\"iCV\\\", \\\"\
\[LeftDoubleBracket]\\\", \\\"60\\\", \\\"\[RightDoubleBracket]\\\"}]\\) is \
longer than depth of object.\"",2,1,1,24553800962094049726,"Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.7536459917035418`*^9},
 CellLabel->"",ExpressionUUID->"5d9a6374-7d6f-4535-89eb-0c5e47a86a99"],

Cell[BoxData[
 TemplateBox[{
  "ListLinePlot","lpn",
   "\"\\!\\(\\*RowBox[{\\\"iCV\\\", \\\"\[LeftDoubleBracket]\\\", \\\"60\\\", \
\\\"\[RightDoubleBracket]\\\"}]\\) is not a list of numbers or pairs of \
numbers.\"",2,1,2,24553800962094049726,"Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.7536459918541327`*^9},
 CellLabel->"",ExpressionUUID->"d410057b-399f-448a-841e-d3253a627ebd"],

Cell[BoxData[
 TemplateBox[{
  "ListLinePlot","lpn",
   "\"\\!\\(\\*RowBox[{\\\"iCV\\\", \\\"\[LeftDoubleBracket]\\\", \\\"60\\\", \
\\\"\[RightDoubleBracket]\\\"}]\\) is not a list of numbers or pairs of \
numbers.\"",2,1,3,24553800962094049726,"Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.753645991935914*^9},
 CellLabel->"",ExpressionUUID->"d7934dfa-c914-47a2-a5a3-64bde22e22b6"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Overall Combined: Stat+Seg+GLCM Diagonal", "Section",
 CellChangeTimes->{{3.753482238976535*^9, 3.7534822447840443`*^9}, {
  3.753482284833989*^9, 
  3.7534822933242984`*^9}},ExpressionUUID->"c220a23a-1679-49db-91e1-\
e0a7c5f20735"],

Cell["\<\
We concatenated all the feature vectors from previous sections to form the \
final classifier.  \
\>", "Text",
 CellChangeTimes->{{3.7536414606759453`*^9, 3.75364146639963*^9}, {
  3.7536415371208177`*^9, 
  3.753641574327047*^9}},ExpressionUUID->"1712b894-a9cb-491a-a034-\
3e547250c8c8"],

Cell[CellGroupData[{

Cell["\<\
GLCM+Segmentation + Statistical Based Feature Classification Accuracy : 95.24 \
%\
\>", "Subsubsection",
 CellChangeTimes->{{3.7536406365092974`*^9, 
  3.753640652110634*^9}},ExpressionUUID->"ad575013-582f-49f0-91f3-\
bc45246783d8"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"featMatrixTr", "=", " ", 
   RowBox[{"Join", "[", 
    RowBox[{"featMatrixTrainingOverall", ",", "iCV", ",", "2"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"featMatrixTe", " ", "=", " ", 
   RowBox[{"Join", "[", 
    RowBox[{"featMatrixTestingOverall", ",", " ", "iCVTest", ",", "2"}], 
    "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"trainingSetOverall", " ", "=", " ", 
   RowBox[{"Thread", "[", 
    RowBox[{"featMatrixTr", "\[Rule]", "classes"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"cFinal", " ", "=", " ", 
  RowBox[{"Classify", "[", 
   RowBox[{"trainingSetOverall", ",", 
    RowBox[{"Method", "\[Rule]", "\"\<LogisticRegression\>\""}]}], 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"labelTestFinal", " ", "=", " ", 
   RowBox[{"ConstantArray", "[", 
    RowBox[{"0", ",", 
     RowBox[{"Length", "[", "testFiles", "]"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"correctLabelsFinal", " ", "=", " ", "0"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"For", "[", 
  RowBox[{
   RowBox[{"i", "=", "1"}], ",", 
   RowBox[{"i", "\[LessEqual]", 
    RowBox[{"Length", "[", "testFiles", "]"}]}], ",", 
   RowBox[{"i", "++"}], ",", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"labelTestFinal", "[", 
      RowBox[{"[", "i", "]"}], "]"}], " ", "=", " ", 
     RowBox[{"cFinal", "[", 
      RowBox[{"featMatrixTe", "[", 
       RowBox[{"[", "i", "]"}], "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
    " ", 
    RowBox[{"If", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"labelTestFinal", "[", 
        RowBox[{"[", "i", "]"}], "]"}], " ", "\[Equal]", " ", 
       RowBox[{"classTest", "[", 
        RowBox[{"[", "i", "]"}], "]"}]}], ",", 
      RowBox[{"correctLabelsFinal", " ", "=", " ", 
       RowBox[{"correctLabelsFinal", "+", "1"}]}], ",", 
      RowBox[{"correctLabelsFinal", " ", "=", " ", "correctLabelsFinal"}]}], 
     "]"}], ";"}]}], "]"}], "\[IndentingNewLine]", 
 RowBox[{"N", "[", 
  RowBox[{"correctLabelsFinal", "/", 
   RowBox[{"Length", "[", "classTest", "]"}]}], "]"}]}], "Input",
 CellChangeTimes->{{3.7532181943627796`*^9, 3.7532182702811785`*^9}, {
  3.7532192135028577`*^9, 3.7532192138249965`*^9}, {3.753219365830683*^9, 
  3.75321937961388*^9}, {3.7532194225470767`*^9, 3.753219452985718*^9}, {
  3.7536304768764763`*^9, 3.753630508972679*^9}, {3.7536318869896836`*^9, 
  3.7536318891967835`*^9}},
 CellLabel->"",ExpressionUUID->"9267c681-e2f2-4c18-9e1c-ef838efc71e9"],

Cell[BoxData[
 TagBox[
  TemplateBox[{RowBox[{
      StyleBox[
       TagBox["ClassifierFunction", "SummaryHead"], 
       "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{
       Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
       TemplateBox[{
         PaneSelectorBox[{False -> GridBox[{{
               PaneBox[
                ButtonBox[
                 DynamicBox[
                  FEPrivate`FrontEndResource[
                  "FEBitmaps", "SquarePlusIconMedium"]], 
                 ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                 None, Evaluator -> Automatic, Method -> "Preemptive"], 
                Alignment -> {Center, Center}, ImageSize -> 
                Dynamic[{
                  Automatic, 
                   3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
               GraphicsBox[{{
                  PointSize[0.13], 
                  GrayLevel[0.45], 
                  
                  PointBox[{{0.9821769431797024, -0.440194219686987}, {
                   1.1339776261519132`, 0.8056918676854272}, {
                   0.5279892326667741, 0.6574306661126254}, {
                   0.022147046479890797`, 1.4937877187998898`}}], 
                  GrayLevel[0.7], 
                  
                  PointBox[{{-0.9815166384819979, 
                   0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
                  GrayLevel[0.55], 
                  AbsoluteThickness[1.5], 
                  LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
                Axes -> {False, False}, AxesLabel -> {None, None}, 
                 AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                   AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
                 Frame -> {{True, True}, {True, True}}, 
                 FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
                 Directive[
                   Thickness[Tiny], 
                   GrayLevel[0.7]], 
                 FrameTicks -> {{None, None}, {None, None}}, 
                 GridLines -> {None, None}, 
                 LabelStyle -> {FontFamily -> "Arial"}, 
                 Method -> {"ScalingFunctions" -> None}, 
                 PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> 
                 True, PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
                 Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
                ImageSize -> 
                Dynamic[{
                  Automatic, 
                   3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}], Frame -> True, FrameTicks -> None, 
                FrameStyle -> Directive[
                  Opacity[0.5], 
                  Thickness[Tiny], 
                  RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
                GrayLevel[0.94]], 
               GridBox[{{
                  RowBox[{
                    TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    TagBox[
                    TooltipBox[
                    TemplateBox[{"\"Mixed\"", 
                    StyleBox[
                    
                    TemplateBox[{"\" (number: \"", "53", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    TagBox[
                    RowBox[{"{", 
                    
                    RowBox[{
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\""}], "}"}], Short[#, 10]& ]], Annotation[#, 
                    
                    Short[{"Numerical", "Numerical", "Numerical", "Numerical",
                     "Numerical", "Numerical", "Numerical", "Numerical", 
                    "Numerical", "Numerical", "Numerical", "Numerical", 
                    "Numerical", "Numerical", "Numerical", "Numerical", 
                    "Numerical", "Numerical", "Numerical", "Numerical", 
                    "Numerical", "Numerical", "Numerical", "Numerical", 
                    "Numerical", "Numerical", "Numerical", "Numerical", 
                    "Numerical", "Numerical", "Numerical", "Numerical", 
                    "Numerical", "Numerical", "Numerical", "Numerical", 
                    "Numerical", "Numerical", "Numerical", "Numerical", 
                    "Numerical", "Numerical", "Numerical", "Numerical", 
                    "Numerical", "Numerical", "Numerical", "Numerical", 
                    "Numerical", "Numerical", "Numerical", "Numerical", 
                    "Numerical"}, 10], "Tooltip"]& ], "SummaryItem"]}]}, {
                  RowBox[{
                    TagBox[
                    "\"Number of classes: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    TagBox[
                    TooltipBox["6", 
                    TagBox[
                    
                    TemplateBox[{",", "\",\"", "1", "2", "3", "4", "5", "6"}, 
                    "RowWithSeparators"], Short[#, 20]& ]], Annotation[#, 
                    Short[
                    Row[{1, 2, 3, 4, 5, 6}, ","], 20], "Tooltip"]& ], 
                    "SummaryItem"]}]}}, 
                GridBoxAlignment -> {
                 "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
                False, 
                GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                GridBoxSpacings -> {
                 "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                BaseStyle -> {
                 ShowStringCharacters -> False, NumberMarks -> False, 
                  PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
             GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             BaselinePosition -> {1, 1}], True -> GridBox[{{
               PaneBox[
                ButtonBox[
                 DynamicBox[
                  FEPrivate`FrontEndResource[
                  "FEBitmaps", "SquareMinusIconMedium"]], 
                 ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                 None, Evaluator -> Automatic, Method -> "Preemptive"], 
                Alignment -> {Center, Center}, ImageSize -> 
                Dynamic[{
                  Automatic, 
                   3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
               GraphicsBox[{{
                  PointSize[0.13], 
                  GrayLevel[0.45], 
                  
                  PointBox[{{0.9821769431797024, -0.440194219686987}, {
                   1.1339776261519132`, 0.8056918676854272}, {
                   0.5279892326667741, 0.6574306661126254}, {
                   0.022147046479890797`, 1.4937877187998898`}}], 
                  GrayLevel[0.7], 
                  
                  PointBox[{{-0.9815166384819979, 
                   0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
                  GrayLevel[0.55], 
                  AbsoluteThickness[1.5], 
                  LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
                Axes -> {False, False}, AxesLabel -> {None, None}, 
                 AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                   AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
                 Frame -> {{True, True}, {True, True}}, 
                 FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
                 Directive[
                   Thickness[Tiny], 
                   GrayLevel[0.7]], 
                 FrameTicks -> {{None, None}, {None, None}}, 
                 GridLines -> {None, None}, 
                 LabelStyle -> {FontFamily -> "Arial"}, 
                 Method -> {"ScalingFunctions" -> None}, 
                 PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> 
                 True, PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
                 Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
                ImageSize -> 
                Dynamic[{
                  Automatic, 
                   3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}], Frame -> True, FrameTicks -> None, 
                FrameStyle -> Directive[
                  Opacity[0.5], 
                  Thickness[Tiny], 
                  RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
                GrayLevel[0.94]], 
               GridBox[{{
                  RowBox[{
                    TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    TagBox[
                    TooltipBox[
                    TemplateBox[{"\"Mixed\"", 
                    StyleBox[
                    
                    TemplateBox[{"\" (number: \"", "53", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    TagBox[
                    RowBox[{"{", 
                    
                    RowBox[{
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\""}], "}"}], Short[#, 10]& ]], Annotation[#, 
                    
                    Short[{"Numerical", "Numerical", "Numerical", "Numerical",
                     "Numerical", "Numerical", "Numerical", "Numerical", 
                    "Numerical", "Numerical", "Numerical", "Numerical", 
                    "Numerical", "Numerical", "Numerical", "Numerical", 
                    "Numerical", "Numerical", "Numerical", "Numerical", 
                    "Numerical", "Numerical", "Numerical", "Numerical", 
                    "Numerical", "Numerical", "Numerical", "Numerical", 
                    "Numerical", "Numerical", "Numerical", "Numerical", 
                    "Numerical", "Numerical", "Numerical", "Numerical", 
                    "Numerical", "Numerical", "Numerical", "Numerical", 
                    "Numerical", "Numerical", "Numerical", "Numerical", 
                    "Numerical", "Numerical", "Numerical", "Numerical", 
                    "Numerical", "Numerical", "Numerical", "Numerical", 
                    "Numerical"}, 10], "Tooltip"]& ], "SummaryItem"]}]}, {
                  RowBox[{
                    TagBox[
                    "\"Number of classes: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    TagBox[
                    TooltipBox["6", 
                    TagBox[
                    
                    TemplateBox[{",", "\",\"", "1", "2", "3", "4", "5", "6"}, 
                    "RowWithSeparators"], Short[#, 20]& ]], Annotation[#, 
                    Short[
                    Row[{1, 2, 3, 4, 5, 6}, ","], 20], "Tooltip"]& ], 
                    "SummaryItem"]}]}, {
                  RowBox[{
                    TagBox["\"Method: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"LogisticRegression\"", "SummaryItem"]}]}, {
                  RowBox[{
                    TagBox[
                    "\"Number of training examples: \"", 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox["195", "SummaryItem"]}]}}, 
                GridBoxAlignment -> {
                 "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
                False, GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                GridBoxSpacings -> {
                 "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                BaseStyle -> {
                 ShowStringCharacters -> False, NumberMarks -> False, 
                  PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
             GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             BaselinePosition -> {1, 1}]}, 
          Dynamic[Typeset`open$$], ImageSize -> Automatic]}, "SummaryPanel", 
        DisplayFunction -> (
         ButtonBox[#, Active -> False, Alignment -> Left, 
          Appearance -> {
           "Default" -> 
            FrontEnd`FileName[{"Typeset", "SummaryBox"}, "Panel.9.png"]}, 
          FrameMargins -> 7, BaseStyle -> {}, 
          DefaultBaseStyle -> {"Panel", Background -> None}, BaselinePosition -> 
          Baseline]& )], DynamicModuleValues :> {}], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("ClassifierFunction[\[Ellipsis]]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{
  3.7532183151766443`*^9, {3.753219008808011*^9, 3.75321902385878*^9}, {
   3.753219223021413*^9, 3.753219236556235*^9}, 3.753219382214885*^9, {
   3.753219425509159*^9, 3.7532194557842336`*^9}, {3.753630459524851*^9, 
   3.7536305118669405`*^9}, {3.7536312940027046`*^9, 3.7536312988367834`*^9}, 
   3.7536313643426847`*^9, 
   3.753631891723981*^9},ExpressionUUID->"c94b95f9-3914-4e99-8fac-\
0837059d6fe4"],

Cell[BoxData["0.9523809523809523`"], "Output",
 CellChangeTimes->{
  3.7532183151766443`*^9, {3.753219008808011*^9, 3.75321902385878*^9}, {
   3.753219223021413*^9, 3.753219236556235*^9}, 3.753219382214885*^9, {
   3.753219425509159*^9, 3.7532194557842336`*^9}, {3.753630459524851*^9, 
   3.7536305118669405`*^9}, {3.7536312940027046`*^9, 3.7536312988367834`*^9}, 
   3.7536313643426847`*^9, 
   3.7536318918386745`*^9},ExpressionUUID->"4f683589-7fc9-4e0b-8900-\
3f0cdd666cd2"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ClassifierInformation", "[", "cFinal", "]"}]], "Input",
 CellChangeTimes->{{3.7536318749758034`*^9, 
  3.753631880492058*^9}},ExpressionUUID->"ae700599-614b-44b9-a288-\
dd64f9827694"],

Cell[BoxData[
 TagBox[
  StyleBox[
   FrameBox[GridBox[{
      {
       ItemBox[
        FrameBox[
         StyleBox["\<\"Classifier information\"\>", "SuggestionsBarText",
          StripOnInput->False,
          FontSize->12,
          FontWeight->Bold],
         FrameMargins->{{10, 5}, {-5, 5}},
         FrameStyle->None,
         StripOnInput->False],
        Alignment->{Left, Bottom},
        Background->RGBColor[0.93119, 0.93119, 0.93119],
        Frame->{{False, False}, {True, False}},
        FrameStyle->Opacity[0.1],
        ItemSize->{Automatic, 1},
        StripOnInput->False]},
      {
       ItemBox[
        TagBox[
         FrameBox[
          TagBox[GridBox[{
             {
              
              TemplateBox[{
               TemplateBox[{5}, "Spacer1"],StyleBox["\"Input type\"", 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], 
              TagBox[
               TooltipBox[
                TemplateBox[{"\"Mixed\"",StyleBox[
                   
                   TemplateBox[{"\" (number: \"", "53", "\")\""}, 
                    "RowDefault"], 
                   GrayLevel[0.5], StripOnInput -> False]},
                 "RowDefault"],
                TagBox[
                 RowBox[{"{", 
                   
                   RowBox[{
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\""}], "}"}], Short[#, 10]& ]],
               Annotation[#, 
                
                Short[{"Numerical", "Numerical", "Numerical", "Numerical", 
                  "Numerical", "Numerical", "Numerical", "Numerical", 
                  "Numerical", "Numerical", "Numerical", "Numerical", 
                  "Numerical", "Numerical", "Numerical", "Numerical", 
                  "Numerical", "Numerical", "Numerical", "Numerical", 
                  "Numerical", "Numerical", "Numerical", "Numerical", 
                  "Numerical", "Numerical", "Numerical", "Numerical", 
                  "Numerical", "Numerical", "Numerical", "Numerical", 
                  "Numerical", "Numerical", "Numerical", "Numerical", 
                  "Numerical", "Numerical", "Numerical", "Numerical", 
                  "Numerical", "Numerical", "Numerical", "Numerical", 
                  "Numerical", "Numerical", "Numerical", "Numerical", 
                  "Numerical", "Numerical", "Numerical", "Numerical", 
                  "Numerical"}, 10], "Tooltip"]& ]},
             {
              
              TemplateBox[{
               TemplateBox[{5}, "Spacer1"],StyleBox["\"Number of classes\"", 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], 
              TagBox[
               TooltipBox["6",
                TagBox[
                 
                 TemplateBox[{",", "\",\"", "1", "2", "3", "4", "5", "6"}, 
                  "RowWithSeparators"], Short[#, 20]& ]],
               Annotation[#, 
                Short[
                 Row[{1, 2, 3, 4, 5, 6}, ","], 20], "Tooltip"]& ]},
             {
              TemplateBox[{TemplateBox[{5}, "Spacer1"],StyleBox["\"Method\"", 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], 
              TagBox[
               TooltipBox["\<\"LogisticRegression\"\>",
                TemplateBox[{
                  TagBox[
                   
                   DynamicModuleBox[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$ = 
                    Data`UnorderedAssociation[
                    "RowCount" -> 20, "Length" -> 3, "InitialType" -> 
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], 
                    TypeSystem`Atom[String]}], "Shape" -> 
                    TypeSystem`PackageScope`DocumentShape[
                    
                    Association[{"L1Regularization"} -> 
                    TypeSystem`PackageScope`AtomShape[34], {
                    "L2Regularization"} -> 
                    TypeSystem`PackageScope`AtomShape[60], {
                    "OptimizationMethod"} -> 
                    TypeSystem`PackageScope`AtomShape[48.00000000000001]], 1],
                     "InitialData" -> 
                    TypeSystem`PackageScope`CacheHandle[1614632553], "Type" -> 
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], 
                    TypeSystem`Atom[String]}], "HandleQ" -> True, "RowTarget" -> 
                    20, "Data" -> 
                    TypeSystem`PackageScope`CacheHandle[1614632553]], 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$ = 1, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
                    DynamicModule[{
                    TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
                    Style[
                    Grid[{{
                    Item[
                    Annotation[
                    EventHandler[
                    MouseAppearance[
                    Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"L1Regularization\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"L1Regularization\"", FontColor -> 
                    RGBColor[0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 256246006][{
                    Key["L1Regularization"]}]], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    256246006][
                    GeneralUtilities`Slice[
                    Key["L1Regularization"]]], "Mouse"], Background -> 
                    GrayLevel[0.95], Alignment -> {Left, Baseline}], 
                    Pane[
                    Annotation[
                    RawBoxes["0"], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    256246006][
                    GeneralUtilities`Slice[
                    Key["L1Regularization"]]], "Mouse"], 
                    ImageSize -> {{34, Full}, Automatic}, 
                    Alignment -> {Left, Baseline}]}, {
                    Item[
                    Annotation[
                    EventHandler[
                    MouseAppearance[
                    Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"L2Regularization\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"L2Regularization\"", FontColor -> 
                    RGBColor[0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 256246006][{
                    Key["L2Regularization"]}]], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    256246006][
                    GeneralUtilities`Slice[
                    Key["L2Regularization"]]], "Mouse"], Background -> 
                    GrayLevel[0.95], Alignment -> {Left, Baseline}], 
                    Pane[
                    Annotation[
                    RawBoxes["1."], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    256246006][
                    GeneralUtilities`Slice[
                    Key["L2Regularization"]]], "Mouse"], 
                    ImageSize -> {{60, Full}, Automatic}, 
                    Alignment -> {Left, Baseline}]}, {
                    Item[
                    Annotation[
                    EventHandler[
                    MouseAppearance[
                    Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"OptimizationMethod\"", FontColor -> 
                    GrayLevel[0.4]]], {{20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"OptimizationMethod\"", FontColor -> 
                    RGBColor[0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 256246006][{
                    Key["OptimizationMethod"]}]], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    256246006][
                    GeneralUtilities`Slice[
                    Key["OptimizationMethod"]]], "Mouse"], Background -> 
                    GrayLevel[0.95], Alignment -> {Left, Baseline}], 
                    Pane[
                    Annotation["LBFGS", 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    256246006][
                    GeneralUtilities`Slice[
                    Key["OptimizationMethod"]]], "Mouse"], 
                    ImageSize -> {{48.00000000000001, Full}, Automatic}, 
                    Alignment -> {Left, Baseline}]}}, 
                    BaseStyle -> {ContextMenu -> {
                    MenuItem["Copy position to clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], 
                    MenuItem["Copy data to clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], Delimiter, 
                    MenuItem["Paste position in new cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], 
                    MenuItem["Paste data in new cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic]}, FontFamily -> "Verdana", 
                    FontSize -> 12}, Alignment -> Left, RowMinHeight -> 1.5, 
                    Dividers -> All, FrameStyle -> GrayLevel[0.85], 
                    BaseStyle -> {FontFamily -> "Verdana", FontSize -> 12}], 
                    LineBreakWithin -> False, ContextMenu -> {}, NumberMarks -> 
                    False, ShowAutoStyles -> False]], 
                    TypeSystem`NestedGrid`PackagePrivate`initialQ = True, 
                    TypeSystem`NestedGrid`PackagePrivate`self = $Failed}, 
                    Dynamic[
                    TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
                    Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
                    
                    Module[{
                    TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
                    TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
                    TypeSystem`NestedGrid`PackagePrivate`LookupCacheValue[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$["Data"]]}, 
                    TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = 
                    If[TypeSystem`NestedGrid`PackagePrivate`tmpData$ === 
                    TypeSystem`NestedGrid`PackagePrivate`$NotCached, 
                    TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
                    TypeSystem`NestedGrid`PackagePrivate`renderGrid[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 256246006][
                    TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
                    Not[
                    FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
                    TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
                    TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
                    TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$; If[
                    FailureQ[
                    TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
                    TypeSystem`SparseGrid[
                    TypeSystem`H["(data no longer present)"]], 
                    If[GeneralUtilities`$DebugMode, 
                    
                    Row[{TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
                    "  ", 
                    TypeSystem`NestedGrid`PackagePrivate`formatState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$]}], 
                    TypeSystem`NestedGrid`PackagePrivate`renderedGrid]]], 
                    TrackedSymbols :> {
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$}], 
                    DynamicModuleValues :> {}], 
                    TypeSystem`NestedGrid`PackagePrivate`$posCell$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
                    TypeSystem`NestedGrid`PackagePrivate`alignBar[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$][
                    TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
                    TypeSystem`PackageScope`Pathbar[
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    256246006]]]], 
                    TrackedSymbols :> {
                    TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
                    TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Framed[
                    Dynamic[
                    Replace[
                    MouseAnnotation[Null], {
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    256246006][Null] -> "", 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    256246006][
                    Pattern[TypeSystem`NestedGrid`PackagePrivate`path, 
                    Blank[]]] :> (
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
                    TypeSystem`NestedGrid`PackagePrivate`path; 
                    TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
                    TypeSystem`NestedGrid`PackagePrivate`path, 
                    TypeSystem`NestedGrid`PackagePrivate`makePathElements]), 
                    Null :> Spacer[10], Blank[] :> Spacer[10]}], 
                    TrackedSymbols :> {}], FrameStyle -> None, ImageMargins -> 
                    0, FrameMargins -> 0, Alignment -> Top, 
                    ImageSize -> {Automatic, 14}]}, 
                    DynamicBox[
                    ToBoxes[
                    Column[
                    If[TypeSystem`NestedGrid`PackagePrivate`$path$$ == {}, {
                    TypeSystem`NestedGrid`PackagePrivate`displayScrollBar[
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$], 
                    TypeSystem`NestedGrid`PackagePrivate`onDesktopShow[
                    TypeSystem`NestedGrid`PackagePrivate`alignBar[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$][
                    TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$]]}, {
                    TypeSystem`NestedGrid`PackagePrivate`$topBar$$, 
                    TypeSystem`NestedGrid`PackagePrivate`displayScrollBar[
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$], 
                    TypeSystem`NestedGrid`PackagePrivate`onDesktopShow[
                    TypeSystem`NestedGrid`PackagePrivate`alignBar[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$][
                    TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$]]}], 
                    Spacings -> 
                    If[TypeSystem`NestedGrid`PackagePrivate`$path$$ == {}, 
                    0, {{}, {0, 0.05, 0}}]], StandardForm], 
                    TrackedSymbols :> {
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
                    Initialization :> Block[{$ContextPath = $ContextPath}, 
                    Needs["TypeSystem`"]], DynamicModuleValues :> {}, 
                    BaseStyle -> {LineBreakWithin -> False}, Deinitialization :> 
                    TypeSystem`NestedGrid`PackagePrivate`deleteState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]], Deploy, 
                   DefaultBaseStyle -> "Deploy"]}, "CopyTag", 
                 DisplayFunction -> (#& ), 
                 InterpretationFunction -> ("Dataset[<>]"& )]],
               Annotation[#, 
                Dataset[
                 Association[
                 "L1Regularization" -> 0, "L2Regularization" -> 1., 
                  "OptimizationMethod" -> "LBFGS"], 
                 
                 TypeSystem`Struct[{
                  "L1Regularization", "L2Regularization", 
                   "OptimizationMethod"}, {
                   TypeSystem`Atom[Integer], 
                   TypeSystem`Atom[Real], 
                   TypeSystem`Atom[String]}], 
                 Association["ID" -> 118859081036585]], "Tooltip"]& ]},
             {
              
              TemplateBox[{
               TemplateBox[{5}, "Spacer1"],StyleBox["\"Accuracy\"", 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], 
              TagBox[
               TooltipBox[
                
                TemplateBox[{
                 TemplateBox[{
                   "94.8717948717948615922`3.", "\"%\"", "percent", 
                    "\"Percent\""}, "QuantityPostfix", SyntaxForm -> Mod],
                  StyleBox[
                   TemplateBox[{"\" \[PlusMinus] \"", 
                    
                    TemplateBox[{
                    "3.5781575124326394644`2.", "\"%\"", "percent", 
                    "\"Percent\""}, "QuantityPostfix", SyntaxForm -> Mod]}, 
                    "RowDefault"], {10, 
                    Opacity[0.5]}, StripOnInput -> False]},
                 "RowDefault"],
                
                TemplateBox[{
                 "\"95% confidence interval: [\"", "0.8771547984692958932`3.",
                   "\", \"", "1.0202810989666013519`3.", "\"]\""}, 
                 "RowDefault"],
                TooltipStyle->{}],
               Annotation[#, 
                
                Row[{"95% confidence interval: [", 0.8771547984692958932`3., 
                  ", ", 1.0202810989666013519`3., "]"}], "Tooltip"]& ]},
             {
              TemplateBox[{TemplateBox[{5}, "Spacer1"],StyleBox[
                 TagBox[
                  TooltipBox[
                  "\"Loss\"", "\"Mean cross entropy\"", LabelStyle -> 
                   "TextStyling"], 
                  Annotation[#, "Mean cross entropy", "Tooltip"]& ], 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], 
              TagBox[
               TooltipBox[
                TemplateBox[{"0.1944417000456226119`3.",StyleBox[
                   
                   TemplateBox[{
                    "\" \[PlusMinus] \"", "0.0462274684243998493`2."}, 
                    "RowDefault"], {10, 
                    Opacity[0.5]}, StripOnInput -> False]},
                 "RowDefault"],
                
                TemplateBox[{
                 "\"95% confidence interval: [\"", "0.1019867631968229132`3.",
                   "\", \"", "0.2868966368944222967`3.", "\"]\""}, 
                 "RowDefault"],
                TooltipStyle->{}],
               Annotation[#, 
                
                Row[{"95% confidence interval: [", 0.1019867631968229132`3., 
                  ", ", 0.2868966368944222967`3., "]"}], "Tooltip"]& ]},
             {
              
              TemplateBox[{
               TemplateBox[{5}, "Spacer1"],StyleBox["\"Evaluation time\"", 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], 
              
              TemplateBox[{
               "191.`",
                RowBox[{
                 "\"\[Micro]s\"", "\[InvisibleSpace]", "\"/\"", 
                  "\[InvisibleSpace]", "\"example\""}],
                "microseconds per example",FractionBox[
                "\"Microseconds\"", "\"Examples\""]},
               "Quantity"]},
             {
              
              TemplateBox[{
               TemplateBox[{5}, "Spacer1"],StyleBox["\"Classifier memory\"", 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], 
              TemplateBox[{"378.`","\"kB\"","kilobytes","\"Kilobytes\""},
               "Quantity"]},
             {
              
              TemplateBox[{
               TemplateBox[{5}, "Spacer1"],StyleBox[
                "\"Training examples used\"", 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], 
              TemplateBox[{"195","\"examples\"","examples","\"Examples\""},
               "Quantity"]},
             {
              
              TemplateBox[{
               TemplateBox[{5}, "Spacer1"],StyleBox["\"Training time\"", 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], 
              TemplateBox[{"1.83`","\"s\"","seconds","\"Seconds\""},
               "Quantity"]},
             {
              
              DynamicModuleBox[{
               MachineLearning`file5Automation`PackagePrivate`pos$$ = 1}, 
               DynamicBox[ToBoxes[
                 Show[
                  Part[{
                    Graphics[{{{{}, {{{}, {}, {
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.1972245773362196`, -0.07139869834378168}, {
                    3.6888794541139363`, -0.5007942499774027}, {
                    5.049856007249537, -1.6376229035514847`}}]}, {
                    Hue[0.9060679774997897, 0.6, 0.6], 
                    Directive[
                    Opacity[0]], 
                    
                    Line[{{2.1972245773362196`, -0.25372025513773633`}, {
                    2.1972245773362196`, -1.45530134675753}}]}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6], 
                    AbsolutePointSize[6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 8.96], {0., 0.}], {{{
                    2.1972245773362196`, -0.07139869834378168}}, {{
                    3.6888794541139363`, -0.5007942499774027}}, {{
                    5.049856007249537, -1.6376229035514847`}}}]}, {
                    Directive[
                    Opacity[0]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledSquare]", FontSize -> 8.96], {0., 0.}], {{{
                    2.1972245773362196`, -0.25372025513773633`}}, {{
                    2.1972245773362196`, -1.45530134675753}}}]}, {}}}, {}, \
{}, {}, {}}}, {{{}, {{{}, {}, {
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    
                    Line[{{2.1972245773362196`, -0.14136420847782263`}, {
                    2.1972245773362196`, -0.006009893735668844}}]}, {
                    Hue[0.9060679774997897, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    
                    Line[{{3.6888794541139363`, -0.6584329161834537}, {
                    3.6888794541139363`, -0.3646548284033826}}]}, {
                    Hue[0.1421359549995791, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    
                    Line[{{5.049856007249537, -1.9090965408979075`}, {
                    5.049856007249537, -1.424332033506649}}]}}}, {}, {}, {}, \
{}}}}, {DisplayFunction -> Identity, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& }, 
                    DisplayFunction -> Identity, DisplayFunction -> Identity, 
                    DisplayFunction -> Identity, PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.02], 
                    Scaled[0.05]}}, 
                    AxesOrigin -> {2.086414691506906, -1.751300466832689}, 
                    PlotRange -> {{2.1344536593519843`, 
                    Log[195]}, {-1.724635359396357, -0.07139869834378168}}, 
                    PlotRangeClipping -> True, 
                    ImagePadding -> {{30, 10}, {35, 0}}, DisplayFunction -> 
                    Identity, AspectRatio -> GoldenRatio^(-1), 
                    Axes -> {True, True}, AxesLabel -> {None, None}, 
                    AxesOrigin -> {2.086414691506906, -1.751300466832689}, 
                    DisplayFunction :> Identity, 
                    Frame -> {{True, True}, {True, True}}, 
                    FrameLabel -> {{None, None}, {
                    "training examples used", None}}, FrameTicks -> {{
                    Charting`ScaledTicks[{Log, Exp}], {}}, {
                    Charting`ScaledTicks[{Log, Exp}], {}}}, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& }, 
                    GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], ImageMargins -> 0, 
                    ImagePadding -> {{30, 10}, {35, 0}}, ImageSize -> 330, 
                    Method -> {
                    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Exp[#]& )[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Exp[#]& )[
                    Part[#, 2]]}& )}}, PlotRange -> {{2.1344536593519843`, 
                    Log[195]}, {-1.724635359396357, -0.07139869834378168}}, 
                    PlotRangeClipping -> True, PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.02], 
                    Scaled[0.05]}}, Ticks -> {
                    Charting`ScaledTicks[{Log, Exp}], 
                    Charting`ScaledTicks[{Log, Exp}]}}], 
                    Graphics[{{{}, {{{}, {}, {
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.1972245773362196`, 0.6666889469897685}, {
                    3.6888794541139363`, 0.8179431072210065}, {
                    5.049856007249537, 0.9487179487179487}}]}, {
                    Hue[0.9060679774997897, 0.6, 0.6], 
                    Directive[
                    Opacity[0]], 
                    
                    Line[{{2.1972245773362196`, 0.7905982905982906}, {
                    2.1972245773362196`, 0.8000267363877223}}]}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6], 
                    AbsolutePointSize[6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 8.96], {0., 0.}], {{{
                    2.1972245773362196`, 0.6666889469897685}}, {{
                    3.6888794541139363`, 0.8179431072210065}}, {{
                    5.049856007249537, 0.9487179487179487}}}]}, {
                    Directive[
                    Opacity[0]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledSquare]", FontSize -> 8.96], {0., 0.}], {{{
                    2.1972245773362196`, 0.7905982905982906}}, {{
                    2.1972245773362196`, 
                    0.8000267363877223}}}]}, {}}}, {}, {}, {}, {}}}, {
                    DisplayFunction -> Identity, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Identity, Identity}][#, #2, {6,
                     6}]& }, DisplayFunction -> Identity, DisplayFunction -> 
                    Identity, DisplayFunction -> Identity, 
                    PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.05], 0}}, 
                    AxesOrigin -> {2.086414691506906, 0.6509005286892838}, 
                    PlotRange -> {{2.1344536593519843`, 
                    Log[195]}, {0.6666889469897685, 1}}, PlotRangeClipping -> 
                    True, ImagePadding -> {{30, 10}, {35, 0}}, 
                    DisplayFunction -> Identity, AspectRatio -> 
                    GoldenRatio^(-1), Axes -> {True, True}, 
                    AxesLabel -> {None, None}, 
                    AxesOrigin -> {2.086414691506906, 0.6509005286892838}, 
                    DisplayFunction :> Identity, 
                    Frame -> {{True, True}, {True, True}}, 
                    FrameLabel -> {{None, None}, {
                    "training examples used", None}}, 
                    FrameTicks -> {{Automatic, None}, {
                    Charting`ScaledTicks[{Log, Exp}], {}}}, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Identity, Identity}][#, #2, {6,
                     6}]& }, GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], ImageMargins -> 0, 
                    ImagePadding -> {{30, 10}, {35, 0}}, ImageSize -> 330, 
                    Method -> {
                    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Identity[#]& )[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Identity[#]& )[
                    Part[#, 2]]}& )}}, PlotRange -> {{2.1344536593519843`, 
                    Log[195]}, {0.6666889469897685, 1}}, PlotRangeClipping -> 
                    True, PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.05], 0}}, Ticks -> {
                    Charting`ScaledTicks[{Log, Exp}], Automatic}}], 
                    Graphics[{{{{}, {{{}, {}, 
                    Tooltip[{
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.1972245773362196`, -0.07139869834378168}, {
                    3.6888794541139363`, -0.5007942499774027}, {
                    5.049856007249537, -1.6376229035514847`}}]}, 
                    "LogisticRegression"], 
                    Tooltip[{
                    Hue[0.9060679774997897, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.1972245773362196`, 0.5537933220368644}, {
                    5.049856007249537, -0.721959085884252}}]}, 
                    "RandomForest"], 
                    Tooltip[{
                    Hue[0.1421359549995791, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.560181, 0.691569, 0.194885], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.1972245773362196`, 2.408962588268165}, {
                    2.1972245773362196`, 2.408962588268165}}]}, "NaiveBayes"], 
                    Tooltip[{
                    Hue[0.37820393249936934`, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.922526, 0.385626, 0.209179], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.1972245773362196`, 0.4841801219494678}, {
                    5.049856007249537, -0.3292140381030391}}]}, 
                    "NearestNeighbors"], 
                    Tooltip[{
                    Hue[0.6142719099991583, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.528488, 0.470624, 0.701351], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.1972245773362196`, 0.6204890044341929}, {
                    5.049856007249537, -0.8712931489163864}}]}, 
                    "DecisionTree"], 
                    Tooltip[{
                    Hue[0.8503398874989481, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.772079, 0.431554, 0.102387], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.1972245773362196`, 0.8166380020654994}, {
                    2.1972245773362196`, 0.8166380020654994}}]}, 
                    "LogisticRegression"]}}, {}, {}, {}, {}}}}, {
                    DisplayFunction -> Identity, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& }, 
                    DisplayFunction -> Identity, DisplayFunction -> Identity, 
                    DisplayFunction -> Identity, PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.02], 
                    Scaled[0.05]}}, 
                    AxesOrigin -> {2.086414691506906, -1.9313266892480725`}, 
                    PlotRange -> {{2.1344536593519843`, 
                    Log[195]}, {-1.8624332086525763`, 2.408962588268165}}, 
                    PlotRangeClipping -> True, 
                    ImagePadding -> {{30, 10}, {35, 0}}, DisplayFunction -> 
                    Identity, AspectRatio -> GoldenRatio^(-1), 
                    Axes -> {True, True}, AxesLabel -> {None, None}, 
                    AxesOrigin -> {2.086414691506906, -1.9313266892480725`}, 
                    DisplayFunction :> Identity, 
                    Frame -> {{True, True}, {True, True}}, 
                    FrameLabel -> {{None, None}, {
                    "training examples used", None}}, FrameTicks -> {{
                    Charting`ScaledTicks[{Log, Exp}], {}}, {
                    Charting`ScaledTicks[{Log, Exp}], {}}}, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& }, 
                    GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], ImageMargins -> 0, 
                    ImagePadding -> {{30, 10}, {35, 0}}, ImageSize -> 330, 
                    Method -> {
                    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Exp[#]& )[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Exp[#]& )[
                    Part[#, 2]]}& )}}, PlotRange -> {{2.1344536593519843`, 
                    Log[195]}, {-1.8624332086525763`, 2.408962588268165}}, 
                    PlotRangeClipping -> True, PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.02], 
                    Scaled[0.05]}}, Ticks -> {
                    Charting`ScaledTicks[{Log, Exp}], 
                    Charting`ScaledTicks[{Log, Exp}]}}]}, 
                   MachineLearning`file5Automation`PackagePrivate`pos$$], 
                  PlotLabel -> Grid[{{
                    Button[
                    
                    MachineLearning`file5Automation`PackagePrivate`\
buttonGraphics[
                    Line[{{0, 0.8}, {-1, 0}, {0, -0.8}}]], 
                    MachineLearning`file5Automation`PackagePrivate`pos$$ = 
                    Max[MachineLearning`file5Automation`PackagePrivate`pos$$ - 
                    1, 1], Appearance -> "Frameless"], 
                    Part[{
                    Tooltip[
                    "Learning curve", 
                    "mean cross entropy for best algorithm at each training \
size"], "Accuracy", 
                    Tooltip[
                    "Learning curves for all algorithms", 
                    "mean cross entropy at each training size"]}, 
                    MachineLearning`file5Automation`PackagePrivate`pos$$], 
                    Button[
                    
                    MachineLearning`file5Automation`PackagePrivate`\
buttonGraphics[
                    Line[{{0, 0.8}, {1, 0}, {0, -0.8}}]], 
                    MachineLearning`file5Automation`PackagePrivate`pos$$ = 
                    Min[MachineLearning`file5Automation`PackagePrivate`pos$$ + 
                    1, 
                    Length[{
                    Graphics[{{{{}, {{{}, {}, {
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.1972245773362196`, -0.07139869834378168}, {
                    3.6888794541139363`, -0.5007942499774027}, {
                    5.049856007249537, -1.6376229035514847`}}]}, {
                    Hue[0.9060679774997897, 0.6, 0.6], 
                    Directive[
                    Opacity[0]], 
                    
                    Line[{{2.1972245773362196`, -0.25372025513773633`}, {
                    2.1972245773362196`, -1.45530134675753}}]}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6], 
                    AbsolutePointSize[6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 8.96], {0., 0.}], {{{
                    2.1972245773362196`, -0.07139869834378168}}, {{
                    3.6888794541139363`, -0.5007942499774027}}, {{
                    5.049856007249537, -1.6376229035514847`}}}]}, {
                    Directive[
                    Opacity[0]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledSquare]", FontSize -> 8.96], {0., 0.}], {{{
                    2.1972245773362196`, -0.25372025513773633`}}, {{
                    2.1972245773362196`, -1.45530134675753}}}]}, {}}}, {}, \
{}, {}, {}}}, {{{}, {{{}, {}, {
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    
                    Line[{{2.1972245773362196`, -0.14136420847782263`}, {
                    2.1972245773362196`, -0.006009893735668844}}]}, {
                    Hue[0.9060679774997897, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    
                    Line[{{3.6888794541139363`, -0.6584329161834537}, {
                    3.6888794541139363`, -0.3646548284033826}}]}, {
                    Hue[0.1421359549995791, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    
                    Line[{{5.049856007249537, -1.9090965408979075`}, {
                    5.049856007249537, -1.424332033506649}}]}}}, {}, {}, {}, \
{}}}}, {DisplayFunction -> Identity, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& }, 
                    DisplayFunction -> Identity, DisplayFunction -> Identity, 
                    DisplayFunction -> Identity, PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.02], 
                    Scaled[0.05]}}, 
                    AxesOrigin -> {2.086414691506906, -1.751300466832689}, 
                    PlotRange -> {{2.1344536593519843`, 
                    Log[195]}, {-1.724635359396357, -0.07139869834378168}}, 
                    PlotRangeClipping -> True, 
                    ImagePadding -> {{30, 10}, {35, 0}}, DisplayFunction -> 
                    Identity, AspectRatio -> GoldenRatio^(-1), 
                    Axes -> {True, True}, AxesLabel -> {None, None}, 
                    AxesOrigin -> {2.086414691506906, -1.751300466832689}, 
                    DisplayFunction :> Identity, 
                    Frame -> {{True, True}, {True, True}}, 
                    FrameLabel -> {{None, None}, {
                    "training examples used", None}}, FrameTicks -> {{
                    Charting`ScaledTicks[{Log, Exp}], {}}, {
                    Charting`ScaledTicks[{Log, Exp}], {}}}, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& }, 
                    GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], ImageMargins -> 0, 
                    ImagePadding -> {{30, 10}, {35, 0}}, ImageSize -> 330, 
                    Method -> {
                    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Exp[#]& )[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Exp[#]& )[
                    Part[#, 2]]}& )}}, PlotRange -> {{2.1344536593519843`, 
                    Log[195]}, {-1.724635359396357, -0.07139869834378168}}, 
                    PlotRangeClipping -> True, PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.02], 
                    Scaled[0.05]}}, Ticks -> {
                    Charting`ScaledTicks[{Log, Exp}], 
                    Charting`ScaledTicks[{Log, Exp}]}}], 
                    Graphics[{{{}, {{{}, {}, {
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.1972245773362196`, 0.6666889469897685}, {
                    3.6888794541139363`, 0.8179431072210065}, {
                    5.049856007249537, 0.9487179487179487}}]}, {
                    Hue[0.9060679774997897, 0.6, 0.6], 
                    Directive[
                    Opacity[0]], 
                    
                    Line[{{2.1972245773362196`, 0.7905982905982906}, {
                    2.1972245773362196`, 0.8000267363877223}}]}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6], 
                    AbsolutePointSize[6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 8.96], {0., 0.}], {{{
                    2.1972245773362196`, 0.6666889469897685}}, {{
                    3.6888794541139363`, 0.8179431072210065}}, {{
                    5.049856007249537, 0.9487179487179487}}}]}, {
                    Directive[
                    Opacity[0]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledSquare]", FontSize -> 8.96], {0., 0.}], {{{
                    2.1972245773362196`, 0.7905982905982906}}, {{
                    2.1972245773362196`, 
                    0.8000267363877223}}}]}, {}}}, {}, {}, {}, {}}}, {
                    DisplayFunction -> Identity, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Identity, Identity}][#, #2, {6,
                     6}]& }, DisplayFunction -> Identity, DisplayFunction -> 
                    Identity, DisplayFunction -> Identity, 
                    PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.05], 0}}, 
                    AxesOrigin -> {2.086414691506906, 0.6509005286892838}, 
                    PlotRange -> {{2.1344536593519843`, 
                    Log[195]}, {0.6666889469897685, 1}}, PlotRangeClipping -> 
                    True, ImagePadding -> {{30, 10}, {35, 0}}, 
                    DisplayFunction -> Identity, AspectRatio -> 
                    GoldenRatio^(-1), Axes -> {True, True}, 
                    AxesLabel -> {None, None}, 
                    AxesOrigin -> {2.086414691506906, 0.6509005286892838}, 
                    DisplayFunction :> Identity, 
                    Frame -> {{True, True}, {True, True}}, 
                    FrameLabel -> {{None, None}, {
                    "training examples used", None}}, 
                    FrameTicks -> {{Automatic, None}, {
                    Charting`ScaledTicks[{Log, Exp}], {}}}, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Identity, Identity}][#, #2, {6,
                     6}]& }, GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], ImageMargins -> 0, 
                    ImagePadding -> {{30, 10}, {35, 0}}, ImageSize -> 330, 
                    Method -> {
                    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Identity[#]& )[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Identity[#]& )[
                    Part[#, 2]]}& )}}, PlotRange -> {{2.1344536593519843`, 
                    Log[195]}, {0.6666889469897685, 1}}, PlotRangeClipping -> 
                    True, PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.05], 0}}, Ticks -> {
                    Charting`ScaledTicks[{Log, Exp}], Automatic}}], 
                    Graphics[{{{{}, {{{}, {}, 
                    Tooltip[{
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.1972245773362196`, -0.07139869834378168}, {
                    3.6888794541139363`, -0.5007942499774027}, {
                    5.049856007249537, -1.6376229035514847`}}]}, 
                    "LogisticRegression"], 
                    Tooltip[{
                    Hue[0.9060679774997897, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.1972245773362196`, 0.5537933220368644}, {
                    5.049856007249537, -0.721959085884252}}]}, 
                    "RandomForest"], 
                    Tooltip[{
                    Hue[0.1421359549995791, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.560181, 0.691569, 0.194885], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.1972245773362196`, 2.408962588268165}, {
                    2.1972245773362196`, 2.408962588268165}}]}, "NaiveBayes"], 
                    Tooltip[{
                    Hue[0.37820393249936934`, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.922526, 0.385626, 0.209179], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.1972245773362196`, 0.4841801219494678}, {
                    5.049856007249537, -0.3292140381030391}}]}, 
                    "NearestNeighbors"], 
                    Tooltip[{
                    Hue[0.6142719099991583, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.528488, 0.470624, 0.701351], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.1972245773362196`, 0.6204890044341929}, {
                    5.049856007249537, -0.8712931489163864}}]}, 
                    "DecisionTree"], 
                    Tooltip[{
                    Hue[0.8503398874989481, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.772079, 0.431554, 0.102387], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.1972245773362196`, 0.8166380020654994}, {
                    2.1972245773362196`, 0.8166380020654994}}]}, 
                    "LogisticRegression"]}}, {}, {}, {}, {}}}}, {
                    DisplayFunction -> Identity, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& }, 
                    DisplayFunction -> Identity, DisplayFunction -> Identity, 
                    DisplayFunction -> Identity, PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.02], 
                    Scaled[0.05]}}, 
                    AxesOrigin -> {2.086414691506906, -1.9313266892480725`}, 
                    PlotRange -> {{2.1344536593519843`, 
                    Log[195]}, {-1.8624332086525763`, 2.408962588268165}}, 
                    PlotRangeClipping -> True, 
                    ImagePadding -> {{30, 10}, {35, 0}}, DisplayFunction -> 
                    Identity, AspectRatio -> GoldenRatio^(-1), 
                    Axes -> {True, True}, AxesLabel -> {None, None}, 
                    AxesOrigin -> {2.086414691506906, -1.9313266892480725`}, 
                    DisplayFunction :> Identity, 
                    Frame -> {{True, True}, {True, True}}, 
                    FrameLabel -> {{None, None}, {
                    "training examples used", None}}, FrameTicks -> {{
                    Charting`ScaledTicks[{Log, Exp}], {}}, {
                    Charting`ScaledTicks[{Log, Exp}], {}}}, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& }, 
                    GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], ImageMargins -> 0, 
                    ImagePadding -> {{30, 10}, {35, 0}}, ImageSize -> 330, 
                    Method -> {
                    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Exp[#]& )[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Exp[#]& )[
                    Part[#, 2]]}& )}}, PlotRange -> {{2.1344536593519843`, 
                    Log[195]}, {-1.8624332086525763`, 2.408962588268165}}, 
                    PlotRangeClipping -> True, PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.02], 
                    Scaled[0.05]}}, Ticks -> {
                    Charting`ScaledTicks[{Log, Exp}], 
                    Charting`ScaledTicks[{Log, Exp}]}}]}]], Appearance -> 
                    "Frameless"]}}, Alignment -> {Center, Baseline}, 
                    ItemSize -> {{3, 20, 3}, {2}}]], StandardForm],
                ImageSizeCache->{297., {115., 120.}}],
               DynamicModuleValues:>{}], "\[SpanFromLeft]"}
            },
            AutoDelete->False,
            
            GridBoxAlignment->{
             "Columns" -> {Right, {Left}}, "ColumnsIndexed" -> {}, 
              "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
            GridBoxDividers->{"Columns" -> {False, {
                 Opacity[0.15]}, False}},
            
            GridBoxItemSize->{
             "Columns" -> {Automatic, {Automatic}}, "ColumnsIndexed" -> {}, 
              "Rows" -> {{1.}}, "RowsIndexed" -> {}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], 
                Offset[1.1199999999999999`], {
                 Offset[1.75]}, 
                Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
                Offset[0.2], {
                 Offset[0.8]}, 
                Offset[0.2]}, "RowsIndexed" -> {}}],
           "Grid"],
          FrameMargins->{{5, 5}, {10, 5}},
          FrameStyle->None,
          StripOnInput->False],
         Deploy,
         DefaultBaseStyle->"Deploy"],
        Alignment->Center,
        BaseStyle->{
         FontWeight -> "Light", FontSize -> 12, FontFamily -> "Segoe UI", 
          NumberMarks -> False, Deployed -> False},
        StripOnInput->False]}
     },
     DefaultBaseStyle->"Column",
     GridBoxAlignment->{
      "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
       "RowsIndexed" -> {}},
     GridBoxDividers->{
      "Columns" -> {{False}}, "ColumnsIndexed" -> {}, "Rows" -> {{False}}, 
       "RowsIndexed" -> {}},
     GridBoxItemSize->{
      "Columns" -> {{Automatic}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.}}, 
       "RowsIndexed" -> {}},
     GridBoxSpacings->{"Columns" -> {
         Offset[0.27999999999999997`], {
          Offset[0.5599999999999999]}, 
         Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
         Offset[0.2], 
         Offset[1.2], {
          Offset[0.4]}, 
         Offset[0.2]}, "RowsIndexed" -> {}}],
    Background->RGBColor[0.9802, 0.9802, 0.9802],
    FrameMargins->{{0, 0}, {0, 0}},
    FrameStyle->GrayLevel[0.85],
    RoundingRadius->5,
    StripOnInput->False],
   StripOnInput->False,
   LineBreakWithin->False],
  Deploy,
  DefaultBaseStyle->"Deploy"]], "Output",
 CellChangeTimes->{
  3.753631881158264*^9},ExpressionUUID->"524e87fc-b638-4eef-ba9a-\
e5f5b9bc8696"]
}, Open  ]],

Cell["\<\
We frequently found that one image is misclassified in the testing set that \
was provided. That is because the particular texture image resembles class 4 \
even though it belongs to class 6. \
\>", "Text",
 CellChangeTimes->{{3.7536416116096582`*^9, 3.7536416514860086`*^9}, {
  3.7536418466770935`*^9, 
  3.7536419148436775`*^9}},ExpressionUUID->"718a5de2-41bf-4b5c-9624-\
df7a1375de80"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Validation sets", "Section",
 CellChangeTimes->{{3.7536456538988905`*^9, 
  3.7536456572887383`*^9}},ExpressionUUID->"93b9fbfe-b622-4441-a89b-\
f474357e8121"],

Cell["\<\
The results of 2 cross-validation sets chosen randomly from the training and \
testing images altogether, are shown below. The overall performance of the \
classifier is  better for these testing sets. \
\>", "Text",
 CellChangeTimes->{{3.753645662361386*^9, 3.7536456670544167`*^9}, {
  3.7536458141962876`*^9, 
  3.7536458777337513`*^9}},ExpressionUUID->"74068215-0d45-425a-88e4-\
1fbbb151a3f0"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Result", "=", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "\"\<Training set\>\"", ",", " ", "\"\<Seg\>\"", ",", " ", 
       "\"\<Stat\>\"", ",", " ", "\"\<Stat + Seg\>\"", ",", " ", 
       "\"\<GLCM + Stat + Seg\>\""}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
      "\"\<Original\>\"", ",", "0.61", ",", "0.95", ",", "0.85", ",", 
       "0.95"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\"\<VFold1\>\"", ",", "0.55", ",", "1", ",", "1", ",", "1"}], 
      "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
      "\"\<Vfold2\>\"", ",", "0.65", ",", "0.95", ",", "1", ",", "1"}], 
      "}"}]}], "}"}], "//", "TableForm"}]}]], "Input",
 CellChangeTimes->{{3.753645364249905*^9, 3.7536454632224183`*^9}, {
  3.7536455009724283`*^9, 3.753645522433028*^9}},
 CellLabel->
  "In[104]:=",ExpressionUUID->"879ff2d5-4f61-4d7d-834c-70cc694463a3"],

Cell[BoxData[
 TagBox[GridBox[{
    {"\<\"Training set\"\>", "\<\"Seg\"\>", "\<\"Stat\"\>", "\<\"Stat + Seg\"\
\>", "\<\"GLCM + Stat + Seg\"\>"},
    {"\<\"Original\"\>", "0.61`", "0.95`", "0.85`", "0.95`"},
    {"\<\"VFold1\"\>", "0.55`", "1", "1", "1"},
    {"\<\"Vfold2\"\>", "0.65`", "0.95`", "1", "1"}
   },
   GridBoxAlignment->{
    "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
     "RowsIndexed" -> {}},
   GridBoxSpacings->{"Columns" -> {
       Offset[0.27999999999999997`], {
        Offset[2.0999999999999996`]}, 
       Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
       Offset[0.2], {
        Offset[0.4]}, 
       Offset[0.2]}, "RowsIndexed" -> {}}],
  Function[BoxForm`e$, 
   TableForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{
  3.7536453687817373`*^9, {3.7536454556905355`*^9, 3.7536454638277974`*^9}, 
   3.7536455262498226`*^9},
 CellLabel->
  "Out[104]//TableForm=",ExpressionUUID->"30b42389-25d5-4d03-83a0-\
72908afcacff"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Evaluation: Test Bench", "Section",
 CellChangeTimes->{{3.7536394068322687`*^9, 
  3.7536394180393367`*^9}},ExpressionUUID->"373a6c55-7bf8-4c19-9910-\
371faec6e3b3"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Instructions", " ", "for", " ", 
   RowBox[{"Workflow", ":", "\n", "\n", " ", 
    RowBox[{
    "1.", " ", "Initialize", " ", "the", " ", "Notebook", " ", "cells", " ", 
     "with", " ", "the", " ", "FeatureExtraction", " ", "functions", " ", 
     "for", " ", "Statistical", " ", "and", " ", "Segmentation", " ", 
     "features"}], ":"}]}], "\n", "      ", "\[Rule]", " ", 
  "featureVecSeg"}], "\n", 
 RowBox[{"      ", 
  RowBox[{"\[Rule]", " ", "featureVecStat"}], "\n", "      "}], "\n", 
 RowBox[{" ", 
  RowBox[{
  "2.", " ", "Choose", " ", "the", " ", "name", " ", "of", " ", "the", " ", 
   "Classifier", " ", "in", " ", "the", " ", "finalClassifier", " ", 
   "Assignment", " ", "Statement", " ", "using", " ", "any", " ", "one", " ", 
   "of", " ", 
   RowBox[{"these", ":"}]}], " ", "\n", " "}], "\n", 
 RowBox[{"     ", 
  RowBox[{"\[Rule]", " ", 
   RowBox[{"\"\<Classifier_Final.mx\>\"", " ", "\[Rule]", " ", 
    RowBox[{
     RowBox[{
      RowBox[{"Uses", " ", "'"}], 
      RowBox[{"overallFeatures", "'"}], " ", "as", " ", "its", " ", 
      "parameter", " ", "and", " ", "is", " ", "trained", " ", "on", " ", 
      "GLCM"}], "+", "Stat", "+", 
     RowBox[{"Segmentation", " ", "features"}]}]}]}]}], "\n", 
 RowBox[{"     ", 
  RowBox[{"\[Rule]", " ", 
   RowBox[{"\"\<Classifier_StatSeg.mx\>\"", " ", "\[Rule]", " ", 
    RowBox[{
     RowBox[{
      RowBox[{"Uses", " ", "'"}], 
      RowBox[{"statSegFeatures", "'"}], " ", "as", " ", "its", " ", 
      "parameter", " ", "and", " ", "is", " ", "trained", " ", "on", " ", 
      "Stat"}], "+", 
     RowBox[{"Segmentation", " ", "features"}]}]}]}]}], "\n", 
 RowBox[{"     ", 
  RowBox[{"\[Rule]", " ", 
   RowBox[{"\"\<Classifier_Stat.mx\>\"", " ", "\[Rule]", " ", 
    RowBox[{
     RowBox[{"Uses", " ", "'"}], 
     RowBox[{"statFeatures", "'"}], " ", "as", " ", "its", " ", "parameter", 
     " ", "and", " ", "is", " ", "trained", " ", "on", " ", "Statistical", 
     " ", "features"}]}]}]}], "\n", 
 RowBox[{"     ", 
  RowBox[{"\[Rule]", " ", 
   RowBox[{"\"\<Classifier_Seg.mx\>\"", " ", "\[Rule]", " ", 
    RowBox[{
     RowBox[{"Uses", " ", "'"}], 
     RowBox[{"segFeatures", "'"}], " ", "as", " ", "its", " ", "parameter", 
     " ", "and", " ", "is", " ", "trained", " ", "on", " ", "Segmentation", 
     " ", "features"}]}]}]}], "\n", 
 RowBox[{"     ", 
  RowBox[{"Recommended", ":", "\"\<Classifier_Final.mx\>\""}], "\n"}], "\n", 
 RowBox[{
  RowBox[{"3.", " ", "Evaluate", " ", "the", " ", "cell", " ", "below"}], ",",
   " ", 
  RowBox[{
  "while", " ", "loading", " ", "the", " ", "desired", " ", "classifier", " ",
    "and", " ", "passing", " ", "the", " ", "appropriate", " ", "features", 
   " ", "to", " ", 
   RowBox[{"it", ".", "\n", "\n", "4."}], " ", "Pass", " ", "the", " ", 
   "test", " ", "image", " ", "to", " ", "this", " ", "function", " ", 
   "titled", " ", "textureClassifier", " "}]}]}], "Code",
 CellChangeTimes->{{3.753639665533783*^9, 3.7536397661657867`*^9}, {
  3.753639808719043*^9, 3.753640090125826*^9}, {3.753640123791805*^9, 
  3.753640160663282*^9}, {3.75364150313145*^9, 3.7536415273831115`*^9}},
 EmphasizeSyntaxErrors->True,
 CellLabel->"In[39]:=",ExpressionUUID->"48c550bf-7ecf-4879-9884-d145b323e519"],

Cell[TextData[StyleBox["Example for running a sample test image:", \
"Section"]], "Text",
 CellChangeTimes->{{3.753646085970414*^9, 
  3.753646101492939*^9}},ExpressionUUID->"4746af0e-773c-47bf-ade0-\
4d729cb04659"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{"Load", " ", "Desired", " ", "Classifier", " ", "Here"}], "*)"}], 
  "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"finalClassifier", " ", "=", " ", 
    RowBox[{"Get", "[", 
     RowBox[{
      RowBox[{"NotebookDirectory", "[", "]"}], " ", "<>", " ", 
      "\"\<Classifier_Final.mx\>\""}], "]"}]}], "\n", 
   RowBox[{
    RowBox[{"textureClassifier", "[", "img1_", "]"}], " ", ":=", " ", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", "}"}], ",", "\n", "  ", 
      RowBox[{
       RowBox[{"segFeatures", " ", "=", " ", 
        RowBox[{"featureVecSeg", "[", "img1", "]"}]}], ";", "\n", "  ", 
       RowBox[{"statFeatures", " ", "=", " ", 
        RowBox[{"featureVecStat", "[", "img1", "]"}]}], ";", "\n", "  ", 
       RowBox[{"glcmFeatures", " ", "=", " ", 
        RowBox[{"Diagonal", "[", 
         RowBox[{"ImageCooccurrence", "[", 
          RowBox[{"img1", ",", " ", "20"}], "]"}], "]"}]}], ";", "\n", "  ", 
       RowBox[{"overallFeatures", " ", "=", " ", 
        RowBox[{"Join", "[", 
         RowBox[{
          RowBox[{"segFeatures", "[", 
           RowBox[{"[", "1", "]"}], "]"}], ",", " ", "statFeatures", ",", " ",
           "glcmFeatures"}], "]"}]}], ";", "\n", "  ", 
       RowBox[{"statSegFeatures", " ", "=", " ", 
        RowBox[{"Join", "[", 
         RowBox[{
          RowBox[{"segFeatures", "[", 
           RowBox[{"[", "1", "]"}], "]"}], ",", " ", "statFeatures"}], 
         "]"}]}], ";", "\n", "  ", 
       RowBox[{"(*", 
        RowBox[{"Pass", " ", "Appropriate", " ", "Features", " ", "Here"}], 
        "*)"}], "\[IndentingNewLine]", 
       RowBox[{"label", " ", "=", " ", 
        RowBox[{"finalClassifier", "[", "overallFeatures", "]"}]}]}]}], 
     "]"}]}], "\[IndentingNewLine]", "\n", 
   RowBox[{"(*", 
    RowBox[{
    "Pass", " ", "the", " ", "test", " ", "image", " ", "to", " ", "this"}], 
    "*)"}], "\[IndentingNewLine]", 
   RowBox[{"textureClassifier", "[", 
    RowBox[{"traTextures", "[", 
     RowBox[{"[", "90", "]"}], "]"}], "]"}]}]}]], "Input",
 CellChangeTimes->{{3.7536395310174465`*^9, 3.7536396294352283`*^9}, {
  3.753640094839239*^9, 3.753640117298196*^9}, {3.7536401738949275`*^9, 
  3.7536401898165555`*^9}},ExpressionUUID->"2a515773-684f-4ffa-910e-\
d7dbf416ed11"],

Cell[BoxData[
 TagBox[
  TemplateBox[{RowBox[{
      StyleBox[
       TagBox["ClassifierFunction", "SummaryHead"], 
       "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{
       Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
       TemplateBox[{
         PaneSelectorBox[{False -> GridBox[{{
               PaneBox[
                ButtonBox[
                 DynamicBox[
                  FEPrivate`FrontEndResource[
                  "FEBitmaps", "SquarePlusIconMedium"]], 
                 ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                 None, Evaluator -> Automatic, Method -> "Preemptive"], 
                Alignment -> {Center, Center}, ImageSize -> 
                Dynamic[{
                  Automatic, 
                   3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
               GraphicsBox[{{
                  PointSize[0.13], 
                  GrayLevel[0.45], 
                  
                  PointBox[{{0.9821769431797024, -0.440194219686987}, {
                   1.1339776261519132`, 0.8056918676854272}, {
                   0.5279892326667741, 0.6574306661126254}, {
                   0.022147046479890797`, 1.4937877187998898`}}], 
                  GrayLevel[0.7], 
                  
                  PointBox[{{-0.9815166384819979, 
                   0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
                  GrayLevel[0.55], 
                  AbsoluteThickness[1.5], 
                  LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
                Axes -> {False, False}, AxesLabel -> {None, None}, 
                 AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                   AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
                 Frame -> {{True, True}, {True, True}}, 
                 FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
                 Directive[
                   Thickness[Tiny], 
                   GrayLevel[0.7]], 
                 FrameTicks -> {{None, None}, {None, None}}, 
                 GridLines -> {None, None}, 
                 LabelStyle -> {FontFamily -> "Arial"}, 
                 Method -> {"ScalingFunctions" -> None}, 
                 PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> 
                 True, PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
                 Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
                ImageSize -> 
                Dynamic[{
                  Automatic, 
                   3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}], Frame -> True, FrameTicks -> None, 
                FrameStyle -> Directive[
                  Opacity[0.5], 
                  Thickness[Tiny], 
                  RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
                GrayLevel[0.94]], 
               GridBox[{{
                  RowBox[{
                    TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    TagBox[
                    TooltipBox[
                    TemplateBox[{"\"Mixed\"", 
                    StyleBox[
                    
                    TemplateBox[{"\" (number: \"", "53", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    TagBox[
                    RowBox[{"{", 
                    
                    RowBox[{
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\""}], "}"}], Short[#, 10]& ]], Annotation[#, 
                    
                    Short[{"Numerical", "Numerical", "Numerical", "Numerical",
                     "Numerical", "Numerical", "Numerical", "Numerical", 
                    "Numerical", "Numerical", "Numerical", "Numerical", 
                    "Numerical", "Numerical", "Numerical", "Numerical", 
                    "Numerical", "Numerical", "Numerical", "Numerical", 
                    "Numerical", "Numerical", "Numerical", "Numerical", 
                    "Numerical", "Numerical", "Numerical", "Numerical", 
                    "Numerical", "Numerical", "Numerical", "Numerical", 
                    "Numerical", "Numerical", "Numerical", "Numerical", 
                    "Numerical", "Numerical", "Numerical", "Numerical", 
                    "Numerical", "Numerical", "Numerical", "Numerical", 
                    "Numerical", "Numerical", "Numerical", "Numerical", 
                    "Numerical", "Numerical", "Numerical", "Numerical", 
                    "Numerical"}, 10], "Tooltip"]& ], "SummaryItem"]}]}, {
                  RowBox[{
                    TagBox[
                    "\"Number of classes: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    TagBox[
                    TooltipBox["6", 
                    TagBox[
                    
                    TemplateBox[{",", "\",\"", "1", "2", "3", "4", "5", "6"}, 
                    "RowWithSeparators"], Short[#, 20]& ]], Annotation[#, 
                    Short[
                    Row[{1, 2, 3, 4, 5, 6}, ","], 20], "Tooltip"]& ], 
                    "SummaryItem"]}]}}, 
                GridBoxAlignment -> {
                 "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
                False, 
                GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                GridBoxSpacings -> {
                 "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                BaseStyle -> {
                 ShowStringCharacters -> False, NumberMarks -> False, 
                  PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
             GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             BaselinePosition -> {1, 1}], True -> GridBox[{{
               PaneBox[
                ButtonBox[
                 DynamicBox[
                  FEPrivate`FrontEndResource[
                  "FEBitmaps", "SquareMinusIconMedium"]], 
                 ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                 None, Evaluator -> Automatic, Method -> "Preemptive"], 
                Alignment -> {Center, Center}, ImageSize -> 
                Dynamic[{
                  Automatic, 
                   3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
               GraphicsBox[{{
                  PointSize[0.13], 
                  GrayLevel[0.45], 
                  
                  PointBox[{{0.9821769431797024, -0.440194219686987}, {
                   1.1339776261519132`, 0.8056918676854272}, {
                   0.5279892326667741, 0.6574306661126254}, {
                   0.022147046479890797`, 1.4937877187998898`}}], 
                  GrayLevel[0.7], 
                  
                  PointBox[{{-0.9815166384819979, 
                   0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
                  GrayLevel[0.55], 
                  AbsoluteThickness[1.5], 
                  LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
                Axes -> {False, False}, AxesLabel -> {None, None}, 
                 AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                   AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
                 Frame -> {{True, True}, {True, True}}, 
                 FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
                 Directive[
                   Thickness[Tiny], 
                   GrayLevel[0.7]], 
                 FrameTicks -> {{None, None}, {None, None}}, 
                 GridLines -> {None, None}, 
                 LabelStyle -> {FontFamily -> "Arial"}, 
                 Method -> {"ScalingFunctions" -> None}, 
                 PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> 
                 True, PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
                 Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
                ImageSize -> 
                Dynamic[{
                  Automatic, 
                   3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}], Frame -> True, FrameTicks -> None, 
                FrameStyle -> Directive[
                  Opacity[0.5], 
                  Thickness[Tiny], 
                  RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
                GrayLevel[0.94]], 
               GridBox[{{
                  RowBox[{
                    TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    TagBox[
                    TooltipBox[
                    TemplateBox[{"\"Mixed\"", 
                    StyleBox[
                    
                    TemplateBox[{"\" (number: \"", "53", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    TagBox[
                    RowBox[{"{", 
                    
                    RowBox[{
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\""}], "}"}], Short[#, 10]& ]], Annotation[#, 
                    
                    Short[{"Numerical", "Numerical", "Numerical", "Numerical",
                     "Numerical", "Numerical", "Numerical", "Numerical", 
                    "Numerical", "Numerical", "Numerical", "Numerical", 
                    "Numerical", "Numerical", "Numerical", "Numerical", 
                    "Numerical", "Numerical", "Numerical", "Numerical", 
                    "Numerical", "Numerical", "Numerical", "Numerical", 
                    "Numerical", "Numerical", "Numerical", "Numerical", 
                    "Numerical", "Numerical", "Numerical", "Numerical", 
                    "Numerical", "Numerical", "Numerical", "Numerical", 
                    "Numerical", "Numerical", "Numerical", "Numerical", 
                    "Numerical", "Numerical", "Numerical", "Numerical", 
                    "Numerical", "Numerical", "Numerical", "Numerical", 
                    "Numerical", "Numerical", "Numerical", "Numerical", 
                    "Numerical"}, 10], "Tooltip"]& ], "SummaryItem"]}]}, {
                  RowBox[{
                    TagBox[
                    "\"Number of classes: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    TagBox[
                    TooltipBox["6", 
                    TagBox[
                    
                    TemplateBox[{",", "\",\"", "1", "2", "3", "4", "5", "6"}, 
                    "RowWithSeparators"], Short[#, 20]& ]], Annotation[#, 
                    Short[
                    Row[{1, 2, 3, 4, 5, 6}, ","], 20], "Tooltip"]& ], 
                    "SummaryItem"]}]}, {
                  RowBox[{
                    TagBox["\"Method: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"LogisticRegression\"", "SummaryItem"]}]}, {
                  RowBox[{
                    TagBox[
                    "\"Number of training examples: \"", 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox["195", "SummaryItem"]}]}}, 
                GridBoxAlignment -> {
                 "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
                False, GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                GridBoxSpacings -> {
                 "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                BaseStyle -> {
                 ShowStringCharacters -> False, NumberMarks -> False, 
                  PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
             GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             BaselinePosition -> {1, 1}]}, 
          Dynamic[Typeset`open$$], ImageSize -> Automatic]}, "SummaryPanel", 
        DisplayFunction -> (
         ButtonBox[#, Active -> False, Alignment -> Left, 
          Appearance -> {
           "Default" -> 
            FrontEnd`FileName[{"Typeset", "SummaryBox"}, "Panel.9.png"]}, 
          FrameMargins -> 7, BaseStyle -> {}, 
          DefaultBaseStyle -> {"Panel", Background -> None}, BaselinePosition -> 
          Baseline]& )], DynamicModuleValues :> {}], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("ClassifierFunction[\[Ellipsis]]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{
  3.753639587493437*^9, {3.753639620717531*^9, 3.7536396299328985`*^9}, 
   3.7536401915965586`*^9},ExpressionUUID->"afe3e1cc-4743-4eaf-b96b-\
df4e02ec4518"],

Cell[BoxData["4"], "Output",
 CellChangeTimes->{
  3.753639587493437*^9, {3.753639620717531*^9, 3.7536396299328985`*^9}, 
   3.7536401961424055`*^9},ExpressionUUID->"aaccaaec-cbd8-4f92-b8cb-\
c406b6352cce"]
}, Open  ]]
}, Open  ]],

Cell["\<\
The label returned by textureClassifier is the predicted class for the test \
image.  \
\>", "Section",
 CellChangeTimes->{{3.753646115362835*^9, 
  3.753646147339324*^9}},ExpressionUUID->"f394264d-7024-4d0f-8f10-\
4a79b944b83d"]
}, Open  ]]
},
WindowSize->{1264, 661},
WindowMargins->{{-8, Automatic}, {Automatic, 0}},
Magnification:>0.9 Inherited,
FrontEndVersion->"11.3 for Microsoft Windows (64-bit) (March 6, 2018)",
StyleDefinitions->"Default.nb"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 332, 8, 197, "Title",ExpressionUUID->"587c9bcf-da78-43b4-9f7c-c94f0df8230f"],
Cell[CellGroupData[{
Cell[937, 34, 174, 3, 48, "Subsection",ExpressionUUID->"924a6c0c-67ba-442b-aee8-ea6d255cf991"],
Cell[1114, 39, 418, 7, 45, "Code",ExpressionUUID->"5cf28fa1-6099-4f50-a018-588573a3b833"],
Cell[1535, 48, 1307, 34, 81, "Input",ExpressionUUID->"ebdef021-d26c-4c0d-a609-1731120655af"]
}, Open  ]],
Cell[CellGroupData[{
Cell[2879, 87, 387, 7, 72, "Subsection",ExpressionUUID->"fef77e47-b759-42da-be9f-671efb9d1e59"],
Cell[3269, 96, 330, 6, 45, "Code",ExpressionUUID->"86880dde-e8cb-4c66-a185-9245c9bde3d5"],
Cell[3602, 104, 1963, 47, 171, "Input",ExpressionUUID->"e74f7cb0-9501-48a3-9fce-6214a41dafc8"]
}, Open  ]],
Cell[CellGroupData[{
Cell[5602, 156, 225, 4, 60, "Section",ExpressionUUID->"ec88e78d-b66b-4b5f-b200-7847f7cb17ed"],
Cell[5830, 162, 1467, 27, 259, "Text",ExpressionUUID->"69679935-a8e9-4adf-a4f0-3d611e0001b0"],
Cell[CellGroupData[{
Cell[7322, 193, 348, 5, 45, "Code",ExpressionUUID->"f7d42e1e-01fe-4106-bdde-42e00ba43410"],
Cell[7673, 200, 275, 4, 30, "Output",ExpressionUUID->"694f7004-8c9b-4cdf-abff-ff8896df42f9"]
}, Open  ]],
Cell[7963, 207, 7604, 146, 387, "Input",ExpressionUUID->"f970447c-4d8a-4558-9ab0-c721866c84f3"],
Cell[CellGroupData[{
Cell[15592, 357, 199, 3, 40, "Subsubsection",ExpressionUUID->"f35e8499-ad17-470c-b57f-a0313acba485"],
Cell[15794, 362, 2152, 51, 117, "Input",ExpressionUUID->"96c18bd1-b88f-40f8-a843-6707bfcc7236"]
}, Open  ]],
Cell[CellGroupData[{
Cell[17983, 418, 188, 3, 40, "Subsubsection",ExpressionUUID->"b2917aee-d8e7-4515-b105-73aa020487b3"],
Cell[CellGroupData[{
Cell[18196, 425, 532, 12, 45, "Input",ExpressionUUID->"888c579b-ebf9-4a18-b2c9-a24856318080"],
Cell[18731, 439, 85792, 1525, 65, "Output",ExpressionUUID->"bb73dc85-e966-4566-aa59-264a780f897c"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[104572, 1970, 213, 4, 40, "Subsubsection",ExpressionUUID->"9a720563-e5c0-42ae-9a23-85272c375207"],
Cell[CellGroupData[{
Cell[104810, 1978, 1785, 43, 117, "Input",ExpressionUUID->"ecde42d1-3045-471c-a151-4767dd683acc"],
Cell[106598, 2023, 650, 8, 30, "Output",ExpressionUUID->"0060bcc9-881b-4d8e-8a81-8cb2ea743f22"]
}, Open  ]],
Cell[CellGroupData[{
Cell[107285, 2036, 224, 3, 26, "Input",ExpressionUUID->"6533057f-7d66-4a78-8604-840ae2b62c90"],
Cell[107512, 2041, 70135, 1392, 554, "Output",ExpressionUUID->"19371a75-f428-4a56-834d-1377e437108c"]
}, Open  ]],
Cell[177662, 3436, 333, 7, 25, "Text",ExpressionUUID->"4f263ea3-3051-4ec2-9e46-3eb3b1737b88"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[178044, 3449, 170, 3, 48, "Section",ExpressionUUID->"b4f2a97f-0121-462f-89b8-cd82a75a46c7"],
Cell[178217, 3454, 841, 15, 76, "Text",ExpressionUUID->"abdcb461-29a9-4b9a-ac7e-8e1ebdb41d20"],
Cell[CellGroupData[{
Cell[179083, 3473, 299, 4, 36, "Code",ExpressionUUID->"d9233197-2383-4804-a93a-017b99cd6df4"],
Cell[179385, 3479, 277, 4, 24, "Output",ExpressionUUID->"f8b92697-cb0b-4621-b201-28ff28e7f0b5"]
}, Open  ]],
Cell[179677, 3486, 2794, 62, 167, "Input",ExpressionUUID->"7ddd284d-9770-488e-9737-dcc821f36eb8"],
Cell[CellGroupData[{
Cell[182496, 3552, 198, 3, 32, "Subsubsection",ExpressionUUID->"34ad8440-f042-4a8a-ae43-34f5363c023d"],
Cell[182697, 3557, 1597, 42, 94, "Input",ExpressionUUID->"a686225f-66f9-4b61-96ac-a711a0e5b552"]
}, Open  ]],
Cell[CellGroupData[{
Cell[184331, 3604, 192, 3, 32, "Subsubsection",ExpressionUUID->"6851a4fc-d427-4403-bcf1-58c02a384e75"],
Cell[CellGroupData[{
Cell[184548, 3611, 499, 10, 36, "Input",ExpressionUUID->"8a284210-7c0f-4902-8e07-bc22372a6444"],
Cell[185050, 3623, 70931, 1268, 52, "Output",ExpressionUUID->"81690813-c6ae-4258-9efb-4bc8703846bc"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[256030, 4897, 213, 4, 32, "Subsubsection",ExpressionUUID->"a195ecc1-8c08-40dc-a217-eb80d2665b69"],
Cell[CellGroupData[{
Cell[256268, 4905, 1640, 41, 94, "Input",ExpressionUUID->"2e3e6c20-e0b6-434b-8dd0-7bbc671762f3"],
Cell[257911, 4948, 425, 5, 24, "Output",ExpressionUUID->"22b0ad33-5904-4da0-a3ee-96d16c6028aa"]
}, Open  ]],
Cell[CellGroupData[{
Cell[258373, 4958, 329, 5, 21, "Input",ExpressionUUID->"80ca6dee-d351-455f-8f9a-c7b80656e510"],
Cell[258705, 4965, 67630, 1338, 448, "Output",ExpressionUUID->"9759bf21-7bc9-499f-aa47-45ca1c018412"]
}, Open  ]],
Cell[326350, 6306, 287, 6, 25, "Text",ExpressionUUID->"888ffccc-edd1-4b08-92b2-d77505c1baa1"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[326686, 6318, 216, 4, 48, "Section",ExpressionUUID->"1e6117d7-7638-4d53-95c6-93d328f852f1"],
Cell[326905, 6324, 631, 10, 42, "Text",ExpressionUUID->"717cb869-3bec-4c9d-9d78-37effdbc0ab2"],
Cell[CellGroupData[{
Cell[327561, 6338, 237, 5, 32, "Subsubsection",ExpressionUUID->"a738c30e-d79e-4cba-8153-c4cd4d7ee98b"],
Cell[CellGroupData[{
Cell[327823, 6347, 2942, 68, 167, "Input",ExpressionUUID->"827a0fc5-af5c-4b82-ac16-3301944fac0e"],
Cell[330768, 6417, 96108, 1682, 52, "Output",ExpressionUUID->"4d15d246-d9fc-4607-aad9-b47719f0e7d9"],
Cell[426879, 8101, 399, 6, 24, "Output",ExpressionUUID->"1dff0761-4398-4746-8c38-6cab509d0e92"],
Cell[427281, 8109, 68779, 1357, 448, "Output",ExpressionUUID->"b3ae3a02-6698-4f44-89a4-dba7348c3533"]
}, Open  ]],
Cell[496075, 9469, 154, 3, 21, "Input",ExpressionUUID->"79be7cf4-9bf8-476b-98d3-cc4734a783ad"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[496278, 9478, 242, 4, 48, "Section",ExpressionUUID->"f1a64e87-679b-4547-a380-125ae801b47e"],
Cell[496523, 9484, 1987, 32, 192, "Text",ExpressionUUID->"1c0ee009-e73b-4339-8c5e-317966d1070f"],
Cell[498513, 9518, 1931, 50, 94, "Input",ExpressionUUID->"d6ebd5aa-6428-4c50-b2be-8fcc580b241d"],
Cell[500447, 9570, 229, 4, 21, "Input",ExpressionUUID->"5e48948b-5d26-4edc-a8cb-8649344665cd"],
Cell[CellGroupData[{
Cell[500701, 9578, 567, 9, 36, "Code",ExpressionUUID->"54497569-389b-4488-b900-9445734d5fb1"],
Cell[501271, 9589, 529, 9, 25, "Output",ExpressionUUID->"57ea8fc1-4a4c-4f54-9a57-9f96f93eb8e7"]
}, Open  ]],
Cell[CellGroupData[{
Cell[501837, 9603, 753, 15, 21, "Input",ExpressionUUID->"b7dac978-f641-4ac6-9603-6475eb8c257a"],
Cell[502593, 9620, 2018, 38, 95, "Output",ExpressionUUID->"b9dbeba1-4628-4e28-a0f6-6851c7471592"],
Cell[504614, 9660, 410, 8, 16, "Message",ExpressionUUID->"5d9a6374-7d6f-4535-89eb-0c5e47a86a99"],
Cell[505027, 9670, 411, 8, 16, "Message",ExpressionUUID->"d410057b-399f-448a-841e-d3253a627ebd"],
Cell[505441, 9680, 409, 8, 16, "Message",ExpressionUUID->"d7934dfa-c914-47a2-a5a3-64bde22e22b6"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[505899, 9694, 238, 4, 48, "Section",ExpressionUUID->"c220a23a-1679-49db-91e1-e0a7c5f20735"],
Cell[506140, 9700, 298, 7, 25, "Text",ExpressionUUID->"1712b894-a9cb-491a-a034-3e547250c8c8"],
Cell[CellGroupData[{
Cell[506463, 9711, 242, 6, 32, "Subsubsection",ExpressionUUID->"ad575013-582f-49f0-91f3-bc45246783d8"],
Cell[CellGroupData[{
Cell[506730, 9721, 2547, 63, 153, "Input",ExpressionUUID->"9267c681-e2f2-4c18-9e1c-ef838efc71e9"],
Cell[509280, 9786, 17074, 325, 52, "Output",ExpressionUUID->"c94b95f9-3914-4e99-8fac-0837059d6fe4"],
Cell[526357, 10113, 477, 8, 24, "Output",ExpressionUUID->"4f683589-7fc9-4e0b-8900-3f0cdd666cd2"]
}, Open  ]],
Cell[CellGroupData[{
Cell[526871, 10126, 207, 4, 21, "Input",ExpressionUUID->"ae700599-614b-44b9-a288-dd64f9827694"],
Cell[527081, 10132, 61260, 1197, 439, "Output",ExpressionUUID->"524e87fc-b638-4eef-ba9a-e5f5b9bc8696"]
}, Open  ]],
Cell[588356, 11332, 399, 8, 25, "Text",ExpressionUUID->"718a5de2-41bf-4b5c-9624-df7a1375de80"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[588804, 11346, 164, 3, 48, "Section",ExpressionUUID->"93b9fbfe-b622-4441-a89b-f474357e8121"],
Cell[588971, 11351, 407, 8, 25, "Text",ExpressionUUID->"74068215-0d45-425a-88e4-1fbbb151a3f0"],
Cell[CellGroupData[{
Cell[589403, 11363, 911, 24, 36, "Input",ExpressionUUID->"879ff2d5-4f61-4d7d-834c-70cc694463a3"],
Cell[590317, 11389, 999, 25, 71, "Output",ExpressionUUID->"30b42389-25d5-4d03-83a0-72908afcacff"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[591365, 11420, 171, 3, 48, "Section",ExpressionUUID->"373a6c55-7bf8-4c19-9910-371faec6e3b3"],
Cell[591539, 11425, 3269, 71, 257, "Code",ExpressionUUID->"48c550bf-7ecf-4879-9884-d145b323e519"],
Cell[594811, 11498, 215, 4, 36, "Text",ExpressionUUID->"4746af0e-773c-47bf-ade0-4d729cb04659"],
Cell[CellGroupData[{
Cell[595051, 11506, 2303, 53, 196, "Input",ExpressionUUID->"2a515773-684f-4ffa-910e-d7dbf416ed11"],
Cell[597357, 11561, 16823, 321, 52, "Output",ExpressionUUID->"afe3e1cc-4743-4eaf-b96b-df4e02ec4518"],
Cell[614183, 11884, 206, 4, 24, "Output",ExpressionUUID->"aaccaaec-cbd8-4f92-b8cb-c406b6352cce"]
}, Open  ]]
}, Open  ]],
Cell[614416, 11892, 239, 6, 48, "Section",ExpressionUUID->"f394264d-7024-4d0f-8f10-4a79b944b83d"]
}, Open  ]]
}
]
*)

